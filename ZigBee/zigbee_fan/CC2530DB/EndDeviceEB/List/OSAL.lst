###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               25/Aug/2024  15:10:40
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c
#    Command line       =  
#        -f C:\user\EW131A.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c" -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List\OSAL.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj\OSAL.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2011-05-27 09:03:48 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26134 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License"). You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product. Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Tasks.h"
     51          #include "OSAL_Memory.h"
     52          #include "OSAL_PwrMgr.h"
     53          #include "OSAL_Clock.h"
     54          
     55          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     56          
     57          /* HAL */
     58          #include "hal_drivers.h"
     59          
     60          #ifdef IAR_ARMCM3_LM
     61            #include "FreeRTOSConfig.h"
     62            #include "osal_task.h"
     63          #endif
     64          
     65          /*********************************************************************
     66           * MACROS
     67           */
     68          
     69          /*********************************************************************
     70           * CONSTANTS
     71           */
     72          
     73          /*********************************************************************
     74           * TYPEDEFS
     75           */
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          /*********************************************************************
     89           * EXTERNAL FUNCTIONS
     90           */
     91          
     92          /*********************************************************************
     93           * LOCAL VARIABLES
     94           */
     95          
     96          // Index of active task

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          static uint8 activeTaskID = TASK_NO_TASK;
   \                     activeTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for activeTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     98          
     99          /*********************************************************************
    100           * LOCAL FUNCTION PROTOTYPES
    101           */
    102          
    103          /*********************************************************************
    104           * HELPER FUNCTIONS
    105           */
    106          /* very ugly stub so Keil can compile */
    107          #ifdef __KEIL__
    108          char *  itoa ( int value, char * buffer, int radix )
    109          {
    110            return(buffer);
    111          }
    112          #endif
    113          
    114          /*********************************************************************
    115           * @fn      osal_strlen
    116           *
    117           * @brief
    118           *
    119           *   Calculates the length of a string.  The string must be null
    120           *   terminated.
    121           *
    122           * @param   char *pString - pointer to text string
    123           *
    124           * @return  int - number of characters
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          int osal_strlen( char *pString )
   \                     osal_strlen:
    127          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    128            return (int)( strlen( pString ) );
   \   000004                ; Setup parameters for call to function strlen
   \   000004   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    129          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    130          
    131          /*********************************************************************
    132           * @fn      osal_memcpy
    133           *
    134           * @brief
    135           *
    136           *   Generic memory copy.
    137           *
    138           *   Note: This function differs from the standard memcpy(), since
    139           *         it returns the pointer to the next destination uint8. The
    140           *         standard memcpy() returns the original destination address.
    141           *
    142           * @param   dst - destination address
    143           * @param   src - source address
    144           * @param   len - number of bytes to copy
    145           *
    146           * @return  pointer to end of destination buffer
    147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    149          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    150            uint8 *pDst;
    151            const uint8 GENERIC *pSrc;
    152          
    153            pSrc = src;
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine7 & 0xFFFF
    154            pDst = dst;
   \                     ??CrossCallReturnLabel_2:
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   800C         SJMP      ??osal_memcpy_0
    155          
    156            while ( len-- )
    157              *pDst++ = *pSrc++;
   \                     ??osal_memcpy_1:
   \   000017   12....       LCALL     ?C_GPTR_LOAD
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   E9           MOV       A,R1
   \   00001C   2401         ADD       A,#0x1
   \   00001E   09           INC       R1
   \   00001F   E4           CLR       A
   \   000020   3A           ADDC      A,R2
   \   000021   FA           MOV       R2,A
   \   000022   A3           INC       DPTR
   \                     ??osal_memcpy_0:
   \   000023   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000026   70EF         JNZ       ??osal_memcpy_1
    158          
    159            return ( pDst );
   \   000028                REQUIRE ?Subroutine4
   \   000028                ; // Fall through to label ?Subroutine4
    160          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   80..         SJMP      ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EC           MOV       A,R4
   \   000001   FE           MOV       R6,A
   \   000002   ED           MOV       A,R5
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1C           DEC       R4
   \   000008   EF           MOV       A,R7
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FD           MOV       R5,A
   \   00000C   EE           MOV       A,R6
   \   00000D   4F           ORL       A,R7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    161          
    162          /*********************************************************************
    163           * @fn      osal_revmemcpy
    164           *
    165           * @brief   Generic reverse memory copy.  Starts at the end of the
    166           *   source buffer, by taking the source address pointer and moving
    167           *   pointer ahead "len" bytes, then decrementing the pointer.
    168           *
    169           *   Note: This function differs from the standard memcpy(), since
    170           *         it returns the pointer to the next destination uint8. The
    171           *         standard memcpy() returns the original destination address.
    172           *
    173           * @param   dst - destination address
    174           * @param   src - source address
    175           * @param   len - number of bytes to copy
    176           *
    177           * @return  pointer to end of destination buffer
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    180          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    181            uint8 *pDst;
    182            const uint8 GENERIC *pSrc;
    183          
    184            pSrc = src;
    185            pSrc += (len-1);
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000011   E9           MOV       A,R1
   \   000012   2C           ADD       A,R4
   \   000013   F9           MOV       R1,A
   \   000014   EA           MOV       A,R2
   \   000015   3D           ADDC      A,R5
   \   000016   FA           MOV       R2,A
   \   000017   E9           MOV       A,R1
   \   000018   24FF         ADD       A,#-0x1
   \   00001A   19           DEC       R1
   \   00001B   EA           MOV       A,R2
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FA           MOV       R2,A
    186            pDst = dst;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   800D         SJMP      ??osal_revmemcpy_0
    187          
    188            while ( len-- )
    189              *pDst++ = *pSrc--;
   \                     ??osal_revmemcpy_1:
   \   000025   12....       LCALL     ?C_GPTR_LOAD
   \   000028   F0           MOVX      @DPTR,A
   \   000029   E9           MOV       A,R1
   \   00002A   24FF         ADD       A,#-0x1
   \   00002C   19           DEC       R1
   \   00002D   EA           MOV       A,R2
   \   00002E   34FF         ADDC      A,#-0x1
   \   000030   FA           MOV       R2,A
   \   000031   A3           INC       DPTR
   \                     ??osal_revmemcpy_0:
   \   000032   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000035   70EE         JNZ       ??osal_revmemcpy_1
    190          
    191            return ( pDst );
   \   000037   80..         SJMP      ?Subroutine4
    192          }
    193          
    194          /*********************************************************************
    195           * @fn      osal_memdup
    196           *
    197           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    198           *          the src buffer into the newly allocated space.
    199           *
    200           * @param   src - source address
    201           * @param   len - number of bytes to copy
    202           *
    203           * @return  pointer to the new allocated buffer, or NULL if
    204           *          allocation problem.
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    208            uint8 *pDst;
    209          
    210            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V6,R2
   \   000018   8B..         MOV       ?V7,R3
    211            if ( pDst )
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V7
   \   00001D   6011         JZ        ??osal_memdup_0
    212            {
    213              VOID osal_memcpy( pDst, src, len );
   \   00001F                ; Setup parameters for call to function osal_memcpy
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000024   EE           MOV       A,R6
   \   000025   FC           MOV       R4,A
   \   000026   EF           MOV       A,R7
   \   000027   FD           MOV       R5,A
   \   000028   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
    214            }
    215          
    216            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   000030   AA..         MOV       R2,?V6
   \   000032   AB..         MOV       R3,?V7
   \   000034   02....       LJMP      ?Subroutine2 & 0xFFFF
    217          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    218          
    219          /*********************************************************************
    220           * @fn      osal_memcmp
    221           *
    222           * @brief
    223           *
    224           *   Generic memory compare.
    225           *
    226           * @param   src1 - source 1 addrexx
    227           * @param   src2 - source 2 address
    228           * @param   len - number of bytes to compare
    229           *
    230           * @return  TRUE - same, FALSE - different
    231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    233          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V0,R4
   \   00000C   8D..         MOV       ?V1,R5
    234            const uint8 GENERIC *pSrc1;
    235            const uint8 GENERIC *pSrc2;
    236          
    237            pSrc1 = src1;
   \   00000E   89..         MOV       ?V4,R1
   \   000010   8A..         MOV       ?V5,R2
   \   000012   8B..         MOV       ?V6,R3
    238            pSrc2 = src2;
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FC           MOV       R4,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FD           MOV       R5,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FE           MOV       R6,A
    239          
    240            while ( len-- )
   \                     ??osal_memcmp_0:
   \   000021   A8..         MOV       R0,?V0
   \   000023   A9..         MOV       R1,?V1
   \   000025   E8           MOV       A,R0
   \   000026   24FF         ADD       A,#-0x1
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E9           MOV       A,R1
   \   00002B   34FF         ADDC      A,#-0x1
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   E8           MOV       A,R0
   \   000030   49           ORL       A,R1
   \   000031   6046         JZ        ??osal_memcmp_1
    241            {
    242              if( *pSrc1++ != *pSrc2++ )
   \   000033   A9..         MOV       R1,?V4
   \   000035   AA..         MOV       R2,?V5
   \   000037   AB..         MOV       R3,?V6
   \   000039   E9           MOV       A,R1
   \   00003A   2401         ADD       A,#0x1
   \   00003C   F5..         MOV       ?V4,A
   \   00003E   E4           CLR       A
   \   00003F   3A           ADDC      A,R2
   \   000040   F5..         MOV       ?V5,A
   \   000042   85..82       MOV       DPL,?XSP + 0
   \   000045   85..83       MOV       DPH,?XSP + 1
   \   000048   EC           MOV       A,R4
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   ED           MOV       A,R5
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EE           MOV       A,R6
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   E0           MOVX      A,@DPTR
   \   000057   FC           MOV       R4,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FD           MOV       R5,A
   \   00005B   EC           MOV       A,R4
   \   00005C   2401         ADD       A,#0x1
   \   00005E   0C           INC       R4
   \   00005F   E4           CLR       A
   \   000060   3D           ADDC      A,R5
   \   000061   FD           MOV       R5,A
   \   000062   12....       LCALL     ?C_GPTR_LOAD
   \   000065   F8           MOV       R0,A
   \   000066   85..82       MOV       DPL,?XSP + 0
   \   000069   85..83       MOV       DPH,?XSP + 1
   \   00006C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00006F   12....       LCALL     ?C_GPTR_LOAD
   \   000072   68           XRL       A,R0
   \   000073   60AC         JZ        ??osal_memcmp_0
    243                return FALSE;
   \   000075   7900         MOV       R1,#0x0
   \   000077   8002         SJMP      ??osal_memcmp_2
    244            }
    245            return TRUE;
   \                     ??osal_memcmp_1:
   \   000079   7901         MOV       R1,#0x1
   \                     ??osal_memcmp_2:
   \   00007B   7403         MOV       A,#0x3
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7F07         MOV       R7,#0x7
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA
    246          }
    247          
    248          
    249          /*********************************************************************
    250           * @fn      osal_memset
    251           *
    252           * @brief
    253           *
    254           *   Set memory buffer to value.
    255           *
    256           * @param   dest - pointer to buffer
    257           * @param   value - what to set each uint8 of the message
    258           * @param   size - how big
    259           *
    260           * @return  pointer to destination buffer
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    264            return memset( dest, value, len );
   \   000007                ; Setup parameters for call to function memset
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   EE           MOV       A,R6
   \   000011   FC           MOV       R4,A
   \   000012   7D00         MOV       R5,#0x0
   \   000014   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001C   02....       LJMP      ?Subroutine3 & 0xFFFF
    265          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    266          
    267          /*********************************************************************
    268           * @fn      osal_build_uint16
    269           *
    270           * @brief
    271           *
    272           *   Build a uint16 out of 2 bytes (0 then 1).
    273           *
    274           * @param   swapped - 0 then 1
    275           *
    276           * @return  uint16
    277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    279          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    280            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   C8           XCH       A,R0
   \   00000F   F9           MOV       R1,A
   \   000010   EC           MOV       A,R4
   \   000011   28           ADD       A,R0
   \   000012   FA           MOV       R2,A
   \   000013   E4           CLR       A
   \   000014   39           ADDC      A,R1
   \   000015   FB           MOV       R3,A
   \   000016   02....       LJMP      ?Subroutine0 & 0xFFFF
    281          }
    282          
    283          /*********************************************************************
    284           * @fn      osal_build_uint32
    285           *
    286           * @brief
    287           *
    288           *   Build a uint32 out of sequential bytes.
    289           *
    290           * @param   swapped - sequential bytes
    291           * @param   len - number of bytes in the uint8 array
    292           *
    293           * @return  uint32
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    297            if ( len == 2 )
   \   000007   7402         MOV       A,#0x2
   \   000009   6E           XRL       A,R6
   \   00000A   700A         JNZ       ??osal_build_uint32_0
    298              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000013   02....       LJMP      ??osal_build_uint32_1 & 0xFFFF
    299            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   000016   7403         MOV       A,#0x3
   \   000018   6E           XRL       A,R6
   \   000019   703D         JNZ       ??osal_build_uint32_2
    300              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000022   A3           INC       DPTR
   \   000023   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000026   7408         MOV       A,#0x8
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?L_SHL
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   79..         MOV       R1,#?V0
   \   000031   12....       LCALL     ?L_ADD
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   E4           CLR       A
   \   00003E   F5..         MOV       ?V1,A
   \   000040   7410         MOV       A,#0x10
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?L_SHL
   \   000047   78..         MOV       R0,#?V4
   \   000049   79..         MOV       R1,#?V0
   \   00004B   12....       LCALL     ?L_ADD
   \   00004E   AA..         MOV       R2,?V4
   \   000050   AB..         MOV       R3,?V5
   \   000052   AC..         MOV       R4,?V6
   \   000054   AD..         MOV       R5,?V7
   \   000056   805D         SJMP      ??osal_build_uint32_3
    301            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   000058   7404         MOV       A,#0x4
   \   00005A   6E           XRL       A,R6
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   704E         JNZ       ??osal_build_uint32_4
    302              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   000061   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?L_SHL
   \   000069   78..         MOV       R0,#?V0
   \   00006B   79..         MOV       R1,#?V4
   \   00006D   12....       LCALL     ?L_ADD
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V4,A
   \   000079   E4           CLR       A
   \   00007A   F5..         MOV       ?V5,A
   \   00007C   7410         MOV       A,#0x10
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?L_SHL
   \   000083   78..         MOV       R0,#?V0
   \   000085   79..         MOV       R1,#?V4
   \   000087   12....       LCALL     ?L_ADD
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V4,A
   \   000094   E4           CLR       A
   \   000095   F5..         MOV       ?V6,A
   \   000097   7418         MOV       A,#0x18
   \                     ??osal_build_uint32_1:
   \   000099   78..         MOV       R0,#?V4
   \   00009B   12....       LCALL     ?L_SHL
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   79..         MOV       R1,#?V4
   \   0000A2   12....       LCALL     ?L_ADD
   \   0000A5   AA..         MOV       R2,?V0
   \   0000A7   AB..         MOV       R3,?V1
   \   0000A9   AC..         MOV       R4,?V2
   \   0000AB   AD..         MOV       R5,?V3
   \   0000AD   8006         SJMP      ??osal_build_uint32_3
    303            else
    304              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_4:
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   FA           MOV       R2,A
   \   0000B1   E4           CLR       A
   \   0000B2   FB           MOV       R3,A
   \   0000B3   FC           MOV       R4,A
   \   0000B4   FD           MOV       R5,A
   \                     ??osal_build_uint32_3:
   \   0000B5   02....       LJMP      ?Subroutine2 & 0xFFFF
    305          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000007   7408         MOV       A,#0x8
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V5,A
   \   000006   F5..         MOV       ?V6,A
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET
    306          
    307          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    308          /*********************************************************************
    309           * @fn      _ltoa
    310           *
    311           * @brief
    312           *
    313           *   convert a long unsigned int to a string.
    314           *
    315           * @param  l - long to convert
    316           * @param  buf - buffer to convert to
    317           * @param  radix - 10 dec, 16 hex
    318           *
    319           * @return  pointer to buffer
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    322          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7403         MOV       A,#0x3
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E9           MOV       A,R1
   \   000020   F0           MOVX      @DPTR,A
    323          #if defined( __GNUC__ )
    324            return ( (char*)ltoa( l, buf, radix ) );
    325          #else
    326            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   000021   90....       MOV       DPTR,#`?<Constant "">`
   \   000024   7407         MOV       A,#0x7
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   740A         MOV       A,#0xa
   \   00002B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00002E   90....       MOV       DPTR,#`?<Constant "">_1`
   \   000031   740A         MOV       A,#0xa
   \   000033   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000036   90....       MOV       DPTR,#`?<Constant "">_2`
   \   000039   740A         MOV       A,#0xa
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    327            unsigned short num1, num2, num3;
    328            unsigned char i;
    329          
    330            buf[0] = '\0';
   \   00003E   7435         MOV       A,#0x35
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
    331          
    332            if ( radix == 10 )
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   640A         XRL       A,#0xa
   \   000050   6003         JZ        $+5
   \   000052   02....       LJMP      ??_ltoa_0 & 0xFFFF
    333            {
    334              num1 = l % 10000;
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   78..         MOV       R0,#?V4
   \   00005C   12....       LCALL     ?L_MOV_X
   \   00005F   90....       MOV       DPTR,#__Constant_2710
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?L_MOV_X
   \   000067   78..         MOV       R0,#?V4
   \   000069   79..         MOV       R1,#?V0
   \   00006B   12....       LCALL     ?UL_DIV_MOD
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   E5..         MOV       A,?V0
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   E5..         MOV       A,?V1
   \   00007A   F0           MOVX      @DPTR,A
    335              num2 = (l / 10000) % 10000;
   \   00007B   7403         MOV       A,#0x3
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?L_MOV_X
   \   000085   90....       MOV       DPTR,#__Constant_2710
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?L_MOV_X
   \   00008D   78..         MOV       R0,#?V4
   \   00008F   79..         MOV       R1,#?V0
   \   000091   12....       LCALL     ?UL_DIV_MOD
   \   000094   90....       MOV       DPTR,#__Constant_2710
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?L_MOV_X
   \   00009C   78..         MOV       R0,#?V4
   \   00009E   79..         MOV       R1,#?V0
   \   0000A0   12....       LCALL     ?UL_DIV_MOD
   \   0000A3   AE..         MOV       R6,?V0
   \   0000A5   AF..         MOV       R7,?V1
    336              num3 = (unsigned short)(l / 100000000);
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?L_MOV_X
   \   0000B1   90....       MOV       DPTR,#__Constant_5f5e100
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?L_MOV_X
   \   0000B9   78..         MOV       R0,#?V4
   \   0000BB   79..         MOV       R1,#?V0
   \   0000BD   12....       LCALL     ?UL_DIV_MOD
   \   0000C0   85....       MOV       ?V6,?V4
   \   0000C3   85....       MOV       ?V7,?V5
    337          
    338              if (num3) _itoa(num3, tmp3, 10);
   \   0000C6   E5..         MOV       A,?V6
   \   0000C8   45..         ORL       A,?V7
   \   0000CA   600E         JZ        ??_ltoa_1
   \   0000CC                ; Setup parameters for call to function _itoa
   \   0000CC   790A         MOV       R1,#0xa
   \   0000CE   741B         MOV       A,#0x1b
   \   0000D0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D3   AA..         MOV       R2,?V6
   \   0000D5   AB..         MOV       R3,?V7
   \   0000D7   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    339              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   0000DA   EE           MOV       A,R6
   \   0000DB   4F           ORL       A,R7
   \   0000DC   600E         JZ        ??_ltoa_2
   \   0000DE                ; Setup parameters for call to function _itoa
   \   0000DE   790A         MOV       R1,#0xa
   \   0000E0   7411         MOV       A,#0x11
   \   0000E2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E5   EE           MOV       A,R6
   \   0000E6   FA           MOV       R2,A
   \   0000E7   EF           MOV       A,R7
   \   0000E8   FB           MOV       R3,A
   \   0000E9   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    340              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   0000EC   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000EF   600D         JZ        ??_ltoa_3
   \   0000F1                ; Setup parameters for call to function _itoa
   \   0000F1   790A         MOV       R1,#0xa
   \   0000F3   7407         MOV       A,#0x7
   \   0000F5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F8   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000FB   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    341          
    342              if (num3)
   \                     ??_ltoa_3:
   \   0000FE   E5..         MOV       A,?V6
   \   000100   45..         ORL       A,?V7
   \   000102   6037         JZ        ??_ltoa_4
    343              {
    344                strcpy((char*)buf, (char const*)tmp3);
   \   000104                ; Setup parameters for call to function strcpy
   \   000104   741B         MOV       A,#0x1b
   \   000106   12....       LCALL     ?XSTACK_DISP102_8
   \   000109   7435         MOV       A,#0x35
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000111   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
    345                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \   000114   75..00       MOV       ?V2,#0x0
   \   000117   8011         SJMP      ??_ltoa_5
    346                  strcat((char*)buf, "0");
   \                     ??_ltoa_6:
   \   000119                ; Setup parameters for call to function strcat
   \   000119   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   00011B   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00011D   7435         MOV       A,#0x35
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000125   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000128   05..         INC       ?V2
   \                     ??_ltoa_5:
   \   00012A   E5..         MOV       A,?V2
   \   00012C   F5..         MOV       ?V0,A
   \   00012E                ; Setup parameters for call to function strlen
   \   00012E   7411         MOV       A,#0x11
   \   000130   12....       LCALL     ?XSTACK_DISP101_8
   \   000133   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000136   12....       LCALL     ?Subroutine17 & 0xFFFF
    347              }
   \                     ??CrossCallReturnLabel_20:
   \   000139   40DE         JC        ??_ltoa_6
    348              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_4:
   \   00013B                ; Setup parameters for call to function strcat
   \   00013B   7411         MOV       A,#0x11
   \   00013D   12....       LCALL     ?XSTACK_DISP102_8
   \   000140   7435         MOV       A,#0x35
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000148   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
    349              if (num3 || num2)
   \   00014B   E5..         MOV       A,?V6
   \   00014D   45..         ORL       A,?V7
   \   00014F   7004         JNZ       ??_ltoa_7
   \   000151   EE           MOV       A,R6
   \   000152   4F           ORL       A,R7
   \   000153   6027         JZ        ??_ltoa_8
    350              {
    351                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_7:
   \   000155   75..00       MOV       ?V2,#0x0
   \   000158   8011         SJMP      ??_ltoa_9
    352                  strcat((char*)buf, "0");
   \                     ??_ltoa_10:
   \   00015A                ; Setup parameters for call to function strcat
   \   00015A   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   00015C   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00015E   7435         MOV       A,#0x35
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000166   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000169   05..         INC       ?V2
   \                     ??_ltoa_9:
   \   00016B   E5..         MOV       A,?V2
   \   00016D   F5..         MOV       ?V0,A
   \   00016F                ; Setup parameters for call to function strlen
   \   00016F   7407         MOV       A,#0x7
   \   000171   12....       LCALL     ?XSTACK_DISP101_8
   \   000174   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000177   12....       LCALL     ?Subroutine17 & 0xFFFF
    353              }
   \                     ??CrossCallReturnLabel_21:
   \   00017A   40DE         JC        ??_ltoa_10
    354              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_8:
   \   00017C                ; Setup parameters for call to function strcat
   \   00017C   7407         MOV       A,#0x7
   \   00017E   12....       LCALL     ?XSTACK_DISP102_8
   \   000181   7435         MOV       A,#0x35
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000189   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
    355              if (!num3 && !num2 && !num1)
   \   00018C   E5..         MOV       A,?V6
   \   00018E   45..         ORL       A,?V7
   \   000190   7007         JNZ       ??_ltoa_11
   \   000192   EE           MOV       A,R6
   \   000193   4F           ORL       A,R7
   \   000194   7003         JNZ       $+5
   \   000196   02....       LJMP      ??_ltoa_12 & 0xFFFF
    356                strcpy((char*)buf, "0");
    357            }
    358            else if ( radix == 16 )
    359            {
    360              num1 = l & 0x0000FFFF;
    361              num2 = l >> 16;
    362          
    363              if (num2) _itoa(num2, tmp2, 16);
    364              if (num1) _itoa(num1, tmp1, 16);
    365          
    366              if (num2)
    367              {
    368                strcpy((char*)buf,(char const*)tmp2);
    369                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    370                  strcat((char*)buf, "0");
    371              }
    372              strcat((char*)buf, (char const*)tmp1);
    373              if (!num2 && !num1)
    374                strcpy((char*)buf, "0");
    375            }
    376            else
    377              return NULL;
    378          
    379            return buf;
   \                     ??_ltoa_11:
   \   000199   7435         MOV       A,#0x35
   \   00019B   12....       LCALL     ?XSTACK_DISP0_8
   \   00019E   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001A1   7425         MOV       A,#0x25
   \   0001A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A6   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??_ltoa_0:
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   6410         XRL       A,#0x10
   \   0001AC   6003         JZ        $+5
   \   0001AE   02....       LJMP      ??_ltoa_13 & 0xFFFF
   \   0001B1   7403         MOV       A,#0x3
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?L_MOV_X
   \   0001BB   85..82       MOV       DPL,?XSP + 0
   \   0001BE   85..83       MOV       DPH,?XSP + 1
   \   0001C1   E5..         MOV       A,?V0
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4   A3           INC       DPTR
   \   0001C5   E5..         MOV       A,?V1
   \   0001C7   F0           MOVX      @DPTR,A
   \   0001C8   7403         MOV       A,#0x3
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   78..         MOV       R0,#?V0
   \   0001CF   12....       LCALL     ?L_MOV_X
   \   0001D2   7410         MOV       A,#0x10
   \   0001D4   78..         MOV       R0,#?V0
   \   0001D6   12....       LCALL     ?UL_SHR
   \   0001D9   AE..         MOV       R6,?V0
   \   0001DB   AF..         MOV       R7,?V1
   \   0001DD   EE           MOV       A,R6
   \   0001DE   4F           ORL       A,R7
   \   0001DF   600E         JZ        ??_ltoa_14
   \   0001E1                ; Setup parameters for call to function _itoa
   \   0001E1   7910         MOV       R1,#0x10
   \   0001E3   7411         MOV       A,#0x11
   \   0001E5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E8   EE           MOV       A,R6
   \   0001E9   FA           MOV       R2,A
   \   0001EA   EF           MOV       A,R7
   \   0001EB   FB           MOV       R3,A
   \   0001EC   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \                     ??_ltoa_14:
   \   0001EF   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001F2   600D         JZ        ??_ltoa_15
   \   0001F4                ; Setup parameters for call to function _itoa
   \   0001F4   7910         MOV       R1,#0x10
   \   0001F6   7407         MOV       A,#0x7
   \   0001F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001FB   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001FE   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \                     ??_ltoa_15:
   \   000201   EE           MOV       A,R6
   \   000202   4F           ORL       A,R7
   \   000203   6037         JZ        ??_ltoa_16
   \   000205                ; Setup parameters for call to function strcpy
   \   000205   7411         MOV       A,#0x11
   \   000207   12....       LCALL     ?XSTACK_DISP102_8
   \   00020A   7435         MOV       A,#0x35
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000212   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   000215   75..00       MOV       ?V2,#0x0
   \   000218   8011         SJMP      ??_ltoa_17
   \                     ??_ltoa_18:
   \   00021A                ; Setup parameters for call to function strcat
   \   00021A   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   00021C   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00021E   7435         MOV       A,#0x35
   \   000220   12....       LCALL     ?XSTACK_DISP0_8
   \   000223   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000226   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000229   05..         INC       ?V2
   \                     ??_ltoa_17:
   \   00022B   E5..         MOV       A,?V2
   \   00022D   F5..         MOV       ?V0,A
   \   00022F                ; Setup parameters for call to function strlen
   \   00022F   7407         MOV       A,#0x7
   \   000231   12....       LCALL     ?XSTACK_DISP101_8
   \   000234   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000237   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00023A   40DE         JC        ??_ltoa_18
   \                     ??_ltoa_16:
   \   00023C                ; Setup parameters for call to function strcat
   \   00023C   7407         MOV       A,#0x7
   \   00023E   12....       LCALL     ?XSTACK_DISP102_8
   \   000241   7435         MOV       A,#0x35
   \   000243   12....       LCALL     ?XSTACK_DISP0_8
   \   000246   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000249   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   00024C   EE           MOV       A,R6
   \   00024D   4F           ORL       A,R7
   \   00024E   6003         JZ        $+5
   \   000250   02....       LJMP      ??_ltoa_11 & 0xFFFF
   \                     ??_ltoa_12:
   \   000253   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000256   6003         JZ        $+5
   \   000258   02....       LJMP      ??_ltoa_11 & 0xFFFF
   \   00025B                ; Setup parameters for call to function strcpy
   \   00025B   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   00025D   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00025F   7435         MOV       A,#0x35
   \   000261   12....       LCALL     ?XSTACK_DISP0_8
   \   000264   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000267   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   00026A   02....       LJMP      ??_ltoa_11 & 0xFFFF
   \                     ??_ltoa_13:
   \   00026D   7A00         MOV       R2,#0x0
   \   00026F   7B00         MOV       R3,#0x0
   \   000271   02....       LJMP      ??CrossCallReturnLabel_66 & 0xFFFF
    380          #endif
    381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A..         MOV       ?V4,R2
   \   000002   8B..         MOV       ?V5,R3
   \   000004   7404         MOV       A,#0x4
   \   000006   C3           CLR       C
   \   000007   95..         SUBB      A,?V4
   \   000009   F8           MOV       R0,A
   \   00000A   E4           CLR       A
   \   00000B   95..         SUBB      A,?V5
   \   00000D   F9           MOV       R1,A
   \   00000E   C3           CLR       C
   \   00000F   E5..         MOV       A,?V0
   \   000011   98           SUBB      A,R0
   \   000012   E4           CLR       A
   \   000013   99           SUBB      A,R1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine31_0
   \   000006                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    382          #endif // !defined(ZBIT) && !defined(ZBIT2)
    383          
    384          /*********************************************************************
    385           * @fn        osal_rand
    386           *
    387           * @brief    Random number generator
    388           *
    389           * @param   none
    390           *
    391           * @return  uint16 - new random number
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          uint16 osal_rand( void )
   \                     osal_rand:
    394          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    395            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   000007   80..         SJMP      ?Subroutine0
    396          }
    397          
    398          /*********************************************************************
    399           * API FUNCTIONS
    400           *********************************************************************/
    401          
    402          /*********************************************************************
    403           * @fn      osal_msg_allocate
    404           *
    405           * @brief
    406           *
    407           *    This function is called by a task to allocate a message buffer
    408           *    into which the task will encode the particular message it wishes
    409           *    to send.  This common buffer scheme is used to strictly limit the
    410           *    creation of message buffers within the system due to RAM size
    411           *    limitations on the microprocessor.   Note that all message buffers
    412           *    are a fixed size (at least initially).  The parameter len is kept
    413           *    in case a message pool with varying fixed message sizes is later
    414           *    created (for example, a pool of message buffers of size LARGE,
    415           *    MEDIUM and SMALL could be maintained and allocated based on request
    416           *    from the tasks).
    417           *
    418           *
    419           * @param   uint8 len  - wanted buffer length
    420           *
    421           *
    422           * @return  pointer to allocated buffer or NULL if allocation failed.
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    426            osal_msg_hdr_t *hdr;
    427          
    428            if ( len == 0 )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   603D         JZ        ??osal_msg_allocate_0
    429              return ( NULL );
    430          
    431            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   EE           MOV       A,R6
   \   00000E   2405         ADD       A,#0x5
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   A8..         MOV       R0,?V0
   \   00001D   A9..         MOV       R1,?V1
    432            if ( hdr )
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   6027         JZ        ??osal_msg_allocate_0
    433            {
    434              hdr->next = NULL;
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    435              hdr->len = len;
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   EE           MOV       A,R6
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   EF           MOV       A,R7
   \   000035   F0           MOVX      @DPTR,A
    436              hdr->dest_id = TASK_NO_TASK;
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   F0           MOVX      @DPTR,A
    437              return ( (uint8 *) (hdr + 1) );
   \   000041   E8           MOV       A,R0
   \   000042   2405         ADD       A,#0x5
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   39           ADDC      A,R1
   \   000047   FB           MOV       R3,A
   \   000048   8004         SJMP      ??osal_msg_allocate_1
    438            }
    439            else
    440              return ( NULL );
   \                     ??osal_msg_allocate_0:
   \   00004A   7A00         MOV       R2,#0x0
   \   00004C   7B00         MOV       R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   00004E   02....       LJMP      ?Subroutine3 & 0xFFFF
    441          }
    442          
    443          /*********************************************************************
    444           * @fn      osal_msg_deallocate
    445           *
    446           * @brief
    447           *
    448           *    This function is used to deallocate a message buffer. This function
    449           *    is called by a task (or processing element) after it has finished
    450           *    processing a received message.
    451           *
    452           *
    453           * @param   uint8 *msg_ptr - pointer to new message buffer
    454           *
    455           * @return  SUCCESS, INVALID_MSG_POINTER
    456           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    457          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    458          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    459            uint8 *x;
    460          
    461            if ( msg_ptr == NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   7004         JNZ       ??osal_msg_deallocate_0
    462              return ( INVALID_MSG_POINTER );
   \   000008   7905         MOV       R1,#0x5
   \   00000A   8016         SJMP      ??osal_msg_deallocate_1
    463          
    464            // don't deallocate queued buffer
    465            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   00000C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00000F   6004         JZ        ??osal_msg_deallocate_2
    466              return ( MSG_BUFFER_NOT_AVAIL );
   \   000011   7904         MOV       R1,#0x4
   \   000013   800D         SJMP      ??osal_msg_deallocate_1
    467          
    468            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
    469          
    470            osal_mem_free( (void *)x );
   \                     ??osal_msg_deallocate_2:
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   EA           MOV       A,R2
   \   000016   24FB         ADD       A,#-0x5
   \   000018   FA           MOV       R2,A
   \   000019   EB           MOV       A,R3
   \   00001A   34FF         ADDC      A,#-0x1
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    471          
    472            return ( SUCCESS );
   \   000020   7900         MOV       R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0
    473          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F4           CPL       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EA           MOV       A,R2
   \   000001   24FF         ADD       A,#-0x1
   \   000003   F582         MOV       DPL,A
   \   000005   EB           MOV       A,R3
   \   000006   34FF         ADDC      A,#-0x1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    474          
    475          /*********************************************************************
    476           * @fn      osal_msg_send
    477           *
    478           * @brief
    479           *
    480           *    This function is called by a task to send a command message to
    481           *    another task or processing element.  The sending_task field must
    482           *    refer to a valid task, since the task ID will be used
    483           *    for the response message.  This function will also set a message
    484           *    ready event in the destination tasks event list.
    485           *
    486           *
    487           * @param   uint8 destination task - Send msg to?  Task ID
    488           * @param   uint8 *msg_ptr - pointer to new message buffer
    489           * @param   uint8 len - length of data in message
    490           *
    491           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    494          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    495            if ( msg_ptr == NULL )
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   6026         JZ        ??osal_msg_send_0
    496              return ( INVALID_MSG_POINTER );
    497          
    498            if ( destination_task >= tasksCnt )
   \   00000B   90....       MOV       DPTR,#tasksCnt
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   EE           MOV       A,R6
   \   000011   C3           CLR       C
   \   000012   98           SUBB      A,R0
   \   000013   4007         JC        ??osal_msg_send_1
    499            {
    500              osal_msg_deallocate( msg_ptr );
   \   000015                ; Setup parameters for call to function osal_msg_deallocate
   \   000015   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    501              return ( INVALID_TASK );
   \   000018   7903         MOV       R1,#0x3
   \   00001A   8031         SJMP      ??osal_msg_send_2
    502            }
    503          
    504            // Check the message header
    505            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    506                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_send_1:
   \   00001C   EA           MOV       A,R2
   \   00001D   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000020   EB           MOV       A,R3
   \   000021   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000024   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000027   7005         JNZ       ??osal_msg_send_3
   \   000029   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002C   6007         JZ        ??osal_msg_send_4
    507            {
    508              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_send_3:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    509              return ( INVALID_MSG_POINTER );
   \                     ??osal_msg_send_0:
   \   000031   7905         MOV       R1,#0x5
   \   000033   8018         SJMP      ??osal_msg_send_2
    510            }
    511          
    512            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_send_4:
   \   000035   EE           MOV       A,R6
   \   000036   F0           MOVX      @DPTR,A
    513          
    514            // queue message
    515            osal_msg_enqueue( &osal_qHead, msg_ptr );
   \   000037                ; Setup parameters for call to function osal_msg_enqueue
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
   \   00003A   FD           MOV       R5,A
   \   00003B   7A..         MOV       R2,#osal_qHead & 0xff
   \   00003D   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   00003F   12....       LCALL     `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
    516          
    517            // Signal the task that a message is waiting
    518            osal_set_event( destination_task, SYS_EVENT_MSG );
   \   000042                ; Setup parameters for call to function osal_set_event
   \   000042   7A00         MOV       R2,#0x0
   \   000044   7B80         MOV       R3,#-0x80
   \   000046   EE           MOV       A,R6
   \   000047   F9           MOV       R1,A
   \   000048   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    519          
    520            return ( SUCCESS );
   \   00004B   7900         MOV       R1,#0x0
   \                     ??osal_msg_send_2:
   \   00004D   02....       LJMP      ??Subroutine25_0 & 0xFFFF
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   24FB         ADD       A,#-0x5
   \   000002   F582         MOV       DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET
    522          
    523          /*********************************************************************
    524           * @fn      osal_msg_receive
    525           *
    526           * @brief
    527           *
    528           *    This function is called by a task to retrieve a received command
    529           *    message. The calling task must deallocate the message buffer after
    530           *    processing the message using the osal_msg_deallocate() call.
    531           *
    532           * @param   uint8 task_id - receiving tasks ID
    533           *
    534           * @return  *uint8 - message information or NULL if no message
    535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    537          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    538            osal_msg_hdr_t *listHdr;
    539            osal_msg_hdr_t *prevHdr = NULL;
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   75..00       MOV       ?V3,#0x0
    540            osal_msg_hdr_t *foundHdr = NULL;
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
    541            halIntState_t   intState;
    542          
    543            // Hold off interrupts
    544            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   F5..         MOV       ?V1,A
   \   000017   C2AF         CLR       0xa8.7
    545          
    546            // Point to the top of the queue
    547            listHdr = osal_qHead;
   \   000019   90....       MOV       DPTR,#osal_qHead
   \   00001C   800B         SJMP      ??CrossCallReturnLabel_48
    548          
    549            // Look through the queue for a message that belongs to the asking task
    550            while ( listHdr != NULL )
    551            {
    552              if ( (listHdr - 1)->dest_id == task_id )
    553              {
    554                if ( foundHdr == NULL )
    555                {
    556                  // Save the first one
    557                  foundHdr = listHdr;
    558                }
    559                else
    560                {
    561                  // Second msg found, stop looking
    562                  break;
    563                }
    564              }
    565              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_0:
   \   00001E   EE           MOV       A,R6
   \   00001F   4F           ORL       A,R7
   \   000020   7004         JNZ       ??osal_msg_receive_1
    566              {
    567                prevHdr = listHdr;
   \   000022   88..         MOV       ?V2,R0
   \   000024   89..         MOV       ?V3,R1
    568              }
    569              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_1:
   \   000026   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000029   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00002C   6020         JZ        ??osal_msg_receive_2
   \   00002E   E8           MOV       A,R0
   \   00002F   24FF         ADD       A,#-0x1
   \   000031   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   65..         XRL       A,?V0
   \   000037   70E5         JNZ       ??osal_msg_receive_0
   \   000039   EE           MOV       A,R6
   \   00003A   4F           ORL       A,R7
   \   00003B   7006         JNZ       ??osal_msg_receive_3
   \   00003D   E8           MOV       A,R0
   \   00003E   FE           MOV       R6,A
   \   00003F   E9           MOV       A,R1
   \   000040   FF           MOV       R7,A
   \   000041   80E3         SJMP      ??osal_msg_receive_1
    570            }
    571          
    572            // Is there more than one?
    573            if ( listHdr != NULL )
    574            {
    575              // Yes, Signal the task that a message is waiting
    576              osal_set_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_3:
   \   000043                ; Setup parameters for call to function osal_set_event
   \   000043   7A00         MOV       R2,#0x0
   \   000045   7B80         MOV       R3,#-0x80
   \   000047   A9..         MOV       R1,?V0
   \   000049   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00004C   800D         SJMP      ??osal_msg_receive_4
    577            }
    578            else
    579            {
    580              // No more
    581              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_2:
   \   00004E                ; Setup parameters for call to function osal_clear_event
   \   00004E   7A00         MOV       R2,#0x0
   \   000050   7B80         MOV       R3,#-0x80
   \   000052   A9..         MOV       R1,?V0
   \   000054   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
    582            }
    583          
    584            // Did we find a message?
    585            if ( foundHdr != NULL )
   \   000057   EE           MOV       A,R6
   \   000058   4F           ORL       A,R7
   \   000059   6015         JZ        ??osal_msg_receive_5
    586            {
    587              // Take out of the link list
    588              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \                     ??osal_msg_receive_4:
   \   00005B                ; Setup parameters for call to function osal_msg_extract
   \   00005B   78..         MOV       R0,#?V2
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   EE           MOV       A,R6
   \   000061   FC           MOV       R4,A
   \   000062   EF           MOV       A,R7
   \   000063   FD           MOV       R5,A
   \   000064   7A..         MOV       R2,#osal_qHead & 0xff
   \   000066   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000068   12....       LCALL     `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
   \   00006B   7402         MOV       A,#0x2
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
    589            }
    590          
    591            // Release interrupts
    592            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_5:
   \   000070   E5..         MOV       A,?V1
   \   000072   A2E0         MOV       C,0xE0 /* A   */.0
   \   000074   92AF         MOV       0xa8.7,C
    593          
    594            return ( (uint8*) foundHdr );
   \   000076   EE           MOV       A,R6
   \   000077   FA           MOV       R2,A
   \   000078   EF           MOV       A,R7
   \   000079   FB           MOV       R3,A
   \   00007A   7F04         MOV       R7,#0x4
   \   00007C   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00007F                REQUIRE _A_IEN0
    595          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E8           MOV       A,R0
   \   000001   24FB         ADD       A,#-0x5
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0
    596          
    597          /**************************************************************************************************
    598           * @fn          osal_msg_find
    599           *
    600           * @brief       This function finds in place an OSAL message matching the task_id and event
    601           *              parameters.
    602           *
    603           * input parameters
    604           *
    605           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    606           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    607           *
    608           * output parameters
    609           *
    610           * None.
    611           *
    612           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    613           **************************************************************************************************
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    616          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
    617            osal_msg_hdr_t *pHdr;
    618            halIntState_t intState;
    619          
    620            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000006   A2AF         MOV       C,0xa8.7
   \   000008   E4           CLR       A
   \   000009   33           RLC       A
   \   00000A   F8           MOV       R0,A
   \   00000B   C2AF         CLR       0xa8.7
    621          
    622            pHdr = osal_qHead;  // Point to the top of the queue.
   \   00000D   90....       MOV       DPTR,#osal_qHead
   \   000010   8008         SJMP      ??CrossCallReturnLabel_43
    623          
    624            // Look through the queue for a message that matches the task_id and event parameters.
    625            while (pHdr != NULL)
    626            {
    627              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
    628              {
    629                break;
    630              }
    631          
    632              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_0:
   \   000012   EA           MOV       A,R2
   \   000013   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000016   EB           MOV       A,R3
   \   000017   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001A   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001D   4B           ORL       A,R3
   \   00001E   600F         JZ        ??osal_msg_find_1
   \   000020   12....       LCALL     ?Subroutine15 & 0xFFFF
    633            }
   \                     ??CrossCallReturnLabel_16:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   69           XRL       A,R1
   \   000025   70EB         JNZ       ??osal_msg_find_0
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6C           XRL       A,R4
   \   00002D   70E3         JNZ       ??osal_msg_find_0
    634          
    635            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_1:
   \   00002F   E8           MOV       A,R0
   \   000030   A2E0         MOV       C,0xE0 /* A   */.0
   \   000032   92AF         MOV       0xa8.7,C
    636          
    637            return (osal_event_hdr_t *)pHdr;
   \   000034   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000037                REQUIRE _A_IEN0
    638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   22           RET
    639          
    640          /*********************************************************************
    641           * @fn      osal_msg_enqueue
    642           *
    643           * @brief
    644           *
    645           *    This function enqueues an OSAL message into an OSAL queue.
    646           *
    647           * @param   osal_msg_q_t *q_ptr - OSAL queue
    648           * @param   void *msg_ptr  - OSAL message
    649           *
    650           * @return  none
    651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   A2E0         MOV       C,0xE0 /* A   */.0
   \   000004                REQUIRE ??Subroutine24_0
   \   000004                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   92AF         MOV       0xa8.7,C
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    652          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    653          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    654            void *list;
    655            halIntState_t intState;
    656          
    657            // Hold off interrupts
    658            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    659          
    660            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000C   12....       LCALL     ?Subroutine18 & 0xFFFF
    661            // If first message in queue
    662            if ( *q_ptr == NULL )
   \                     ??CrossCallReturnLabel_23:
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000016   7009         JNZ       ??CrossCallReturnLabel_34
    663            {
    664              *q_ptr = msg_ptr;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   800F         SJMP      ??CrossCallReturnLabel_50
    665            }
    666            else
    667            {
    668              // Find end of queue
    669              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   00001E   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000021   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000024   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000027   4B           ORL       A,R3
   \   000028   70F4         JNZ       ??osal_msg_enqueue_0
    670          
    671              // Add message to end of queue
    672              OSAL_MSG_NEXT( list ) = msg_ptr;
   \   00002A   12....       LCALL     ?Subroutine19 & 0xFFFF
    673            }
   \                     ??CrossCallReturnLabel_50:
   \   00002D   EC           MOV       A,R4
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   ED           MOV       A,R5
   \   000031   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000034                REQUIRE _A_IEN0
    674          
    675            // Re-enable interrupts
    676            HAL_EXIT_CRITICAL_SECTION(intState);
    677          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   24FB         ADD       A,#-0x5
   \   000003   F582         MOV       DPL,A
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine27_0
   \   000004                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EC           MOV       A,R4
   \   000001   24FB         ADD       A,#-0x5
   \   000003   F582         MOV       DPL,A
   \   000005   ED           MOV       A,R5
   \   000006   34FF         ADDC      A,#-0x1
   \   000008   F583         MOV       DPH,A
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET
    678          
    679          /*********************************************************************
    680           * @fn      osal_msg_dequeue
    681           *
    682           * @brief
    683           *
    684           *    This function dequeues an OSAL message from an OSAL queue.
    685           *
    686           * @param   osal_msg_q_t *q_ptr - OSAL queue
    687           *
    688           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
    692            void *msg_ptr = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
    693            halIntState_t intState;
    694          
    695            // Hold off interrupts
    696            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FE           MOV       R6,A
   \   000012   C2AF         CLR       0xa8.7
    697          
    698            if ( *q_ptr != NULL )
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FC           MOV       R4,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FD           MOV       R5,A
   \   00001D   EC           MOV       A,R4
   \   00001E   4D           ORL       A,R5
   \   00001F   6032         JZ        ??osal_msg_dequeue_0
    699            {
    700              // Dequeue message
    701              msg_ptr = *q_ptr;
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   12....       LCALL     ?Subroutine10 & 0xFFFF
    702              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \                     ??CrossCallReturnLabel_8:
   \   000028   24FB         ADD       A,#-0x5
   \   00002A   FC           MOV       R4,A
   \   00002B   EB           MOV       A,R3
   \   00002C   34FF         ADDC      A,#-0x1
   \   00002E   FD           MOV       R5,A
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V1,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   8983         MOV       DPH,R1
   \   00003E   E5..         MOV       A,?V0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E5..         MOV       A,?V1
   \   000044   F0           MOVX      @DPTR,A
    703              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000045   8C82         MOV       DPL,R4
   \   000047   8D83         MOV       DPH,R5
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
    704              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   00004D   12....       LCALL     ?Subroutine15 & 0xFFFF
    705            }
   \                     ??CrossCallReturnLabel_17:
   \   000050   74FF         MOV       A,#-0x1
   \   000052   F0           MOVX      @DPTR,A
    706          
    707            // Re-enable interrupts
    708            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   000053   EE           MOV       A,R6
   \   000054   A2E0         MOV       C,0xE0 /* A   */.0
   \   000056   92AF         MOV       0xa8.7,C
    709          
    710            return msg_ptr;
   \   000058                REQUIRE ?Subroutine3
   \   000058                REQUIRE _A_IEN0
   \   000058                ; // Fall through to label ?Subroutine3
    711          }
    712          
    713          /*********************************************************************
    714           * @fn      osal_msg_push
    715           *
    716           * @brief
    717           *
    718           *    This function pushes an OSAL message to the head of an OSAL
    719           *    queue.
    720           *
    721           * @param   osal_msg_q_t *q_ptr - OSAL queue
    722           * @param   void *msg_ptr  - OSAL message
    723           *
    724           * @return  none
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
    727          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    728            halIntState_t intState;
    729          
    730            // Hold off interrupts
    731            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A8A8         MOV       R0,0xa8+0x0
   \   000007   C2AF         CLR       0xa8.7
    732          
    733            // Push message to head of queue
    734            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FE           MOV       R6,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FF           MOV       R7,A
   \   000012   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000015   ED           MOV       A,R5
   \   000016   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000019   EE           MOV       A,R6
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   EF           MOV       A,R7
   \   00001D   F0           MOVX      @DPTR,A
    735            *q_ptr = msg_ptr;
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   EC           MOV       A,R4
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   ED           MOV       A,R5
   \   000026   F0           MOVX      @DPTR,A
    736          
    737            // Re-enable interrupts
    738            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000027   E8           MOV       A,R0
   \   000028   A2E7         MOV       C,0xE0 /* A   */.7
   \   00002A   02....       LJMP      ??Subroutine24_0 & 0xFFFF
   \   00002D                REQUIRE _A_IEN0
    739          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EC           MOV       A,R4
   \   000001                REQUIRE ??Subroutine28_0
   \   000001                ; // Fall through to label ??Subroutine28_0
    740          
    741          /*********************************************************************
    742           * @fn      osal_msg_extract
    743           *
    744           * @brief
    745           *
    746           *    This function extracts and removes an OSAL message from the
    747           *    middle of an OSAL queue.
    748           *
    749           * @param   osal_msg_q_t *q_ptr - OSAL queue
    750           * @param   void *msg_ptr  - OSAL message to be extracted
    751           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
    752           *
    753           * @return  none
    754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
    756          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    757            halIntState_t intState;
    758          
    759            // Hold off interrupts
    760            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    761          
    762            if ( msg_ptr == *q_ptr )
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000013   EC           MOV       A,R4
   \   000014   68           XRL       A,R0
   \   000015   7002         JNZ       ??osal_msg_extract_0
   \   000017   ED           MOV       A,R5
   \   000018   69           XRL       A,R1
   \                     ??osal_msg_extract_0:
   \   000019   700D         JNZ       ??osal_msg_extract_1
    763            {
    764              // remove from first
    765              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00001B   12....       LCALL     ?Subroutine20 & 0xFFFF
    766            }
   \                     ??CrossCallReturnLabel_40:
   \   00001E   ED           MOV       A,R5
   \   00001F   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   8018         SJMP      ??CrossCallReturnLabel_45
    767            else
    768            {
    769              // remove from middle
    770              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000028   12....       LCALL     ?Subroutine20 & 0xFFFF
    771            }
   \                     ??CrossCallReturnLabel_41:
   \   00002B   ED           MOV       A,R5
   \   00002C   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00002F   7409         MOV       A,#0x9
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FA           MOV       R2,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   CA           XCH       A,R2
   \   000039   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00003C   EA           MOV       A,R2
   \   00003D   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
    772            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000045   12....       LCALL     ?Subroutine18 & 0xFFFF
    773            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \                     ??CrossCallReturnLabel_24:
   \   000048   EC           MOV       A,R4
   \   000049   24FF         ADD       A,#-0x1
   \   00004B   F582         MOV       DPL,A
   \   00004D   ED           MOV       A,R5
   \   00004E   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000051   74FF         MOV       A,#-0x1
   \   000053   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000056                REQUIRE _A_IEN0
    774          
    775            // Re-enable interrupts
    776            HAL_EXIT_CRITICAL_SECTION(intState);
    777          }
    778          
    779          /*********************************************************************
    780           * @fn      osal_msg_enqueue_max
    781           *
    782           * @brief
    783           *
    784           *    This function enqueues an OSAL message into an OSAL queue if
    785           *    the length of the queue is less than max.
    786           *
    787           * @param   osal_msg_q_t *q_ptr - OSAL queue
    788           * @param   void *msg_ptr  - OSAL message
    789           * @param   uint8 max - maximum length of queue
    790           *
    791           * @return  TRUE if message was enqueued, FALSE otherwise
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
    794          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
    795            void *list;
    796            uint8 ret = FALSE;
   \   00000B   7A00         MOV       R2,#0x0
    797            halIntState_t intState;
    798          
    799            // Hold off interrupts
    800            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FB           MOV       R3,A
   \   000012   C2AF         CLR       0xa8.7
    801          
    802            // If first message in queue
    803            if ( *q_ptr == NULL )
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00001D   700E         JNZ       ??CrossCallReturnLabel_35
    804            {
    805              *q_ptr = msg_ptr;
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   85..83       MOV       DPH,?V1
   \   000025   801D         SJMP      ??CrossCallReturnLabel_52
    806              ret = TRUE;
    807            }
    808            else
    809            {
    810              // Find end of queue or max
    811              list = *q_ptr;
    812              max--;
    813              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
   \                     ??osal_msg_enqueue_max_0:
   \   000027   EE           MOV       A,R6
   \   000028   6021         JZ        ??osal_msg_enqueue_max_1
    814              {
    815                list = OSAL_MSG_NEXT( list );
   \   00002A   12....       LCALL     ?Subroutine8 & 0xFFFF
    816                max--;
   \                     ??CrossCallReturnLabel_35:
   \   00002D   1E           DEC       R6
    817              }
   \   00002E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V0,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V1,A
   \   000038   E5..         MOV       A,?V0
   \   00003A   45..         ORL       A,?V1
   \   00003C   70E9         JNZ       ??osal_msg_enqueue_max_0
    818          
    819              // Add message to end of queue if max not reached
    820              if ( max != 0 )
   \   00003E   EE           MOV       A,R6
   \   00003F   600A         JZ        ??osal_msg_enqueue_max_1
    821              {
    822                OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000041   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000044   EC           MOV       A,R4
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   ED           MOV       A,R5
   \   000048   F0           MOVX      @DPTR,A
    823                ret = TRUE;
   \   000049   7A01         MOV       R2,#0x1
    824              }
    825            }
    826          
    827            // Re-enable interrupts
    828            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_1:
   \   00004B   EB           MOV       A,R3
   \   00004C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004E   92AF         MOV       0xa8.7,C
    829          
    830            return ret;
   \   000050   EA           MOV       A,R2
   \   000051   F9           MOV       R1,A
   \   000052   02....       LJMP      ?Subroutine3 & 0xFFFF
   \   000055                REQUIRE _A_IEN0
    831          }
    832          
    833          /*********************************************************************
    834           * @fn      osal_set_event
    835           *
    836           * @brief
    837           *
    838           *    This function is called to set the event flags for a task. The
    839           *    event passed in is OR'd into the task's event variable.
    840           *
    841           * @param   uint8 task_id - receiving tasks ID
    842           * @param   uint8 event_flag - what event to set
    843           *
    844           * @return  SUCCESS, INVALID_TASK
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
    847          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    848            if ( task_id < tasksCnt )
   \   000007   90....       MOV       DPTR,#tasksCnt
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   98           SUBB      A,R0
   \   00000F   5027         JNC       ??osal_set_event_0
    849            {
    850              halIntState_t   intState;
    851              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   ACA8         MOV       R4,0xa8+0x0
   \   000013   C2AF         CLR       0xa8.7
    852              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000015   EE           MOV       A,R6
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   F9           MOV       R1,A
   \   00001B   90....       MOV       DPTR,#tasksEvents
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   28           ADD       A,R0
   \   000020   FD           MOV       R5,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   39           ADDC      A,R1
   \   000024   8D82         MOV       DPL,R5
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   4A           ORL       A,R2
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   4B           ORL       A,R3
   \   00002E   F0           MOVX      @DPTR,A
    853              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00002F   EC           MOV       A,R4
   \   000030   A2E7         MOV       C,0xE0 /* A   */.7
   \   000032   92AF         MOV       0xa8.7,C
    854              return ( SUCCESS );
   \   000034   7900         MOV       R1,#0x0
   \   000036   8002         SJMP      ??osal_set_event_1
    855            }
    856             else
    857            {
    858              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   000038   7903         MOV       R1,#0x3
    859            }
   \                     ??osal_set_event_1:
   \   00003A   02....       LJMP      ??Subroutine25_0 & 0xFFFF
   \   00003D                REQUIRE _A_IEN0
    860          }
    861          
    862          /*********************************************************************
    863           * @fn      osal_clear_event
    864           *
    865           * @brief
    866           *
    867           *    This function is called to clear the event flags for a task. The
    868           *    event passed in is masked out of the task's event variable.
    869           *
    870           * @param   uint8 task_id - receiving tasks ID
    871           * @param   uint8 event_flag - what event to clear
    872           *
    873           * @return  SUCCESS, INVALID_TASK
    874           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
    876          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    877            if ( task_id < tasksCnt )
   \   000007   90....       MOV       DPTR,#tasksCnt
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   EF           MOV       A,R7
   \   00000D   C3           CLR       C
   \   00000E   98           SUBB      A,R0
   \   00000F   501F         JNC       ??osal_clear_event_0
    878            {
    879              halIntState_t   intState;
    880              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   AEA8         MOV       R6,0xa8+0x0
   \   000013   C2AF         CLR       0xa8.7
    881              tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
   \   000015   EA           MOV       A,R2
   \   000016   F4           CPL       A
   \   000017   FC           MOV       R4,A
   \   000018   EB           MOV       A,R3
   \   000019   F4           CPL       A
   \   00001A   FD           MOV       R5,A
   \   00001B   EF           MOV       A,R7
   \   00001C   29           ADD       A,R1
   \   00001D   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000020   E0           MOVX      A,@DPTR
   \   000021   5C           ANL       A,R4
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   5D           ANL       A,R5
   \   000026   F0           MOVX      @DPTR,A
    882              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000027   EE           MOV       A,R6
   \   000028   A2E7         MOV       C,0xE0 /* A   */.7
   \   00002A   92AF         MOV       0xa8.7,C
    883              return ( SUCCESS );
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   8002         SJMP      ??osal_clear_event_1
    884            }
    885             else
    886            {
    887              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   000030   7903         MOV       R1,#0x3
    888            }
   \                     ??osal_clear_event_1:
   \   000032   02....       LJMP      ??Subroutine25_0 & 0xFFFF
   \   000035                REQUIRE _A_IEN0
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#tasksEvents
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   22           RET
    890          
    891          /*********************************************************************
    892           * @fn      osal_isr_register
    893           *
    894           * @brief
    895           *
    896           *   This function is called to register a service routine with an
    897           *   interrupt. When the interrupt occurs, this service routine is called.
    898           *
    899           * @param   uint8 interrupt_id - Interrupt number
    900           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
    901           *
    902           * @return  SUCCESS, INVALID_INTERRUPT_ID,
    903           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    904          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
    905          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    906            // Remove these statements when functionality is complete
    907            (void)interrupt_id;
    908            (void)isr_ptr;
    909            return ( SUCCESS );
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    910          }
    911          
    912          /*********************************************************************
    913           * @fn      osal_int_enable
    914           *
    915           * @brief
    916           *
    917           *   This function is called to enable an interrupt. Once enabled,
    918           *   occurrence of the interrupt causes the service routine associated
    919           *   with that interrupt to be called.
    920           *
    921           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
    922           *   If a single interrupt is passed in, then interrupts still have
    923           *   to be enabled with another call to INTS_ALL.
    924           *
    925           * @param   uint8 interrupt_id - Interrupt number
    926           *
    927           * @return  SUCCESS or INVALID_INTERRUPT_ID
    928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
    930          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    931          
    932            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_enable_0
    933            {
    934              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB      0xa8.7
    935              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_enable_1
    936            }
    937            else
    938            {
    939              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
    940            }
    941          }
    942          
    943          /*********************************************************************
    944           * @fn      osal_int_disable
    945           *
    946           * @brief
    947           *
    948           *   This function is called to disable an interrupt. When a disabled
    949           *   interrupt occurs, the service routine associated with that
    950           *   interrupt is not called.
    951           *
    952           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
    953           *   If a single interrupt is passed in, then just that interrupt is disabled.
    954           *
    955           * @param   uint8 interrupt_id - Interrupt number
    956           *
    957           * @return  SUCCESS or INVALID_INTERRUPT_ID
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
    960          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    961          
    962            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_disable_0
    963            {
    964              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR       0xa8.7
    965              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_disable_1
    966            }
    967            else
    968            {
    969              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
    970            }
    971          }
    972          
    973          /*********************************************************************
    974           * @fn      osal_init_system
    975           *
    976           * @brief
    977           *
    978           *   This function initializes the "task" system by creating the
    979           *   tasks defined in the task table (OSAL_Tasks.h).
    980           *
    981           * @param   void
    982           *
    983           * @return  SUCCESS
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          uint8 osal_init_system( void )
   \                     osal_init_system:
    986          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    987            // Initialize the Memory Allocation System
    988            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL     `??osal_mem_init::?relay`; Banked call to: osal_mem_init
    989          
    990            // Initialize the message queue
    991            osal_qHead = NULL;
   \   000007   90....       MOV       DPTR,#osal_qHead
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
    992          
    993            // Initialize the timers
    994            osalTimerInit();
   \   00000E                ; Setup parameters for call to function osalTimerInit
   \   00000E   12....       LCALL     `??osalTimerInit::?relay`; Banked call to: osalTimerInit
    995          
    996            // Initialize the Power Management System
    997            osal_pwrmgr_init();
   \   000011                ; Setup parameters for call to function osal_pwrmgr_init
   \   000011   12....       LCALL     `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
    998          
    999            // Initialize the system tasks.
   1000            osalInitTasks();
   \   000014                ; Setup parameters for call to function osalInitTasks
   \   000014   12....       LCALL     `??osalInitTasks::?relay`; Banked call to: osalInitTasks
   1001          
   1002            // Setup efficient search for the first free block of heap.
   1003            osal_mem_kick();
   \   000017                ; Setup parameters for call to function osal_mem_kick
   \   000017   12....       LCALL     `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
   1004          
   1005            return ( SUCCESS );
   \   00001A   7900         MOV       R1,#0x0
   \   00001C   02....       LJMP      ?Subroutine0 & 0xFFFF
   1006          }
   1007          
   1008          /*********************************************************************
   1009           * @fn      osal_start_system
   1010           *
   1011           * @brief
   1012           *
   1013           *   This function is the main loop function of the task system (if
   1014           *   ZBIT and UBIT are not defined). This Function doesn't return.
   1015           *
   1016           * @param   void
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          void osal_start_system( void )
   \                     osal_start_system:
   1021          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1022          #if !defined ( ZBIT ) && !defined ( UBIT )
   1023            for(;;)  // Forever Loop
   1024          #endif
   1025            {
   1026              osal_run_system();
   \                     ??osal_start_system_0:
   \   000004                ; Setup parameters for call to function osal_run_system
   \   000004   12....       LCALL     `??osal_run_system::?relay`; Banked call to: osal_run_system
   \   000007   80FB         SJMP      ??osal_start_system_0
   1027            }
   1028          }
   1029          
   1030          /*********************************************************************
   1031           * @fn      osal_run_system
   1032           *
   1033           * @brief
   1034           *
   1035           *   This function will make one pass through the OSAL taskEvents table
   1036           *   and call the task_event_processor() function for the first task that
   1037           *   is found with at least one event pending. If there are no pending
   1038           *   events (all tasks), this function puts the processor into Sleep.
   1039           *
   1040           * @param   void
   1041           *
   1042           * @return  none
   1043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1044          void osal_run_system( void )
   \                     osal_run_system:
   1045          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1046            uint8 idx = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   1047          
   1048            osalTimeUpdate();
   \   000008                ; Setup parameters for call to function osalTimeUpdate
   \   000008   12....       LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   1049            Hal_ProcessPoll();
   \   00000B                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000B   12....       LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   1050          
   1051            do {
   1052              if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_run_system_0:
   \   00000E   A8..         MOV       R0,?V0
   \   000010   E8           MOV       A,R0
   \   000011   28           ADD       A,R0
   \   000012   12....       LCALL     ?Subroutine9 & 0xFFFF
   1053              {
   1054                break;
   1055              }
   1056            } while (++idx < tasksCnt);
   \                     ??CrossCallReturnLabel_6:
   \   000015   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000018   700D         JNZ       ??osal_run_system_1
   \   00001A   05..         INC       ?V0
   \   00001C   90....       MOV       DPTR,#tasksCnt
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   E5..         MOV       A,?V0
   \   000023   C3           CLR       C
   \   000024   98           SUBB      A,R0
   \   000025   40E7         JC        ??osal_run_system_0
   1057          
   1058            if (idx < tasksCnt)
   \                     ??osal_run_system_1:
   \   000027   90....       MOV       DPTR,#tasksCnt
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   E5..         MOV       A,?V0
   \   00002E   C3           CLR       C
   \   00002F   98           SUBB      A,R0
   \   000030   5064         JNC       ??osal_run_system_2
   1059            {
   1060              uint16 events;
   1061              halIntState_t intState;
   1062          
   1063              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000032   ACA8         MOV       R4,0xa8+0x0
   \   000034   C2AF         CLR       0xa8.7
   1064              events = tasksEvents[idx];
   \   000036   AE..         MOV       R6,?V0
   \   000038   EE           MOV       A,R6
   \   000039   2E           ADD       A,R6
   \   00003A   FE           MOV       R6,A
   \   00003B   E4           CLR       A
   \   00003C   33           RLC       A
   \   00003D   FF           MOV       R7,A
   \   00003E   90....       MOV       DPTR,#tasksEvents
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2E           ADD       A,R6
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   3F           ADDC      A,R7
   \   000047   F9           MOV       R1,A
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   1065              tasksEvents[idx] = 0;  // Clear the Events for this task.
   \                     ??CrossCallReturnLabel_71:
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   E4           CLR       A
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
   1066              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000057   EC           MOV       A,R4
   \   000058   A2E7         MOV       C,0xE0 /* A   */.7
   \   00005A   92AF         MOV       0xa8.7,C
   1067          
   1068              activeTaskID = idx;
   \   00005C   E5..         MOV       A,?V0
   \   00005E   90....       MOV       DPTR,#activeTaskID
   \   000061   F0           MOVX      @DPTR,A
   1069              events = (tasksArr[idx])( idx, events );
   \   000062                ; Setup parameters for indirect call
   \   000062   F9           MOV       R1,A
   \   000063   74..         MOV       A,#tasksArr & 0xff
   \   000065   2E           ADD       A,R6
   \   000066   F582         MOV       DPL,A
   \   000068   74..         MOV       A,#(tasksArr >> 8) & 0xff
   \   00006A   3F           ADDC      A,R7
   \   00006B   F583         MOV       DPH,A
   \   00006D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000070   12....       LCALL     ?CALL_IND
   1070              activeTaskID = TASK_NO_TASK;
   \   000073   90....       MOV       DPTR,#activeTaskID
   \   000076   74FF         MOV       A,#-0x1
   \   000078   F0           MOVX      @DPTR,A
   1071          
   1072              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000079   A8A8         MOV       R0,0xa8+0x0
   \   00007B   C2AF         CLR       0xa8.7
   1073              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   00007D   90....       MOV       DPTR,#tasksEvents
   \   000080   E0           MOVX      A,@DPTR
   \   000081   2E           ADD       A,R6
   \   000082   F9           MOV       R1,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   3F           ADDC      A,R7
   \   000086   8982         MOV       DPL,R1
   \   000088   F583         MOV       DPH,A
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   4A           ORL       A,R2
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   4B           ORL       A,R3
   \   000090   F0           MOVX      @DPTR,A
   1074              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000091   E8           MOV       A,R0
   \   000092   A2E7         MOV       C,0xE0 /* A   */.7
   \   000094   92AF         MOV       0xa8.7,C
   1075            }
   1076          #if defined( POWER_SAVING )
   1077            else  // Complete pass through all task events with no activity?
   1078            {
   1079              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1080            }
   1081          #endif
   1082          
   1083            /* Yield in case cooperative scheduling is being used. */
   1084          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1085            {
   1086              osal_task_yield();
   1087            }
   1088          #endif
   1089          }
   \                     ??osal_run_system_2:
   \   000096   02....       LJMP      ?Subroutine3 & 0xFFFF
   \   000099                REQUIRE _A_IEN0
   1090          
   1091          /*********************************************************************
   1092           * @fn      osal_buffer_uint32
   1093           *
   1094           * @brief
   1095           *
   1096           *   Buffer an uint32 value - LSB first.
   1097           *
   1098           * @param   buf - buffer
   1099           * @param   val - uint32 value
   1100           *
   1101           * @return  pointer to end of destination buffer
   1102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1103          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1104          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1105            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   12....       LCALL     ?Subroutine16 & 0xFFFF
   1106            *buf++ = BREAK_UINT32( val, 1 );
   1107            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_18:
   \   000012   85....       MOV       ?V0,?V4
   \   000015   85....       MOV       ?V2,?V6
   \   000018   85....       MOV       ?V3,?V7
   \   00001B   7410         MOV       A,#0x10
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?UL_SHR
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E5..         MOV       A,?V0
   \   00002A   F0           MOVX      @DPTR,A
   1108            *buf++ = BREAK_UINT32( val, 3 );
   \   00002B   7418         MOV       A,#0x18
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?UL_SHR
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E5..         MOV       A,?V4
   \   00003B   F0           MOVX      @DPTR,A
   1109          
   1110            return buf;
   \   00003C   EA           MOV       A,R2
   \   00003D   2404         ADD       A,#0x4
   \   00003F   FA           MOV       R2,A
   \   000040   5001         JNC       ??osal_buffer_uint32_0
   \   000042   0B           INC       R3
   \                     ??osal_buffer_uint32_0:
   \   000043                REQUIRE ?Subroutine2
   \   000043                ; // Fall through to label ?Subroutine2
   1111          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E5..         MOV       A,?V4
   \   000006   F0           MOVX      @DPTR,A
   \   000007   85....       MOV       ?V1,?V5
   \   00000A   E5..         MOV       A,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET
   1112          
   1113          /*********************************************************************
   1114           * @fn      osal_buffer_uint24
   1115           *
   1116           * @brief
   1117           *
   1118           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1119           *   typedef to uint32 in comdef.h
   1120           *
   1121           * @param   buf - buffer
   1122           * @param   val - uint24 value
   1123           *
   1124           * @return  pointer to end of destination buffer
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1128            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   12....       LCALL     ?Subroutine16 & 0xFFFF
   1129            *buf++ = BREAK_UINT32( val, 1 );
   1130            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_19:
   \   000012   7410         MOV       A,#0x10
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?UL_SHR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E5..         MOV       A,?V4
   \   000021   F0           MOVX      @DPTR,A
   1131          
   1132            return buf;
   \   000022   EA           MOV       A,R2
   \   000023   2403         ADD       A,#0x3
   \   000025   FA           MOV       R2,A
   \   000026   5001         JNC       ??osal_buffer_uint24_0
   \   000028   0B           INC       R3
   \                     ??osal_buffer_uint24_0:
   \   000029   80..         SJMP      ?Subroutine2
   1133          }
   1134          
   1135          /*********************************************************************
   1136           * @fn      osal_isbufset
   1137           *
   1138           * @brief
   1139           *
   1140           *   Is all of the array elements set to a value?
   1141           *
   1142           * @param   buf - buffer to check
   1143           * @param   val - value to check each array element for
   1144           * @param   len - length to check
   1145           *
   1146           * @return  TRUE if all "val"
   1147           *          FALSE otherwise
   1148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1149          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   \                     osal_isbufset:
   1150          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FD           MOV       R5,A
   1151            uint8 x;
   1152          
   1153            if ( buf == NULL )
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   6018         JZ        ??osal_isbufset_0
   1154            {
   1155              return ( FALSE );
   1156            }
   1157          
   1158            for ( x = 0; x < len; x++ )
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   8001         SJMP      ??osal_isbufset_1
   \                     ??osal_isbufset_2:
   \   00000F   08           INC       R0
   \                     ??osal_isbufset_1:
   \   000010   E8           MOV       A,R0
   \   000011   C3           CLR       C
   \   000012   9C           SUBB      A,R4
   \   000013   5012         JNC       ??osal_isbufset_3
   1159            {
   1160              // Check for non-initialized value
   1161              if ( buf[x] != val )
   \   000015   E8           MOV       A,R0
   \   000016   FE           MOV       R6,A
   \   000017   EA           MOV       A,R2
   \   000018   2E           ADD       A,R6
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6D           XRL       A,R5
   \   000021   60EC         JZ        ??osal_isbufset_2
   1162              {
   1163                return ( FALSE );
   \                     ??osal_isbufset_0:
   \   000023   7900         MOV       R1,#0x0
   \   000025   8002         SJMP      ??osal_isbufset_4
   1164              }
   1165            }
   1166            return ( TRUE );
   \                     ??osal_isbufset_3:
   \   000027   7901         MOV       R1,#0x1
   \                     ??osal_isbufset_4:
   \   000029   02....       LJMP      ??Subroutine25_0 & 0xFFFF
   1167          }
   1168          
   1169          /*********************************************************************
   1170           * @fn      osal_self
   1171           *
   1172           * @brief
   1173           *
   1174           *   This function returns the task ID of the current (active) task.
   1175           *
   1176           * @param   void
   1177           *
   1178           * @return   active task ID or TASK_NO_TASK if no task is active
   1179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1180          uint8 osal_self( void )
   \                     osal_self:
   1181          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1182            return ( activeTaskID );
   \   000004   90....       MOV       DPTR,#activeTaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF
   1183          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for activeTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_strlen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_strlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_revmemcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_revmemcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memdup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint16::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_ltoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _ltoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_allocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_allocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_deallocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_deallocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_find::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_find

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_dequeue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_dequeue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_extract::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_extract

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue_max::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue_max

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_set_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_set_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_clear_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_clear_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_isr_register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isr_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_enable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_enable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_disable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_disable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_init_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_init_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_run_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_run_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint24::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint24

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_isbufset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isbufset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_self::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_self

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1184          
   1185          /*********************************************************************
   1186           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     55   _ltoa
        0     53   -> _itoa
        0     53   -> strcat
        0     53   -> strcpy
        0     53   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     21   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      9   osal_isbufset
      0      0   osal_isr_register
      0     21   osal_memcmp
      1     28   osal_memcpy
      0     19   osal_memdup
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     12   osal_memset
        0     12   -> memset
      0     10   osal_msg_allocate
        0     10   -> osal_mem_alloc
      2      9   osal_msg_deallocate
        2      0   -> osal_mem_free
      0     10   osal_msg_dequeue
      0     18   osal_msg_enqueue
      0     10   osal_msg_enqueue_max
      0     23   osal_msg_extract
      2      0   osal_msg_find
      0      9   osal_msg_push
      0     14   osal_msg_receive
        0     12   -> osal_clear_event
        0     14   -> osal_msg_extract
        0     12   -> osal_set_event
      1      9   osal_msg_send
        0      9   -> osal_msg_deallocate
        0      9   -> osal_msg_enqueue
        0      9   -> osal_set_event
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     12   osal_revmemcpy
      0     10   osal_run_system
        0     10   -> Hal_ProcessPoll
        0     10   -> osalTimeUpdate
      2      0   osal_self
      0     21   osal_set_event
      2      0   osal_start_system
        2      0   -> osal_run_system
      2      0   osal_strlen
        2      0   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       1  ?<Initializer for activeTaskID>
       2  ??Subroutine24_0
       5  ??Subroutine25_0
       4  ??Subroutine26_0
       6  ??Subroutine27_0
       5  ??Subroutine28_0
       3  ??Subroutine29_0
       5  ??Subroutine30_0
       8  ??Subroutine31_0
       6  ??Subroutine32_0
       7  ?Subroutine0
       4  ?Subroutine1
       7  ?Subroutine10
       6  ?Subroutine11
       9  ?Subroutine12
       6  ?Subroutine13
      15  ?Subroutine14
       4  ?Subroutine15
      15  ?Subroutine16
      21  ?Subroutine17
      15  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
       1  ?Subroutine20
      11  ?Subroutine21
      11  ?Subroutine22
      11  ?Subroutine23
       5  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
      10  ?Subroutine6
       9  ?Subroutine7
       6  ?Subroutine8
      18  ?Subroutine9
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     628  _ltoa
       6  _ltoa::?relay
       1  activeTaskID
      43  osal_buffer_uint24
       6  osal_buffer_uint24::?relay
      67  osal_buffer_uint32
       6  osal_buffer_uint32::?relay
      25  osal_build_uint16
       6  osal_build_uint16::?relay
     184  osal_build_uint32
       6  osal_build_uint32::?relay
      53  osal_clear_event
       6  osal_clear_event::?relay
      31  osal_init_system
       6  osal_init_system::?relay
      18  osal_int_disable
       6  osal_int_disable::?relay
      18  osal_int_enable
       6  osal_int_enable::?relay
      44  osal_isbufset
       6  osal_isbufset::?relay
       5  osal_isr_register
       6  osal_isr_register::?relay
     133  osal_memcmp
       6  osal_memcmp::?relay
      40  osal_memcpy
       6  osal_memcpy::?relay
      55  osal_memdup
       6  osal_memdup::?relay
      31  osal_memset
       6  osal_memset::?relay
      81  osal_msg_allocate
       6  osal_msg_allocate::?relay
      34  osal_msg_deallocate
       6  osal_msg_deallocate::?relay
      88  osal_msg_dequeue
       6  osal_msg_dequeue::?relay
      52  osal_msg_enqueue
       6  osal_msg_enqueue::?relay
      85  osal_msg_enqueue_max
       6  osal_msg_enqueue_max::?relay
      86  osal_msg_extract
       6  osal_msg_extract::?relay
      55  osal_msg_find
       6  osal_msg_find::?relay
      45  osal_msg_push
       6  osal_msg_push::?relay
     127  osal_msg_receive
       6  osal_msg_receive::?relay
      80  osal_msg_send
       6  osal_msg_send::?relay
       2  osal_qHead
       9  osal_rand
       6  osal_rand::?relay
      57  osal_revmemcpy
       6  osal_revmemcpy::?relay
     153  osal_run_system
       6  osal_run_system::?relay
      12  osal_self
       6  osal_self::?relay
      61  osal_set_event
       6  osal_set_event::?relay
       9  osal_start_system
       6  osal_start_system::?relay
      10  osal_strlen
       6  osal_strlen::?relay

 
 2 674 bytes in segment BANKED_CODE
   192 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   193 bytes of CODE     memory
    32 bytes of CONST    memory (+ 8 bytes shared)
     0 bytes of DATA     memory (+ 1 byte  shared)
 2 674 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
