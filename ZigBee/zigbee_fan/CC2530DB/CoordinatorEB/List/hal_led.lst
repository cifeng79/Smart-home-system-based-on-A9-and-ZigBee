###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               24/Aug/2024  06:27:17
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_led.c
#    Command line       =  
#        -f C:\user\EWDA34.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_led.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List\hal_led.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj\hal_led.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2012-02-14 12:43:32 -0800 (Tue, 14 Feb 2012) $
      4            Revision:       $Revision: 29281 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          
     78          /***************************************************************************************************
     79           *                                           GLOBAL VARIABLES
     80           ***************************************************************************************************/
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     89          #endif
     90          
     91          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     93          #endif
     94          
     95          /***************************************************************************************************
     96           *                                            LOCAL FUNCTION
     97           ***************************************************************************************************/
     98          #if (HAL_LED == TRUE)
     99          void HalLedUpdate (void);
    100          void HalLedOnOff (uint8 leds, uint8 mode);
    101          #endif /* HAL_LED */
    102          
    103          /***************************************************************************************************
    104           *                                            FUNCTIONS - API
    105           ***************************************************************************************************/
    106          
    107          /***************************************************************************************************
    108           * @fn      HalLedInit
    109           *
    110           * @brief   Initialize LED Service
    111           *
    112           * @param   init - pointer to void that contains the initialized value
    113           *
    114           * @return  None
    115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalLedInit (void)
   \                     HalLedInit:
    117          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_LED == TRUE)
    119            /* Initialize all LEDs to OFF */
    120            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV       R2,#0x0
   \   000006   790F         MOV       R1,#0xf
   \   000008   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    121          #endif /* HAL_LED */
    122          #ifdef BLINK_LEDS
    123            /* Initialize sleepActive to FALSE */
    124            HalLedStatusControl.sleepActive = FALSE;
   \   00000B   02....       LJMP      ?Subroutine0 & 0xFFFF
    125          #endif
    126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV       DPTR,#HalLedStatusControl + 36
   \   000003   E4           CLR       A
   \   000004                REQUIRE ??Subroutine9_0
   \   000004                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    127          
    128          /***************************************************************************************************
    129           * @fn      HalLedSet
    130           *
    131           * @brief   Tun ON/OFF/TOGGLE given LEDs
    132           *
    133           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    134           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    135           * @return  None
    136           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V2,R2
    139          
    140          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    141            uint8 led;
    142            HalLedControl_t *sts;
    143          
    144            switch (mode)
   \   000009   EA           MOV       A,R2
   \   00000A   602F         JZ        ??HalLedSet_0
   \   00000C   14           DEC       A
   \   00000D   602C         JZ        ??HalLedSet_0
   \   00000F   14           DEC       A
   \   000010   600A         JZ        ??HalLedSet_1
   \   000012   24FE         ADD       A,#-0x2
   \   000014   601B         JZ        ??HalLedSet_2
   \   000016   24FC         ADD       A,#-0x4
   \   000018   6021         JZ        ??HalLedSet_0
   \   00001A   800B         SJMP      ??HalLedSet_3
    145            {
    146              case HAL_LED_MODE_BLINK:
    147                /* Default blink, 1 time, D% duty cycle */
    148                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001C                ; Setup parameters for call to function HalLedBlink
   \   00001C   7CE8         MOV       R4,#-0x18
   \   00001E   7D03         MOV       R5,#0x3
   \   000020   7B05         MOV       R3,#0x5
   \   000022   7A01         MOV       R2,#0x1
   \                     ??HalLedSet_4:
   \   000024   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    149                break;
    150          
    151              case HAL_LED_MODE_FLASH:
    152                /* Default flash, N times, D% duty cycle */
    153                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
    154                break;
    155          
    156              case HAL_LED_MODE_ON:
    157              case HAL_LED_MODE_OFF:
    158              case HAL_LED_MODE_TOGGLE:
    159          
    160                led = HAL_LED_1;
    161                leds &= HAL_LED_ALL;
    162                sts = HalLedStatusControl.HalLedControlTable;
    163          
    164                while (leds)
    165                {
    166                  if (leds & led)
    167                  {
    168                    if (mode != HAL_LED_MODE_TOGGLE)
    169                    {
    170                      sts->mode = mode;  /* ON or OFF */
    171                    }
    172                    else
    173                    {
    174                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
    175                    }
    176                    HalLedOnOff (led, sts->mode);
    177                    leds ^= led;
    178                  }
    179                  led <<= 1;
    180                  sts++;
    181                }
    182                break;
    183          
    184              default:
    185                break;
    186            }
    187          
    188          #elif (HAL_LED == TRUE)
    189            LedOnOff(leds, mode);
    190          #else
    191            // HAL LED is disabled, suppress unused argument warnings
    192            (void) leds;
    193            (void) mode;
    194          #endif /* BLINK_LEDS && HAL_LED   */
    195          
    196            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   000027   90....       MOV       DPTR,#HalLedState
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   7F03         MOV       R7,#0x3
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??HalLedSet_2:
   \   000031                ; Setup parameters for call to function HalLedBlink
   \   000031   7CE8         MOV       R4,#-0x18
   \   000033   7D03         MOV       R5,#0x3
   \   000035   7B05         MOV       R3,#0x5
   \   000037   7A32         MOV       R2,#0x32
   \   000039   80E9         SJMP      ??HalLedSet_4
   \                     ??HalLedSet_0:
   \   00003B   75..01       MOV       ?V1,#0x1
   \   00003E   53..0F       ANL       ?V0,#0xf
   \   000041   7E..         MOV       R6,#HalLedStatusControl & 0xff
   \   000043   7F..         MOV       R7,#(HalLedStatusControl >> 8) & 0xff
   \   000045   801C         SJMP      ??HalLedSet_5
   \                     ??HalLedSet_6:
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6401         XRL       A,#0x1
   \                     ??HalLedSet_7:
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B                ; Setup parameters for call to function HalLedOnOff
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   A9..         MOV       R1,?V1
   \   00004F   12....       LCALL     `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
   \   000052   E5..         MOV       A,?V1
   \   000054   62..         XRL       ?V0,A
   \                     ??HalLedSet_8:
   \   000056   E5..         MOV       A,?V1
   \   000058   C3           CLR       C
   \   000059   33           RLC       A
   \   00005A   F5..         MOV       ?V1,A
   \   00005C   EE           MOV       A,R6
   \   00005D   2409         ADD       A,#0x9
   \   00005F   FE           MOV       R6,A
   \   000060   5001         JNC       ??HalLedSet_5
   \   000062   0F           INC       R7
   \                     ??HalLedSet_5:
   \   000063   E5..         MOV       A,?V0
   \   000065   60C0         JZ        ??HalLedSet_3
   \   000067   55..         ANL       A,?V1
   \   000069   60EB         JZ        ??HalLedSet_8
   \   00006B   7408         MOV       A,#0x8
   \   00006D   65..         XRL       A,?V2
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   60D2         JZ        ??HalLedSet_6
   \   000075   E5..         MOV       A,?V2
   \   000077   80D1         SJMP      ??HalLedSet_7
    197          
    198          }
    199          
    200          /***************************************************************************************************
    201           * @fn      HalLedBlink
    202           *
    203           * @brief   Blink the leds
    204           *
    205           * @param   leds       - bit mask value of leds to be blinked
    206           *          numBlinks  - number of blinks
    207           *          percent    - the percentage in each period where the led
    208           *                       will be on
    209           *          period     - length of each cycle in milliseconds
    210           *
    211           * @return  None
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    214          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V3,R2
   \   000009   8B..         MOV       ?V2,R3
   \   00000B   8C..         MOV       ?V4,R4
   \   00000D   8D..         MOV       ?V5,R5
    215          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    216            uint8 led;
    217            HalLedControl_t *sts;
    218          
    219            if (leds && percent && period)
   \   00000F   E9           MOV       A,R1
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??HalLedBlink_0 & 0xFFFF
   \   000015   EB           MOV       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??HalLedBlink_0 & 0xFFFF
   \   00001B   EC           MOV       A,R4
   \   00001C   45..         ORL       A,?V5
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??HalLedBlink_0 & 0xFFFF
    220            {
    221              if (percent < 100)
   \   000023   EB           MOV       A,R3
   \   000024   C3           CLR       C
   \   000025   9464         SUBB      A,#0x64
   \   000027   4003         JC        $+5
   \   000029   02....       LJMP      ??HalLedBlink_1 & 0xFFFF
    222              {
    223                led = HAL_LED_1;
   \   00002C   75..01       MOV       ?V1,#0x1
    224                leds &= HAL_LED_ALL;
   \   00002F   53..0F       ANL       ?V0,#0xf
    225                sts = HalLedStatusControl.HalLedControlTable;
   \   000032   7E..         MOV       R6,#HalLedStatusControl & 0xff
   \   000034   7F..         MOV       R7,#(HalLedStatusControl >> 8) & 0xff
   \   000036   8075         SJMP      ??HalLedBlink_2
    226          
    227                while (leds)
    228                {
    229                  if (leds & led)
   \                     ??HalLedBlink_3:
   \   000038   55..         ANL       A,?V1
   \   00003A   6064         JZ        ??HalLedBlink_4
    230                  {
    231                    /* Store the current state of the led before going to blinking if not already blinking */
    232                    if(sts->mode < HAL_LED_MODE_BLINK )
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C3           CLR       C
   \   000042   9402         SUBB      A,#0x2
   \   000044   500D         JNC       ??HalLedBlink_5
    233                    	preBlinkState |= (led & HalLedState);
   \   000046   90....       MOV       DPTR,#HalLedState
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   55..         ANL       A,?V1
   \   00004C   F8           MOV       R0,A
   \   00004D   90....       MOV       DPTR,#preBlinkState
   \   000050   E0           MOVX      A,@DPTR
   \   000051   48           ORL       A,R0
   \   000052   F0           MOVX      @DPTR,A
    234          
    235                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \                     ??HalLedBlink_5:
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E4           CLR       A
   \   000058   F0           MOVX      @DPTR,A
    236                    sts->time  = period;                              /* Time for one on/off cycle */
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E5..         MOV       A,?V4
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V5
   \   000062   F0           MOVX      @DPTR,A
    237                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E5..         MOV       A,?V2
   \   00006B   F0           MOVX      @DPTR,A
    238                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   A3           INC       DPTR
   \   000071   E5..         MOV       A,?V3
   \   000073   F0           MOVX      @DPTR,A
    239                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   000074   7007         JNZ       ??HalLedBlink_6
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   7404         MOV       A,#0x4
   \   00007C   F0           MOVX      @DPTR,A
    240                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6:
   \   00007D                ; Setup parameters for call to function osal_GetSystemClock
   \   00007D   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   000080   EA           MOV       A,R2
   \   000081   F8           MOV       R0,A
   \   000082   EB           MOV       A,R3
   \   000083   F9           MOV       R1,A
   \   000084   EC           MOV       A,R4
   \   000085   FA           MOV       R2,A
   \   000086   ED           MOV       A,R5
   \   000087   FB           MOV       R3,A
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?XSTORE_R0123
    241                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   E0           MOVX      A,@DPTR
   \   000099   D2E1         SETB      0xE0 /* A   */.1
   \   00009B   F0           MOVX      @DPTR,A
    242                    leds ^= led;
   \   00009C   E5..         MOV       A,?V1
   \   00009E   62..         XRL       ?V0,A
    243                  }
    244                  led <<= 1;
   \                     ??HalLedBlink_4:
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   C3           CLR       C
   \   0000A3   33           RLC       A
   \   0000A4   F5..         MOV       ?V1,A
    245                  sts++;
   \   0000A6   EE           MOV       A,R6
   \   0000A7   2409         ADD       A,#0x9
   \   0000A9   FE           MOV       R6,A
   \   0000AA   5001         JNC       ??HalLedBlink_2
   \   0000AC   0F           INC       R7
    246                }
   \                     ??HalLedBlink_2:
   \   0000AD   E5..         MOV       A,?V0
   \   0000AF   7087         JNZ       ??HalLedBlink_3
    247                // Cancel any overlapping timer for blink events
    248                osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000B1                ; Setup parameters for call to function osal_stop_timerEx
   \   0000B1   7A02         MOV       R2,#0x2
   \   0000B3   7B00         MOV       R3,#0x0
   \   0000B5   90....       MOV       DPTR,#Hal_TaskID
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    249                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000BD                ; Setup parameters for call to function osal_set_event
   \   0000BD   7A02         MOV       R2,#0x2
   \   0000BF   7B00         MOV       R3,#0x0
   \   0000C1   90....       MOV       DPTR,#Hal_TaskID
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F9           MOV       R1,A
   \   0000C6   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000C9   8009         SJMP      ??HalLedBlink_7
    250              }
    251              else
    252              {
    253                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_1:
   \   0000CB                ; Setup parameters for call to function HalLedSet
   \   0000CB   7A01         MOV       R2,#0x1
   \   0000CD   8002         SJMP      ??HalLedBlink_8
    254              }
    255            }
    256            else
    257            {
    258              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000CF                ; Setup parameters for call to function HalLedSet
   \   0000CF   7A00         MOV       R2,#0x0
   \                     ??HalLedBlink_8:
   \   0000D1   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    259            }
    260          #elif (HAL_LED == TRUE)
    261            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    262            HalLedOnOff (leds, percent);                              /* Toggle */
    263          #else
    264            // HAL LED is disabled, suppress unused argument warnings
    265            (void) leds;
    266            (void) numBlinks;
    267            (void) percent;
    268            (void) period;
    269          #endif /* BLINK_LEDS && HAL_LED */
    270          }
   \                     ??HalLedBlink_7:
   \   0000D4   7F06         MOV       R7,#0x6
   \   0000D6   02....       LJMP      ?BANKED_LEAVE_XDATA
    271          
    272          #if (HAL_LED == TRUE)
    273          /***************************************************************************************************
    274           * @fn      HalLedUpdate
    275           *
    276           * @brief   Update leds to work with blink
    277           *
    278           * @param   none
    279           *
    280           * @return  none
    281           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void HalLedUpdate (void)
   \                     HalLedUpdate:
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    284            uint8 led;
    285            uint8 pct;
    286            uint8 leds;
    287            HalLedControl_t *sts;
    288            uint32 time;
    289            uint16 next;
    290            uint16 wait;
    291          
    292            next = 0;
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    293            led  = HAL_LED_1;
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    294            leds = HAL_LED_ALL;
   \   00001B   7403         MOV       A,#0x3
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   740F         MOV       A,#0xf
   \   000022   F0           MOVX      @DPTR,A
    295            sts = HalLedStatusControl.HalLedControlTable;
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   74..         MOV       A,#HalLedStatusControl & 0xff
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   74..         MOV       A,#(HalLedStatusControl >> 8) & 0xff
   \   00002E   F0           MOVX      @DPTR,A
    296          
    297            /* Check if sleep is active or not */
    298            if (!HalLedStatusControl.sleepActive)
   \   00002F   90....       MOV       DPTR,#HalLedStatusControl + 36
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6003         JZ        $+5
   \   000035   02....       LJMP      ??HalLedUpdate_0 & 0xFFFF
    299            {
    300              while (leds)
    301              {
    302                if (leds & led)
   \                     ??HalLedUpdate_1:
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E0           MOVX      A,@DPTR
   \   000046   58           ANL       A,R0
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??HalLedUpdate_2 & 0xFFFF
    303                {
    304                  if (sts->mode & HAL_LED_MODE_BLINK)
   \   00004C   7401         MOV       A,#0x1
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000054   4003         JC        $+5
   \   000056   02....       LJMP      ??HalLedUpdate_3 & 0xFFFF
    305                  {
    306                    time = osal_GetSystemClock();
   \   000059                ; Setup parameters for call to function osal_GetSystemClock
   \   000059   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   00005C   7407         MOV       A,#0x7
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?XSTORE_R2345
    307                    if (time >= sts->next)
   \   000064   7401         MOV       A,#0x1
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00006C   12....       LCALL     ?L_MOV_X
   \   00006F   7407         MOV       A,#0x7
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?UL_GT_X
   \   000079   7401         MOV       A,#0x1
   \   00007B   5003         JNC       $+5
   \   00007D   02....       LJMP      ??HalLedUpdate_4 & 0xFFFF
    308                    {
    309                      if (sts->mode & HAL_LED_MODE_ON)
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000086   A2E0         MOV       C,0xE0 /* A   */.0
   \   000088   7401         MOV       A,#0x1
   \   00008A   5045         JNC       ??HalLedUpdate_5
    310                      {
    311                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000092   F8           MOV       R0,A
   \   000093   7464         MOV       A,#0x64
   \   000095   C3           CLR       C
   \   000096   98           SUBB      A,R0
   \   000097   C0E0         PUSH      A
   \   000099   7404         MOV       A,#0x4
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   D0E0         POP       A
   \   0000A0   F0           MOVX      @DPTR,A
    312                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
   \   0000A1   7401         MOV       A,#0x1
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000A9   C2E0         CLR       0xE0 /* A   */.0
   \   0000AB   F0           MOVX      @DPTR,A
    313                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
   \   0000AC                ; Setup parameters for call to function HalLedOnOff
   \   0000AC   7A00         MOV       R2,#0x0
   \   0000AE   85..82       MOV       DPL,?XSP + 0
   \   0000B1   85..83       MOV       DPH,?XSP + 1
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   12....       LCALL     `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    314          
    315                        if (!(sts->mode & HAL_LED_MODE_FLASH))
   \   0000B9   7401         MOV       A,#0x1
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C1   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000C3   4058         JC        ??HalLedUpdate_6
    316                        {
    317                          sts->todo--;                        /* Not continuous, reduce count */
   \   0000C5   7401         MOV       A,#0x1
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine5 & 0xFFFF
    318                        }
    319                      }            
   \                     ??CrossCallReturnLabel_11:
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   14           DEC       A
   \   0000CF   801F         SJMP      ??HalLedUpdate_7
    320                      else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
   \                     ??HalLedUpdate_5:
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   7019         JNZ       ??HalLedUpdate_8
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E2   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000E4   400D         JC        ??HalLedUpdate_8
    321                      {
    322                        sts->mode ^= HAL_LED_MODE_BLINK;      /* No more blinks */  
   \   0000E6   7401         MOV       A,#0x1
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ??Subroutine8_0 & 0xFFFF
    323                      }            
   \                     ??CrossCallReturnLabel_18:
   \   0000EE   6402         XRL       A,#0x2
   \                     ??HalLedUpdate_7:
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   802A         SJMP      ??HalLedUpdate_6
    324                      else
    325                      {
    326                        pct = sts->onPct;                     /* Percentage of cycle for on */
   \                     ??HalLedUpdate_8:
   \   0000F3   7401         MOV       A,#0x1
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000FB   C0E0         PUSH      A
   \   0000FD   7404         MOV       A,#0x4
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   D0E0         POP       A
   \   000104   F0           MOVX      @DPTR,A
    327                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
   \   000105   7401         MOV       A,#0x1
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00010D   D2E0         SETB      0xE0 /* A   */.0
   \   00010F   F0           MOVX      @DPTR,A
    328                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
   \   000110                ; Setup parameters for call to function HalLedOnOff
   \   000110   7A01         MOV       R2,#0x1
   \   000112   85..82       MOV       DPL,?XSP + 0
   \   000115   85..83       MOV       DPH,?XSP + 1
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F9           MOV       R1,A
   \   00011A   12....       LCALL     `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    329                      }
    330                      if (sts->mode & HAL_LED_MODE_BLINK)
   \                     ??HalLedUpdate_6:
   \   00011D   7401         MOV       A,#0x1
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000125   505E         JNC       ??HalLedUpdate_9
    331                      {
    332                        wait = (((uint32)pct * (uint32)sts->time) / 100);
   \   000127   7404         MOV       A,#0x4
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   F5..         MOV       ?V4,A
   \   00012F   E4           CLR       A
   \   000130   F5..         MOV       ?V5,A
   \   000132   F5..         MOV       ?V6,A
   \   000134   F5..         MOV       ?V7,A
   \   000136   04           INC       A
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F5..         MOV       ?V0,A
   \   000142   A3           INC       DPTR
   \   000143   E0           MOVX      A,@DPTR
   \   000144   F5..         MOV       ?V1,A
   \   000146   E4           CLR       A
   \   000147   F5..         MOV       ?V2,A
   \   000149   F5..         MOV       ?V3,A
   \   00014B   78..         MOV       R0,#?V4
   \   00014D   79..         MOV       R1,#?V0
   \   00014F   12....       LCALL     ?L_MUL
   \   000152   90....       MOV       DPTR,#__Constant_64
   \   000155   78..         MOV       R0,#?V0
   \   000157   12....       LCALL     ?L_MOV_X
   \   00015A   78..         MOV       R0,#?V4
   \   00015C   79..         MOV       R1,#?V0
   \   00015E   12....       LCALL     ?UL_DIV_MOD
   \   000161   AE..         MOV       R6,?V4
   \   000163   AF..         MOV       R7,?V5
    333                        sts->next = time + wait;
   \   000165   7407         MOV       A,#0x7
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   8E..         MOV       ?V0,R6
   \   00016C   8F..         MOV       ?V1,R7
   \   00016E   E4           CLR       A
   \   00016F   F5..         MOV       ?V2,A
   \   000171   F5..         MOV       ?V3,A
   \   000173   78..         MOV       R0,#?V0
   \   000175   12....       LCALL     ?L_ADD_X
   \   000178   7401         MOV       A,#0x1
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ?Subroutine1 & 0xFFFF
    334                      }
   \                     ??CrossCallReturnLabel_1:
   \   000180   12....       LCALL     ?L_MOV_TO_X
   \   000183   8053         SJMP      ??HalLedUpdate_10
    335                      else
    336                      {
    337                        /* no more blink, no more wait */
    338                        wait = 0;
   \                     ??HalLedUpdate_9:
   \   000185   7E00         MOV       R6,#0x0
   \   000187   7F00         MOV       R7,#0x0
    339                        /* After blinking, set the LED back to the state before it blinks */
    340                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
   \   000189   85..82       MOV       DPL,?XSP + 0
   \   00018C   85..83       MOV       DPH,?XSP + 1
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F8           MOV       R0,A
   \   000191   90....       MOV       DPTR,#preBlinkState
   \   000194   E0           MOVX      A,@DPTR
   \   000195   58           ANL       A,R0
   \   000196   6004         JZ        ??HalLedUpdate_11
   \   000198   7A01         MOV       R2,#0x1
   \   00019A   8002         SJMP      ??HalLedUpdate_12
   \                     ??HalLedUpdate_11:
   \   00019C   7A00         MOV       R2,#0x0
   \                     ??HalLedUpdate_12:
   \   00019E                ; Setup parameters for call to function HalLedSet
   \   00019E   85..82       MOV       DPL,?XSP + 0
   \   0001A1   85..83       MOV       DPH,?XSP + 1
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   F9           MOV       R1,A
   \   0001A6   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    341                        /* Clear the saved bit */
    342                        preBlinkState &= (led ^ 0xFF);
   \   0001A9   85..82       MOV       DPL,?XSP + 0
   \   0001AC   85..83       MOV       DPH,?XSP + 1
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F4           CPL       A
   \   0001B1   F8           MOV       R0,A
   \   0001B2   90....       MOV       DPTR,#preBlinkState
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   58           ANL       A,R0
   \   0001B7   F0           MOVX      @DPTR,A
   \   0001B8   801E         SJMP      ??HalLedUpdate_10
    343                      }
    344                    }
    345                    else
    346                    {
    347                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_4:
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine1 & 0xFFFF
    348                    }
   \                     ??CrossCallReturnLabel_2:
   \   0001C0   12....       LCALL     ?L_MOV_X
   \   0001C3   7407         MOV       A,#0x7
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   78..         MOV       R0,#?V4
   \   0001CA   12....       LCALL     ?L_MOV_X
   \   0001CD   E5..         MOV       A,?V0
   \   0001CF   C3           CLR       C
   \   0001D0   95..         SUBB      A,?V4
   \   0001D2   FE           MOV       R6,A
   \   0001D3   E5..         MOV       A,?V1
   \   0001D5   95..         SUBB      A,?V5
   \   0001D7   FF           MOV       R7,A
    349          
    350                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_10:
   \   0001D8   7405         MOV       A,#0x5
   \   0001DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F8           MOV       R0,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F9           MOV       R1,A
   \   0001E2   E8           MOV       A,R0
   \   0001E3   49           ORL       A,R1
   \   0001E4   600B         JZ        ??HalLedUpdate_13
   \   0001E6   EE           MOV       A,R6
   \   0001E7   4F           ORL       A,R7
   \   0001E8   6011         JZ        ??HalLedUpdate_3
   \   0001EA   C3           CLR       C
   \   0001EB   EE           MOV       A,R6
   \   0001EC   98           SUBB      A,R0
   \   0001ED   EF           MOV       A,R7
   \   0001EE   99           SUBB      A,R1
   \   0001EF   500A         JNC       ??HalLedUpdate_3
    351                    {
    352                      next = wait;
   \                     ??HalLedUpdate_13:
   \   0001F1   7405         MOV       A,#0x5
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   EE           MOV       A,R6
   \   0001F7   F0           MOVX      @DPTR,A
   \   0001F8   A3           INC       DPTR
   \   0001F9   EF           MOV       A,R7
   \   0001FA   F0           MOVX      @DPTR,A
    353                    }
    354                  }
    355                  leds ^= led;
   \                     ??HalLedUpdate_3:
   \   0001FB   85..82       MOV       DPL,?XSP + 0
   \   0001FE   85..83       MOV       DPH,?XSP + 1
   \   000201   E0           MOVX      A,@DPTR
   \   000202   F8           MOV       R0,A
   \   000203   7403         MOV       A,#0x3
   \   000205   12....       LCALL     ?XSTACK_DISP0_8
   \   000208   E0           MOVX      A,@DPTR
   \   000209   68           XRL       A,R0
   \   00020A   F0           MOVX      @DPTR,A
    356                }
    357                led <<= 1;
   \                     ??HalLedUpdate_2:
   \   00020B   85..82       MOV       DPL,?XSP + 0
   \   00020E   85..83       MOV       DPH,?XSP + 1
   \   000211   E0           MOVX      A,@DPTR
   \   000212   C3           CLR       C
   \   000213   33           RLC       A
   \   000214   F0           MOVX      @DPTR,A
    358                sts++;
   \   000215   7401         MOV       A,#0x1
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   2409         ADD       A,#0x9
   \   00021D   F8           MOV       R0,A
   \   00021E   A3           INC       DPTR
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   3400         ADDC      A,#0x0
   \   000222   F9           MOV       R1,A
   \   000223   7401         MOV       A,#0x1
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   E8           MOV       A,R0
   \   000229   F0           MOVX      @DPTR,A
   \   00022A   A3           INC       DPTR
   \   00022B   E9           MOV       A,R1
   \   00022C   F0           MOVX      @DPTR,A
    359              }
   \   00022D   7403         MOV       A,#0x3
   \   00022F   12....       LCALL     ?XSTACK_DISP0_8
   \   000232   E0           MOVX      A,@DPTR
   \   000233   6003         JZ        $+5
   \   000235   02....       LJMP      ??HalLedUpdate_1 & 0xFFFF
    360          
    361              if (next)
   \   000238   7405         MOV       A,#0x5
   \   00023A   12....       LCALL     ?XSTACK_DISP0_8
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   F8           MOV       R0,A
   \   00023F   A3           INC       DPTR
   \   000240   E0           MOVX      A,@DPTR
   \   000241   F9           MOV       R1,A
   \   000242   E8           MOV       A,R0
   \   000243   49           ORL       A,R1
   \   000244   6016         JZ        ??HalLedUpdate_0
    362              {
    363                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   000246                ; Setup parameters for call to function osal_start_timerEx
   \   000246   7405         MOV       A,#0x5
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   FC           MOV       R4,A
   \   00024D   A3           INC       DPTR
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   FD           MOV       R5,A
   \   000250   7A02         MOV       R2,#0x2
   \   000252   7B00         MOV       R3,#0x0
   \   000254   90....       MOV       DPTR,#Hal_TaskID
   \   000257   E0           MOVX      A,@DPTR
   \   000258   F9           MOV       R1,A
   \   000259   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    364              }
    365            }
    366          }
   \                     ??HalLedUpdate_0:
   \   00025C   740B         MOV       A,#0xb
   \   00025E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000261   7F08         MOV       R7,#0x8
   \   000263   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   A2E1         MOV       C,0xE0 /* A   */.1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    367          
    368          /***************************************************************************************************
    369           * @fn      HalLedOnOff
    370           *
    371           * @brief   Turns specified LED ON or OFF
    372           *
    373           * @param   leds - LED bit mask
    374           *          mode - LED_ON,LED_OFF,
    375           *
    376           * @return  none
    377           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            if (leds & HAL_LED_1)
   \   000004   E9           MOV       A,R1
   \   000005   A2E0         MOV       C,0xE0 /* A   */.0
   \   000007   500B         JNC       ??HalLedOnOff_0
    381            {
    382              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV       A,#0x1
   \   00000B   6A           XRL       A,R2
   \   00000C   7004         JNZ       ??HalLedOnOff_1
    383              {
    384                HAL_TURN_ON_LED1();
   \   00000E   D290         SETB      0x90.0
   \   000010   8002         SJMP      ??HalLedOnOff_0
    385              }
    386              else
    387              {
    388                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   C290         CLR       0x90.0
    389              }
    390            }
    391          
    392            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV       A,R1
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   500B         JNC       ??HalLedOnOff_2
    393            {
    394              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV       A,#0x1
   \   00001B   6A           XRL       A,R2
   \   00001C   7004         JNZ       ??HalLedOnOff_3
    395              {
    396                HAL_TURN_ON_LED2();
   \   00001E   D291         SETB      0x90.1
   \   000020   8002         SJMP      ??HalLedOnOff_2
    397              }
    398              else
    399              {
    400                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   C291         CLR       0x90.1
    401              }
    402            }
    403          
    404            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV       A,R1
   \   000025   A2E2         MOV       C,0xE0 /* A   */.2
   \   000027   500B         JNC       ??HalLedOnOff_4
    405            {
    406              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV       A,#0x1
   \   00002B   6A           XRL       A,R2
   \   00002C   7004         JNZ       ??HalLedOnOff_5
    407              {
    408                HAL_TURN_ON_LED3();
   \   00002E   D294         SETB      0x90.4
   \   000030   8002         SJMP      ??HalLedOnOff_4
    409              }
    410              else
    411              {
    412                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   C294         CLR       0x90.4
    413              }
    414            }
    415          
    416            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV       A,R1
   \   000035   A2E3         MOV       C,0xE0 /* A   */.3
   \   000037   500B         JNC       ??HalLedOnOff_6
    417            {
    418              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV       A,#0x1
   \   00003B   6A           XRL       A,R2
   \   00003C   7004         JNZ       ??HalLedOnOff_7
    419              {
    420                HAL_TURN_ON_LED4();
   \   00003E   D290         SETB      0x90.0
   \   000040   8005         SJMP      ??HalLedOnOff_8
    421              }
    422              else
    423              {
    424                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   C290         CLR       0x90.0
    425              }
    426            }
    427          
    428            /* Remember current state */
    429            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV       A,R2
   \   000045   6007         JZ        ??HalLedOnOff_9
    430            {
    431              HalLedState |= leds;
   \                     ??HalLedOnOff_8:
   \   000047   90....       MOV       DPTR,#HalLedState
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   49           ORL       A,R1
   \   00004C   8009         SJMP      ??HalLedOnOff_10
    432            }
    433            else
    434            {
    435              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_9:
   \   00004E   74FF         MOV       A,#-0x1
   \   000050   69           XRL       A,R1
   \   000051   F8           MOV       R0,A
   \   000052   90....       MOV       DPTR,#HalLedState
   \   000055   E0           MOVX      A,@DPTR
   \   000056   58           ANL       A,R0
    436            }
   \                     ??HalLedOnOff_10:
   \   000057   80..         SJMP      ??Subroutine9_0
   \   000059                REQUIRE _A_P1
    437          }
    438          #endif /* HAL_LED */
    439          
    440          /***************************************************************************************************
    441           * @fn      HalGetLedState
    442           *
    443           * @brief   Dim LED2 - Dim (set level) of LED2
    444           *
    445           * @param   none
    446           *
    447           * @return  led state
    448           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          uint8 HalLedGetState ()
   \                     HalLedGetState:
    450          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    451          #if (HAL_LED == TRUE)
    452            return HalLedState;
   \   000004   90....       MOV       DPTR,#HalLedState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   80..         SJMP      ??Subroutine10_0
    453          #else
    454            return 0;
    455          #endif
    456          }
    457          
    458          /***************************************************************************************************
    459           * @fn      HalLedEnterSleep
    460           *
    461           * @brief   Store current LEDs state before sleep
    462           *
    463           * @param   none
    464           *
    465           * @return  none
    466           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    468          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    469          #ifdef BLINK_LEDS
    470            /* Sleep ON */
    471            HalLedStatusControl.sleepActive = TRUE;
   \   000004   90....       MOV       DPTR,#HalLedStatusControl + 36
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
    472          #endif /* BLINK_LEDS */
    473          
    474          #if (HAL_LED == TRUE)
    475            /* Save the state of each led */
    476            HalSleepLedState = 0;
    477            HalSleepLedState |= HAL_STATE_LED1();
   \   00000A   AB90         MOV       R3,0x90+0x0
    478            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00000C   AA90         MOV       R2,0x90+0x0
    479            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   00000E   A990         MOV       R1,0x90+0x0
    480            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   000010   A890         MOV       R0,0x90+0x0
   \   000012   EA           MOV       A,R2
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5004         JNC       ??HalLedEnterSleep_0
   \   000017   D2F0         SETB      B.0
   \   000019   8002         SJMP      ??HalLedEnterSleep_1
   \                     ??HalLedEnterSleep_0:
   \   00001B   C2F0         CLR       B.0
   \                     ??HalLedEnterSleep_1:
   \   00001D   E9           MOV       A,R1
   \   00001E   A2E4         MOV       C,0xE0 /* A   */.4
   \   000020   5004         JNC       ??HalLedEnterSleep_2
   \   000022   D2F1         SETB      B.1
   \   000024   8002         SJMP      ??HalLedEnterSleep_3
   \                     ??HalLedEnterSleep_2:
   \   000026   C2F1         CLR       B.1
   \                     ??HalLedEnterSleep_3:
   \   000028   E8           MOV       A,R0
   \   000029   A2E0         MOV       C,0xE0 /* A   */.0
   \   00002B   E4           CLR       A
   \   00002C   33           RLC       A
   \   00002D   33           RLC       A
   \   00002E   33           RLC       A
   \   00002F   33           RLC       A
   \   000030   FA           MOV       R2,A
   \   000031   A2F1         MOV       C,B.1
   \   000033   E4           CLR       A
   \   000034   33           RLC       A
   \   000035   33           RLC       A
   \   000036   33           RLC       A
   \   000037   F9           MOV       R1,A
   \   000038   A2F0         MOV       C,B.0
   \   00003A   E4           CLR       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   F8           MOV       R0,A
   \   00003E   EB           MOV       A,R3
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   E4           CLR       A
   \   000042   33           RLC       A
   \   000043   48           ORL       A,R0
   \   000044   49           ORL       A,R1
   \   000045   4A           ORL       A,R2
   \   000046   90....       MOV       DPTR,#HalSleepLedState
   \   000049   F0           MOVX      @DPTR,A
    481          
    482            /* TURN OFF all LEDs to save power */
    483            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   00004A                ; Setup parameters for call to function HalLedOnOff
   \   00004A   7A00         MOV       R2,#0x0
   \   00004C   790F         MOV       R1,#0xf
   \   00004E   12....       LCALL     `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    484          #endif /* HAL_LED */
    485          
    486          }
   \   000051   80..         SJMP      ??Subroutine10_0
   \   000053                REQUIRE _A_P1
    487          
    488          /***************************************************************************************************
    489           * @fn      HalLedExitSleep
    490           *
    491           * @brief   Restore current LEDs state after sleep
    492           *
    493           * @param   none
    494           *
    495           * @return  none
    496           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    498          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    499          #if (HAL_LED == TRUE)
    500            /* Load back the saved state */
    501            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV       R2,#0x1
   \   000006   90....       MOV       DPTR,#HalSleepLedState
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    502          
    503            /* Restart - This takes care BLINKING LEDS */
    504            HalLedUpdate();
   \   00000E                ; Setup parameters for call to function HalLedUpdate
   \   00000E   12....       LCALL     `??HalLedUpdate::?relay`; Banked call to: HalLedUpdate
    505          #endif /* HAL_LED */
    506          
    507          #ifdef BLINK_LEDS
    508            /* Sleep OFF */
    509            HalLedStatusControl.sleepActive = FALSE;
   \   000011   80..         SJMP      ?Subroutine0
    510          #endif /* BLINK_LEDS */
    511          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedBlink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedOnOff::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedGetState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    512          
    513          /***************************************************************************************************
    514          ***************************************************************************************************/
    515          
    516          
    517          
    518          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     25   HalLedBlink
        0     14   -> HalLedSet
        0     14   -> osal_GetSystemClock
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      2      0   HalLedEnterSleep
        2      0   -> HalLedOnOff
      2      0   HalLedExitSleep
        2      0   -> HalLedOnOff
        2      0   -> HalLedUpdate
      2      0   HalLedGetState
      2      0   HalLedInit
        2      0   -> HalLedSet
      2     27   HalLedOnOff
      1     38   HalLedSet
        0     11   -> HalLedBlink
        0     11   -> HalLedOnOff
      1     27   HalLedUpdate
        0     27   -> HalLedOnOff
        0     27   -> HalLedSet
        0     27   -> osal_GetSystemClock
        0     27   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine10_0
       8  ??Subroutine8_0
       1  ??Subroutine9_0
       4  ?Subroutine0
      12  ?Subroutine1
       6  ?Subroutine2
       4  ?Subroutine3
       6  ?Subroutine4
       4  ?Subroutine5
       2  ?Subroutine6
       8  ?Subroutine7
     217  HalLedBlink
       6  HalLedBlink::?relay
      83  HalLedEnterSleep
       6  HalLedEnterSleep::?relay
      19  HalLedExitSleep
       6  HalLedExitSleep::?relay
      11  HalLedGetState
       6  HalLedGetState::?relay
      14  HalLedInit
       6  HalLedInit::?relay
      89  HalLedOnOff
       6  HalLedOnOff::?relay
     121  HalLedSet
       6  HalLedSet::?relay
       1  HalLedState
      37  HalLedStatusControl
     614  HalLedUpdate
       6  HalLedUpdate::?relay
       1  HalSleepLedState
       1  _A_P1
       4  __Constant_64
       1  preBlinkState

 
 1 230 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
     0 bytes of DATA     memory (+ 1 byte  shared)
 1 230 bytes of HUGECODE memory
    40 bytes of XDATA    memory

Errors: none
Warnings: none
