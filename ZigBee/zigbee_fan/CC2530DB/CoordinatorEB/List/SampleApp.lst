###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               12/Sep/2024  19:13:41
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\Source\SampleApp.c
#    Command line       =  
#        -f C:\user\EW7AEE.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\Source\SampleApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\a9_zigbee\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT.h"
     75          #include "MT_UART.h"
     76          #include "string.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID
     99          };
    100          

   \                                 In  segment XDATA_ROM_C, align 1
    101          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    102          {
    103            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    104            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    105            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    106            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    107            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    112          };
    113          
    114          // This is the Endpoint/Interface description.  It is defined here, but
    115          // filled-in in SampleApp_Init().  Another way to go would be to fill
    116          // in the structure here and make it a "const" (in code space).  The
    117          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * EXTERNAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132                                    // This variable will be received when
    133                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          
    146          /*********************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    150          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    151          void SampleApp_SendPeriodicMessage( void );
    152          void SampleApp_SendFlashMessage( uint16 flashTime );
    153          void UartWirelsss(uint8 * msg);
    154          void FanControl(uint8 * msg);
    155          void DataAnalysis(uint8 * msg);
    156          /*********************************************************************
    157           * NETWORK LAYER CALLBACKS
    158           */
    159          
    160          /*********************************************************************
    161           * PUBLIC FUNCTIONS
    162           */
    163          
    164          /*********************************************************************
    165           * @fn      SampleApp_Init
    166           *
    167           * @brief   Initialization function for the Generic App Task.
    168           *          This is called during initialization and should contain
    169           *          any application specific initialization (ie. hardware
    170           *          initialization/setup, table initialization, power up
    171           *          notificaiton ... ).
    172           *
    173           * @param   task_id - the ID assigned by OSAL.  This ID should be
    174           *                    used to send messages and set timers.
    175           *
    176           * @return  none
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    180            SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    181            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    182            SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    183            
    184            MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    185            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    186            HalUARTWrite ( 0, "Uart is ok!", sizeof("Uart is ok!") );
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV       R4,#0xc
   \   000020   7D00         MOV       R5,#0x0
   \   000022   7A..         MOV       R2,#`?<Constant "Uart is ok!">` & 0xff
   \   000024   7B..         MOV       R3,#(`?<Constant "Uart is ok!">` >> 8) & 0xff
   \   000026   7900         MOV       R1,#0x0
   \   000028   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    187            
    188          
    189            // Device hardware initialization can be added here or in main() (Zmain.c).
    190            // If the hardware is application specific - add it here.
    191            // If the hardware is other parts of the device add it in main().
    192          
    193           #if defined ( BUILD_ALL_DEVICES )
    194            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    195            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    196            // together - if they are - we will start up a coordinator. Otherwise,
    197            // the device will start as a router.
    198            if ( readCoordinatorJumper() )
    199              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    200            else
    201              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    202          #endif // BUILD_ALL_DEVICES
    203          
    204          #if defined ( HOLD_AUTO_START )
    205            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    206            //  from starting the device and wait for the application to
    207            //  start the device.
    208            ZDOInitDevice(0);
    209          #endif
    210          
    211            // Setup for the periodic message's destination address
    212            // Broadcast to everyone
    213            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥Ä£Ê½
   \   00002B   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV       A,#0xf
   \   000030   F0           MOVX      @DPTR,A
    214            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC       DPTR
   \   000032   7414         MOV       A,#0x14
   \   000034   F0           MOVX      @DPTR,A
    215            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//¹ã²¥µØÖ·
   \   000035   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   F0           MOVX      @DPTR,A
    216          
    217            // Setup for the flash command's destination address - Group 1
    218            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥Ä£Ê½
   \   00003D   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
    219            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//¶ËµãºÅ
   \   000043   A3           INC       DPTR
   \   000044   7414         MOV       A,#0x14
   \   000046   F0           MOVX      @DPTR,A
    220            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//µØÖ·
   \   000047   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV       A,#0x1
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
    221          
    222            // Fill out the endpoint description.
    223            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000050   90....       MOV       DPTR,#SampleApp_epDesc
   \   000053   7414         MOV       A,#0x14
   \   000055   F0           MOVX      @DPTR,A
    224            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000056   A3           INC       DPTR
   \   000057   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005D   F0           MOVX      @DPTR,A
    225            SampleApp_epDesc.simpleDesc
    226                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005E   A3           INC       DPTR
   \   00005F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000065   F0           MOVX      @DPTR,A
    227            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000066   A3           INC       DPTR
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
    228          
    229            // Register the endpoint description with the AF
    230            afRegister( &SampleApp_epDesc );
   \   000069                ; Setup parameters for call to function afRegister
   \   000069   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00006B   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    231          
    232            // Register for all key events - This app will handle all key events
    233            RegisterForKeys( SampleApp_TaskID );
   \   000070                ; Setup parameters for call to function RegisterForKeys
   \   000070   90....       MOV       DPTR,#SampleApp_TaskID
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    234          
    235            // By default, all devices start out in Group 1
    236            SampleApp_Group.ID = 0x0001;
   \   000078   90....       MOV       DPTR,#SampleApp_Group
   \   00007B   7401         MOV       A,#0x1
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   E4           CLR       A
   \   000080   F0           MOVX      @DPTR,A
    237            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000084   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000087   F5..         MOV       ?V2,A
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008E   7C07         MOV       R4,#0x7
   \   000090   7D00         MOV       R5,#0x0
   \   000092   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000094   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000096   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000099   7403         MOV       A,#0x3
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
    238            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009E                ; Setup parameters for call to function aps_AddGroup
   \   00009E   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   0000A0   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A2   7914         MOV       R1,#0x14
   \   0000A4   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    239          
    240          #if defined ( LCD_SUPPORTED )
    241            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A7                ; Setup parameters for call to function HalLcdWriteString
   \   0000A7   7901         MOV       R1,#0x1
   \   0000A9   7A..         MOV       R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AB   7B..         MOV       R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000AD   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    242          #endif
    243          }
   \   0000B0   7F03         MOV       R7,#0x3
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
    244          
    245          /*********************************************************************
    246           * @fn      SampleApp_ProcessEvent
    247           *
    248           * @brief   Generic Application Task event processor.  This function
    249           *          is called to process all events for the task.  Events
    250           *          include timers, messages and any other user defined events.
    251           *
    252           * @param   task_id  - The OSAL assigned task ID.
    253           * @param   events - events to process.  This is a bit map and can
    254           *                   contain more than one event.
    255           *
    256           * @return  none
    257           */
    258          extern uint8 new_cmd[1024];

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    261            afIncomingMSGPacket_t *MSGpkt;
    262            (void)task_id;  // Intentionally unreferenced parameter
    263          
    264            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??SampleApp_ProcessEvent_0 & 0xFFFF
    265            {
    266              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800D         SJMP      ??SampleApp_ProcessEvent_1
    267              while ( MSGpkt )
    268              {
    269                switch ( MSGpkt->hdr.event )
    270                {
    271                  // Received when a key is pressed
    272                  case KEY_CHANGE:
    273                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    274                    break;
    275          
    276                  // Received when a messages is received (OTA) for this endpoint
    277                  case AF_INCOMING_MSG_CMD:
    278                    DataAnalysis(new_cmd);
    279                    break;
    280                  case CMD_SERIAL_MSG:
    281                    //ÎÞÏß·¢ËÍ´®¿Ú½ÓÊÕµÄÏûÏ¢
    282                    mtOSALSerialData_t * UartMsg;
                           ^
Warning[Pe1072]: a declaration cannot have a label
    283                    UartMsg = (mtOSALSerialData_t *)MSGpkt; //&UartMsg->msg[1]
    284                    AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,SAMPLEAPP_PERIODIC_CLUSTERID,UartMsg->msg[0],&UartMsg->msg[1],&SampleApp_TransID,AF_DISCV_ROUTE,AF_DEFAULT_RADIUS );
    285                    break;
    286          
    287                  // Received whenever the device changes state in the network
    288                  case ZDO_STATE_CHANGE:
    289                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   90....       MOV       DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX      @DPTR,A
    290                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    291                        || (SampleApp_NwkState == DEV_ROUTER)
    292                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    293                    {
    294                      // Start sending the periodic message in a regular interval.
    295                      //osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    296                    }
    297                    else
    298                    {
    299                      // Device is no longer in the network
    300                    }
    301                    break;
    302          
    303                  default:
    304                    break;
    305                }
    306          
    307                // Release the memory
    308                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function osal_msg_deallocate
   \   000018   AA..         MOV       R2,?V0
   \   00001A   AB..         MOV       R3,?V1
   \   00001C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    309          
    310                // Next - if one is available
    311                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   E5..         MOV       A,?V0
   \   00002D   45..         ORL       A,?V1
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??SampleApp_ProcessEvent_4 & 0xFFFF
   \   000034   85..82       MOV       DPL,?V0
   \   000037   85..83       MOV       DPH,?V1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   14           DEC       A
   \   00003C   602B         JZ        ??SampleApp_ProcessEvent_5
   \   00003E   24E7         ADD       A,#-0x19
   \   000040   601E         JZ        ??SampleApp_ProcessEvent_6
   \   000042   245A         ADD       A,#0x5a
   \   000044   6006         JZ        ??SampleApp_ProcessEvent_7
   \   000046   24EF         ADD       A,#-0x11
   \   000048   60C8         JZ        ??SampleApp_ProcessEvent_2
   \   00004A   80CC         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   00004C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   00005E   80B8         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000060                ; Setup parameters for call to function DataAnalysis
   \   000060   7A..         MOV       R2,#new_cmd & 0xff
   \   000062   7B..         MOV       R3,#(new_cmd >> 8) & 0xff
   \   000064   12....       LCALL     `??DataAnalysis::?relay`; Banked call to: DataAnalysis
   \   000067   80AF         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   E8           MOV       A,R0
   \   000071   FA           MOV       R2,A
   \   000072   E9           MOV       A,R1
   \   000073   FB           MOV       R3,A
   \   000074                ; Setup parameters for call to function AF_DataRequest
   \   000074   75..1E       MOV       ?V2,#0x1e
   \   000077   78..         MOV       R0,#?V2
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   75....       MOV       ?V2,#SampleApp_TransID & 0xff
   \   00007F   75....       MOV       ?V3,#(SampleApp_TransID >> 8) & 0xff
   \   000082   78..         MOV       R0,#?V2
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   A3           INC       DPTR
   \   00008C   8582..       MOV       ?V2,DPL
   \   00008F   8583..       MOV       ?V3,DPH
   \   000092   78..         MOV       R0,#?V2
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   8A82         MOV       DPL,R2
   \   000099   8B83         MOV       DPH,R3
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V2,A
   \   00009E   75..00       MOV       ?V3,#0x0
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   75..01       MOV       ?V2,#0x1
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7920         MOV       R1,#0x20
   \   0000B0   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   0000B2   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B4   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000B6   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000B8   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000BB   7409         MOV       A,#0x9
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   02....       LJMP      ??SampleApp_ProcessEvent_3 & 0xFFFF
    312              }
    313          
    314              // return unprocessed events
    315              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   6480         XRL       A,#0x80
   \   0000C8   800D         SJMP      ??SampleApp_ProcessEvent_8
    316            }
    317          
    318            // Send a message out - This event is generated by a timer
    319            //  (setup in SampleApp_Init()).
    320            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000CA   EE           MOV       A,R6
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   500B         JNC       ??SampleApp_ProcessEvent_9
    321            {
    322              // Send the periodic message
    323              SampleApp_SendPeriodicMessage();
   \   0000CF                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000CF   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    324          
    325              // Setup to send message again in normal period (+ a little jitter)
    326              //osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,(SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    327          
    328              // return unprocessed events
    329              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000D2   EE           MOV       A,R6
   \   0000D3   6401         XRL       A,#0x1
   \   0000D5   FA           MOV       R2,A
   \   0000D6   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000D7   FB           MOV       R3,A
   \   0000D8   8004         SJMP      ??SampleApp_ProcessEvent_10
    330            }
    331          
    332            // Discard unknown events
    333            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000DA   7A00         MOV       R2,#0x0
   \   0000DC   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000DE   7F04         MOV       R7,#0x4
   \   0000E0   02....       LJMP      ?BANKED_LEAVE_XDATA
    334          }
    335          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void UartWirelsss(uint8 * msg)
   \                     UartWirelsss:
    337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    338            //µ÷ÓÃÎÞÏß·¢ËÍAPI
    339            AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,SAMPLEAPP_PERIODIC_CLUSTERID,strlen(msg),msg,&SampleApp_TransID,AF_DISCV_ROUTE,AF_DEFAULT_RADIUS );
                                                                                                                      ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char const *"
   \   000009                ; Setup parameters for call to function strlen
   \   000009   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010                ; Setup parameters for call to function AF_DataRequest
   \   000010   75..1E       MOV       ?V4,#0x1e
   \   000013   78..         MOV       R0,#?V4
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000018   75....       MOV       ?V4,#SampleApp_TransID & 0xff
   \   00001B   75....       MOV       ?V5,#(SampleApp_TransID >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7920         MOV       R1,#0x20
   \   00003A   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00003C   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003E   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000040   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000042   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000045   7409         MOV       A,#0x9
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
    340          }
   \   00004A   7F06         MOV       R7,#0x6
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
    341          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void DataAnalysis(uint8 * msg)
   \                     DataAnalysis:
    343          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    344            //ÅÐ¶ÏÊÇÖÕ¶Ë»¹ÊÇÐ­µ÷Æ÷
    345            if(zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR)
   \   000009   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7016         JNZ       ??DataAnalysis_0
    346            {
    347              HalUARTWrite(0,msg,(byte)osal_strlen(msg)+1);
                                                          ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   00000F                ; Setup parameters for call to function osal_strlen
   \   00000F   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012   EA           MOV       A,R2
   \   000013   2401         ADD       A,#0x1
   \   000015   FC           MOV       R4,A
   \   000016   E4           CLR       A
   \   000017   3400         ADDC      A,#0x0
   \   000019   FD           MOV       R5,A
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FB           MOV       R3,A
   \   00001E   7900         MOV       R1,#0x0
   \   000020   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000023   801D         SJMP      ??DataAnalysis_1
    348            }
    349            else if(zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE)
   \                     ??DataAnalysis_0:
   \   000025   6402         XRL       A,#0x2
   \   000027   7019         JNZ       ??DataAnalysis_1
    350            {
    351              HalUARTWrite(0,msg,(byte)osal_strlen(msg));
                                                          ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   000029                ; Setup parameters for call to function osal_strlen
   \   000029   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E                ; Setup parameters for call to function HalUARTWrite
   \   00002E   AC..         MOV       R4,?V0
   \   000030   7D00         MOV       R5,#0x0
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   7900         MOV       R1,#0x0
   \   000038   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    352              FanControl(msg);
   \   00003B                ; Setup parameters for call to function FanControl
   \   00003B   EE           MOV       A,R6
   \   00003C   FA           MOV       R2,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??FanControl::?relay`; Banked call to: FanControl
    353            }
    354          }
   \                     ??DataAnalysis_1:
   \   000042   80..         SJMP      ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    355          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    356          void FanControl(uint8 * msg)
   \                     FanControl:
    357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    358            P1DIR |= (1 << 3);
   \   000009   43FE08       ORL       0xfe,#0x8
    359            if(strncmp(msg, "0", 1) == 0)
                              ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char const *"
   \   00000C                ; Setup parameters for call to function strncmp
   \   00000C   75..01       MOV       ?V0,#0x1
   \   00000F   75..00       MOV       ?V1,#0x0
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   000019   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00001B   12....       LCALL     `??strncmp::?relay`; Banked call to: strncmp
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   \   000023   8B..         MOV       ?V1,R3
   \   000025   EA           MOV       A,R2
   \   000026   45..         ORL       A,?V1
   \   000028   7004         JNZ       ??FanControl_0
    360            {
    361              P1_3 = 0;
   \   00002A   C293         CLR       0x90.3
   \   00002C   8021         SJMP      ??FanControl_1
    362            }
    363            else if(strncmp(msg, "1", 1) == 0)
                                   ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char const *"
   \                     ??FanControl_0:
   \   00002E                ; Setup parameters for call to function strncmp
   \   00002E   75..00       MOV       ?V1,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7C..         MOV       R4,#`?<Constant "1">` & 0xff
   \   000038   7D..         MOV       R5,#(`?<Constant "1">` >> 8) & 0xff
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??strncmp::?relay`; Banked call to: strncmp
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   45..         ORL       A,?V1
   \   00004B   7002         JNZ       ??FanControl_1
    364            {
    365              P1_3 = 1;
   \   00004D   D293         SETB      0x90.3
    366            }
    367          }
   \                     ??FanControl_1:
   \   00004F   80..         SJMP      ??Subroutine1_0
   \   000051                REQUIRE P1DIR
   \   000051                REQUIRE _A_P1
    368          
    369          
    370          
    371          /*********************************************************************
    372           * Event Generation Functions
    373           */
    374          /*********************************************************************
    375           * @fn      SampleApp_HandleKeys
    376           *
    377           * @brief   Handles all key events for this device.
    378           *
    379           * @param   shift - true if in shift/alt.
    380           * @param   keys - bit field for key events. Valid entries:
    381           *                 HAL_KEY_SW_2
    382           *                 HAL_KEY_SW_1
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    387          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    388            (void)shift;  // Intentionally unreferenced parameter
    389            
    390            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5007         JNC       ??SampleApp_HandleKeys_0
    391            {
    392              /* This key sends the Flash Command is sent to Group 1.
    393               * This device will not receive the Flash Command from this
    394               * device (even if it belongs to group 1).
    395               */
    396              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    397            }
    398          
    399            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5024         JNC       ??SampleApp_HandleKeys_1
    400            {
    401              /* The Flashr Command is sent to Group 1.
    402               * This key toggles this device in and out of group 1.
    403               * If this device doesn't belong to group 1, this application
    404               * will not receive the Flash command sent to group 1.
    405               */
    406              aps_Group_t *grp;
    407              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    408              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV       R2,#0x1
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7914         MOV       R1,#0x14
   \   00001D   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000020   8B..         MOV       ?V1,R3
   \   000022   EA           MOV       A,R2
   \   000023   45..         ORL       A,?V1
   \   000025   600B         JZ        ??SampleApp_HandleKeys_2
    409              {
    410                // Remove from the group
    411                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV       R2,#0x1
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   7914         MOV       R1,#0x14
   \   00002D   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   000030   8009         SJMP      ??SampleApp_HandleKeys_1
    412              }
    413              else
    414              {
    415                // Add to the flash group
    416                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV       R1,#0x14
   \   000038   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    417              }
    418            }
    419          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP      ??Subroutine1_0
    420          
    421          /*********************************************************************
    422           * LOCAL FUNCTIONS
    423           */
    424          
    425          /*********************************************************************
    426           * @fn      SampleApp_MessageMSGCB
    427           *
    428           * @brief   Data message processor callback.  This function processes
    429           *          any incoming data - probably from other devices.  So, based
    430           *          on cluster ID, perform the intended action.
    431           *
    432           * @param   none
    433           *
    434           * @return  none
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    437          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    438            uint16 flashTime;
    439          
    440            switch ( pkt->clusterId )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6402         XRL       A,#0x2
   \   000010   7002         JNZ       ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703C         JNZ       ??SampleApp_MessageMSGCB_1
    441            {
    442              case SAMPLEAPP_PERIODIC_CLUSTERID:
    443                break;
    444          
    445              case SAMPLEAPP_FLASH_CLUSTERID:
    446                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    447                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV       A,R2
   \   000017   2422         ADD       A,#0x22
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024                ; Setup parameters for call to function HalLedBlink
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FA           MOV       R2,A
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   E4           CLR       A
   \   000034   C8           XCH       A,R0
   \   000035   F9           MOV       R1,A
   \   000036   EA           MOV       A,R2
   \   000037   28           ADD       A,R0
   \   000038   F5..         MOV       ?V0,A
   \   00003A   E4           CLR       A
   \   00003B   39           ADDC      A,R1
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   7402         MOV       A,#0x2
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?US_SHR
   \   000045   AC..         MOV       R4,?V0
   \   000047   AD..         MOV       R5,?V1
   \   000049   7B32         MOV       R3,#0x32
   \   00004B   7A04         MOV       R2,#0x4
   \   00004D   7908         MOV       R1,#0x8
   \   00004F   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    448                break;
    449            }
    450          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000052   02....       LJMP      ??Subroutine1_0 & 0xFFFF
    451          
    452          /*********************************************************************
    453           * @fn      SampleApp_SendPeriodicMessage
    454           *
    455           * @brief   Send the periodic message.
    456           *
    457           * @param   none
    458           *
    459           * @return  none
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine1_0
   \   000003                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    463            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    464                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    465                                 1,
    466                                 (uint8*)&SampleAppPeriodicCounter,
    467                                 &SampleApp_TransID,
    468                                 AF_DISCV_ROUTE,
    469                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV       R1,#0x20
   \   000035   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000040   7409         MOV       A,#0x9
   \   000042   02....       LJMP      ?Subroutine0 & 0xFFFF
    470            {
    471            }
    472            else
    473            {
    474              // Error occurred in request to send.
    475            }
    476          }
    477          
    478          /*********************************************************************
    479           * @fn      SampleApp_SendFlashMessage
    480           *
    481           * @brief   Send the flash message to group 1.
    482           *
    483           * @param   flashTime - in milliseconds
    484           *
    485           * @return  none
    486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    488          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    489            uint8 buffer[3];
    490            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    491            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    492            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    493          
    494            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    495                                 SAMPLEAPP_FLASH_CLUSTERID,
    496                                 3,
    497                                 buffer,
    498                                 &SampleApp_TransID,
    499                                 AF_DISCV_ROUTE,
    500                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    501            {
    502            }
    503            else
    504            {
    505              // Error occurred in request to send.
    506            }
    507          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UartWirelsss::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartWirelsss

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DataAnalysis::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DataAnalysis

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FanControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FanControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Uart is ok!">`:
   \   000000   55617274     DB "Uart is ok!"
   \            20697320
   \            6F6B2100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "1">`:
   \   000000   3100         DB "1"
    508          
    509          /*********************************************************************
    510          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     22   DataAnalysis
        0     10   -> FanControl
        0     10   -> HalUARTWrite
        0     10   -> osal_strlen
      0     22   FanControl
        0     12   -> strncmp
      0     22   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> HalUARTWrite
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0     10   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
      0     21   SampleApp_ProcessEvent
        0     21   -> AF_DataRequest
        0     12   -> DataAnalysis
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest
      0     23   UartWirelsss
        0     23   -> AF_DataRequest
        0     14   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "0">
       2  ?<Constant "1">
       8  ?<Constant "Group 1">
      10  ?<Constant "SampleApp">
      12  ?<Constant "Uart is ok!">
       5  ??Subroutine1_0
       3  ?Subroutine0
      68  DataAnalysis
       6  DataAnalysis::?relay
      81  FanControl
       6  FanControl::?relay
       1  P1DIR
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      61  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     181  SampleApp_Init
       6  SampleApp_Init::?relay
      85  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     227  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     116  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      69  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
      79  UartWirelsss
       6  UartWirelsss::?relay
       1  _A_P1

 
 975 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
  50 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
  54 bytes of CODE     memory
  50 bytes of CONST    memory
   0 bytes of DATA     memory (+ 2 bytes shared)
 975 bytes of HUGECODE memory
  53 bytes of XDATA    memory

Errors: none
Warnings: 6
