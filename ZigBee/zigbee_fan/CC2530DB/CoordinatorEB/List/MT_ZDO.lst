###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               24/Aug/2024  06:27:24
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f C:\user\EWF26F.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c" -D ZTOOL_P1
#        -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
      4            Revision:       $Revision: 29348 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          
     56          #if !defined( WIN32 )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #if defined ( MT_SYS_KEY_MANAGEMENT )
     61            #include "ZDSecMgr.h"
     62          #endif
     63          
     64          #include "nwk_util.h"
     65          
     66          /**************************************************************************************************
     67           * CONSTANTS
     68           **************************************************************************************************/
     69          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     70          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     71          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     72          #define MT_ZDO_BEACON_IND_LEN             21
     73          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     74          #define MT_ZDO_JOIN_CNF_LEN               5
     75          
     76          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     77          // sizeof(zdoConcentratorInd_t) is not usable.
     78          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     79          
     80          #define MTZDO_RESPONSE_BUFFER_LEN   100
     81          
     82          #define MTZDO_MAX_MATCH_CLUSTERS    16
     83          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     84          
     85          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     86          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     87          
     88          #define MT_ZDO_STATUS_LEN   1
     89          
     90          /**************************************************************************************************
     91           * GLOBAL VARIABLES
     92           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     95          
     96          /**************************************************************************************************
     97           * LOCAL VARIABLES
     98           **************************************************************************************************/
     99          
    100          /**************************************************************************************************
    101           * LOCAL FUNCTIONS
    102           **************************************************************************************************/
    103          #if defined (MT_ZDO_FUNC)
    104          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    105          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    106          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    107          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    108          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    109          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    110          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    111          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    112          void MT_ZdoUserDescRequest(uint8 *pBuf);
    113          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    114          void MT_ZdoUserDescSet(uint8 *pBuf);
    115          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    116          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    117          void MT_ZdoBindRequest(uint8 *pBuf);
    118          void MT_ZdoUnbindRequest(uint8 *pBuf);
    119          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    120          #if defined ( MT_SYS_KEY_MANAGEMENT )
    121          void MT_ZdoSetLinkKey(uint8 *pBuf);
    122          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    123          void MT_ZdoGetLinkKey(uint8 *pBuf);
    124          #endif /* MT_SYS_KEY_MANAGEMENT */
    125          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    126          void MT_ZdoJoinReq(uint8 *pBuf);
    127          /* Call back function */
    128          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    129          void *MT_ZdoBeaconIndCB ( void *pStr );
    130          void *MT_ZdoJoinCnfCB ( void *pStr );
    131          #if defined (MT_ZDO_MGMT)
    132          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    134          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    135          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    136          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    137          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    138          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    139          #endif /* MT_ZDO_MGMT */
    140          void MT_ZdoStartupFromApp(uint8 *pBuf);
    141          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    142          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    143          #endif /* MT_ZDO_FUNC */
    144          
    145          #if defined (MT_ZDO_CB_FUNC)
    146          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    147          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    148          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    149          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    150          void* MT_ZdoSrcRtgCB( void *pStr );
    151          static void *MT_ZdoConcentratorIndCB(void *pStr);
    152          static void *MT_ZdoLeaveInd(void *vPtr);
    153          #endif /* MT_ZDO_CB_FUNC */
    154          
    155          #if defined (MT_ZDO_FUNC)
    156          /***************************************************************************************************
    157           * @fn      MT_ZdoInit
    158           *
    159           * @brief   MT ZDO initialization
    160           *
    161           * @param   none
    162           *
    163           * @return  none
    164           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    165          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    166          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    167          #ifdef MT_ZDO_CB_FUNC
    168            /* Register with ZDO for indication callbacks */
    169            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    170            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    171            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    172          #endif
    173          }
   \   000000   02....       LJMP      ?BRET
    174          
    175          /***************************************************************************************************
    176           * @fn      MT_ZdoCommandProcessing
    177           *
    178           * @brief
    179           *
    180           *   Process all the ZDO commands that are issued by test tool
    181           *
    182           * @param   pBuf - pointer to the msg buffer
    183           *
    184           *          | LEN  | CMD0  | CMD1  |  DATA  |
    185           *          |  1   |   1   |   1   |  0-255 |
    186           *
    187           * @return  status
    188           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    190          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    191            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
    192          
    193            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   603F         JZ        ??MT_ZdoCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6041         JZ        ??MT_ZdoCommandProcessing_1
   \   000013   14           DEC       A
   \   000014   6043         JZ        ??MT_ZdoCommandProcessing_2
   \   000016   14           DEC       A
   \   000017   6045         JZ        ??MT_ZdoCommandProcessing_3
   \   000019   14           DEC       A
   \   00001A   6047         JZ        ??MT_ZdoCommandProcessing_4
   \   00001C   14           DEC       A
   \   00001D   6049         JZ        ??MT_ZdoCommandProcessing_5
   \   00001F   14           DEC       A
   \   000020   604B         JZ        ??MT_ZdoCommandProcessing_6
   \   000022   14           DEC       A
   \   000023   604D         JZ        ??MT_ZdoCommandProcessing_7
   \   000025   14           DEC       A
   \   000026   604F         JZ        ??MT_ZdoCommandProcessing_8
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   6050         JZ        ??MT_ZdoCommandProcessing_9
   \   00002C   14           DEC       A
   \   00002D   6052         JZ        ??MT_ZdoCommandProcessing_10
   \   00002F   14           DEC       A
   \   000030   6054         JZ        ??MT_ZdoCommandProcessing_11
   \   000032   24EC         ADD       A,#-0x14
   \   000034   6055         JZ        ??MT_ZdoCommandProcessing_12
   \   000036   14           DEC       A
   \   000037   6057         JZ        ??MT_ZdoCommandProcessing_13
   \   000039   14           DEC       A
   \   00003A   6059         JZ        ??MT_ZdoCommandProcessing_14
   \   00003C   24FC         ADD       A,#-0x4
   \   00003E   605A         JZ        ??MT_ZdoCommandProcessing_15
   \   000040   14           DEC       A
   \   000041   605C         JZ        ??MT_ZdoCommandProcessing_16
   \   000043   24E9         ADD       A,#-0x17
   \   000045   6062         JZ        ??MT_ZdoCommandProcessing_17
   \   000047   14           DEC       A
   \   000048   6064         JZ        ??MT_ZdoCommandProcessing_18
   \   00004A   14           DEC       A
   \   00004B   6057         JZ        ??MT_ZdoCommandProcessing_19
   \   00004D   8064         SJMP      ??MT_ZdoCommandProcessing_20
    194            {
    195          #if defined ( ZDO_NWKADDR_REQUEST )
    196              case MT_ZDO_NWK_ADDR_REQ:
    197                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   00004F                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   00004F   12....       LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    198                break;
   \   000052   8061         SJMP      ??MT_ZdoCommandProcessing_21
    199          #endif
    200          
    201          #if defined ( ZDO_IEEEADDR_REQUEST )
    202              case MT_ZDO_IEEE_ADDR_REQ:
    203                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000054                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   000054   12....       LCALL     `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    204                break;
   \   000057   805C         SJMP      ??MT_ZdoCommandProcessing_21
    205          #endif
    206          
    207          #if defined ( ZDO_NODEDESC_REQUEST )
    208              case MT_ZDO_NODE_DESC_REQ:
    209                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000059                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   000059   12....       LCALL     `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    210                break;
   \   00005C   8057         SJMP      ??MT_ZdoCommandProcessing_21
    211          #endif
    212          
    213          #if defined ( ZDO_POWERDESC_REQUEST )
    214              case MT_ZDO_POWER_DESC_REQ:
    215                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   00005E                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   00005E   12....       LCALL     `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    216                break;
   \   000061   8052         SJMP      ??MT_ZdoCommandProcessing_21
    217          #endif
    218          
    219          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    220              case MT_ZDO_SIMPLE_DESC_REQ:
    221                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   000063                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   000063   12....       LCALL     `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    222                break;
   \   000066   804D         SJMP      ??MT_ZdoCommandProcessing_21
    223          #endif
    224          
    225          #if defined ( ZDO_ACTIVEEP_REQUEST )
    226              case MT_ZDO_ACTIVE_EP_REQ:
    227                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   000068                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   000068   12....       LCALL     `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    228                break;
   \   00006B   8048         SJMP      ??MT_ZdoCommandProcessing_21
    229          #endif
    230          
    231          #if defined ( ZDO_MATCH_REQUEST )
    232              case MT_ZDO_MATCH_DESC_REQ:
    233                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   00006D                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   00006D   12....       LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    234                break;
   \   000070   8043         SJMP      ??MT_ZdoCommandProcessing_21
    235          #endif
    236          
    237          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    238              case MT_ZDO_COMPLEX_DESC_REQ:
    239                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   000072                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   000072   12....       LCALL     `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    240                break;
   \   000075   803E         SJMP      ??MT_ZdoCommandProcessing_21
    241          #endif
    242          
    243          #if defined ( ZDO_USERDESC_REQUEST )
    244              case MT_ZDO_USER_DESC_REQ:
    245                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000077                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000077   12....       LCALL     `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    246                break;
   \   00007A   8039         SJMP      ??MT_ZdoCommandProcessing_21
    247          #endif
    248          
    249          #if defined ( ZDO_ENDDEVICE_ANNCE )
    250              case MT_ZDO_END_DEV_ANNCE:
    251                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00007C                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   00007C   12....       LCALL     `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    252                break;
   \   00007F   8034         SJMP      ??MT_ZdoCommandProcessing_21
    253          #endif
    254          
    255          #if defined ( ZDO_USERDESCSET_REQUEST )
    256              case MT_ZDO_USER_DESC_SET:
    257                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000081                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000081   12....       LCALL     `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    258                break;
   \   000084   802F         SJMP      ??MT_ZdoCommandProcessing_21
    259          #endif
    260          
    261          #if defined ( ZDO_SERVERDISC_REQUEST )
    262              case MT_ZDO_SERVICE_DISC_REQ:
    263                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000086                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   000086   12....       LCALL     `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    264                break;
   \   000089   802A         SJMP      ??MT_ZdoCommandProcessing_21
    265          #endif
    266          
    267          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    268              case MT_ZDO_END_DEV_BIND_REQ:
    269                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00008B                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00008B   12....       LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    270                break;
   \   00008E   8025         SJMP      ??MT_ZdoCommandProcessing_21
    271          #endif
    272          
    273          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    274              case MT_ZDO_BIND_REQ:
    275                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000090                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000090   12....       LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    276                break;
   \   000093   8020         SJMP      ??MT_ZdoCommandProcessing_21
    277          #endif
    278          
    279          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    280              case MT_ZDO_UNBIND_REQ:
    281                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000095                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000095   12....       LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    282                break;
   \   000098   801B         SJMP      ??MT_ZdoCommandProcessing_21
    283          #endif
    284          
    285          #if defined ( MT_SYS_KEY_MANAGEMENT )
    286              case MT_ZDO_SET_LINK_KEY:
    287                MT_ZdoSetLinkKey(pBuf);
    288                break;
    289          
    290              case MT_ZDO_REMOVE_LINK_KEY:
    291                MT_ZdoRemoveLinkKey(pBuf);
    292                break;
    293          
    294              case MT_ZDO_GET_LINK_KEY:
    295                MT_ZdoGetLinkKey(pBuf);
    296                break;
    297          #endif // MT_SYS_KEY_MANAGEMENT
    298          
    299          #if defined ( ZDO_MANUAL_JOIN )
    300              case MT_ZDO_NWK_DISCOVERY_REQ:
    301                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00009A                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   00009A   12....       LCALL     `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
    302                break;
   \   00009D   8016         SJMP      ??MT_ZdoCommandProcessing_21
    303          
    304              case MT_ZDO_JOIN_REQ:
    305                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   00009F                ; Setup parameters for call to function MT_ZdoJoinReq
   \   00009F   12....       LCALL     `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
    306                break;
   \   0000A2   8011         SJMP      ??MT_ZdoCommandProcessing_21
    307          #endif
    308          
    309          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    310              case MT_ZDO_MGMT_NWKDISC_REQ:
    311                MT_ZdoMgmtNwkDiscRequest(pBuf);
    312                break;
    313          #endif
    314          
    315          #if defined ( ZDO_MGMT_LQI_REQUEST )
    316              case MT_ZDO_MGMT_LQI_REQ:
    317                MT_ZdoMgmtLqiRequest(pBuf);
    318                break;
    319          #endif
    320          
    321          #if defined ( ZDO_MGMT_RTG_REQUEST )
    322              case MT_ZDO_MGMT_RTG_REQ:
    323                MT_ZdoMgmtRtgRequest(pBuf);
    324                break;
    325          #endif
    326          
    327          #if defined ( ZDO_MGMT_BIND_REQUEST )
    328              case MT_ZDO_MGMT_BIND_REQ:
    329                MT_ZdoMgmtBindRequest(pBuf);
    330                break;
    331          #endif
    332          
    333          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    334              case MT_ZDO_MGMT_LEAVE_REQ:
    335                MT_ZdoMgmtLeaveRequest(pBuf);
    336                break;
    337          #endif
    338          
    339          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    340              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    341                MT_ZdoMgmtDirectJoinRequest(pBuf);
    342                break;
    343          #endif
    344          
    345          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    346              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    347                MT_ZdoMgmtPermitJoinRequest(pBuf);
    348                break;
    349          #endif
    350          
    351          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    352              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    353                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    354                break;
    355          #endif
    356          
    357          #if defined ( ZDO_NETWORKSTART_REQUEST )
    358              case MT_ZDO_STARTUP_FROM_APP:
    359                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   0000A4                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0000A4   12....       LCALL     `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    360                break;
   \   0000A7   800C         SJMP      ??MT_ZdoCommandProcessing_21
    361          #endif
    362          
    363              case MT_ZDO_MSG_CB_REGISTER:
    364                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0000A9                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0000A9   12....       LCALL     `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    365                break;
   \   0000AC   8007         SJMP      ??MT_ZdoCommandProcessing_21
    366          
    367              case MT_ZDO_MSG_CB_REMOVE:
    368                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_18:
   \   0000AE                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0000AE   12....       LCALL     `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    369                break;
   \   0000B1   8002         SJMP      ??MT_ZdoCommandProcessing_21
    370          
    371              default:
    372                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000B3   7E02         MOV       R6,#0x2
    373                break;
    374            }
    375          
    376            return status;
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   F9           MOV       R1,A
   \   0000B7   02....       LJMP      ??Subroutine65_0 & 0xFFFF
    377          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    378          
    379          /***************************************************************************************************
    380           * @fn      MT_ZdoNwkAddrReq
    381           *
    382           * @brief   Handle a nwk address request.
    383           *
    384           * @param   pData  - MT message data
    385           *
    386           * @return  void
    387           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    390            uint8 cmdId;
    391            uint8 retValue;
    392            uint8 reqType;
    393            uint8 startIndex;
    394            uint8 *pExtAddr;
    395          
    396            /* parse header */
    397            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
    398            pBuf += MT_RPC_FRAME_HDR_SZ;
    399          
    400            /* parse parameters */
    401            pExtAddr = pBuf;
   \   000012   EA           MOV       A,R2
   \   000013   2403         ADD       A,#0x3
   \   000015   F5..         MOV       ?V0,A
   \   000017   E4           CLR       A
   \   000018   3B           ADDC      A,R3
   \   000019   F5..         MOV       ?V1,A
    402            pBuf += Z_EXTADDR_LEN;
   \   00001B   E5..         MOV       A,?V0
   \   00001D   2408         ADD       A,#0x8
   \   00001F   FA           MOV       R2,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V1
   \   000023   FB           MOV       R3,A
    403          
    404            /* Request type */
    405            reqType = *pBuf++;
    406          
    407            /* Start index */
    408            startIndex = *pBuf;
    409          
    410            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   000024                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000024   7D00         MOV       R5,#0x0
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FC           MOV       R4,A
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F9           MOV       R1,A
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   00003A                REQUIRE ?Subroutine1
   \   00003A                ; // Fall through to label ?Subroutine1
    411          
    412            /* Build and send back the response */
    413            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    414          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006   7401         MOV       A,#0x1
   \   000008   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000B   7F02         MOV       R7,#0x2
   \   00000D   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   EE           MOV       A,R6
   \   00000F   FA           MOV       R2,A
   \   000010   7965         MOV       R1,#0x65
   \   000012   22           RET
    415          
    416          /***************************************************************************************************
    417           * @fn      MT_ZdoIEEEAddrRequest
    418           *
    419           * @brief   Handle a IEEE address request.
    420           *
    421           * @param   pData  - MT message data
    422           *
    423           * @return  void
    424           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    426          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    427            uint8 cmdId;
    428            uint8 retValue;
    429            uint16 shortAddr;
    430            uint8 reqType;
    431            uint8 startIndex;
    432          
    433            /* parse header */
    434            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    435            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_120:
   \   00000D   5001         JNC       ??MT_ZdoIEEEAddrRequest_0
   \   00000F   0B           INC       R3
    436          
    437            /* Dev address */
    438            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    439            pBuf += 2;
    440          
    441            /* request type */
    442            reqType = *pBuf++;
    443          
    444            /* start index */
    445            startIndex = *pBuf;
    446          
    447            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000010   7D00         MOV       R5,#0x0
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FC           MOV       R4,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00002A   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00002D   80..         SJMP      ?Subroutine1
    448          
    449            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    450          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FB           MOV       R3,A
   \   000006   AA..         MOV       R2,?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FE           MOV       R6,A
   \   000008   EA           MOV       A,R2
   \   000009   2403         ADD       A,#0x3
   \   00000B   FA           MOV       R2,A
   \   00000C   22           RET
    451          
    452          /***************************************************************************************************
    453           * @fn      MT_ZdoNodeDescRequest
    454           *
    455           * @brief   Handle a Node Descriptor request.
    456           *
    457           * @param   pData  - MT message data
    458           *
    459           * @return  void
    460           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    462          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    463            uint8 cmdId;
    464            uint8 retValue;
    465            zAddrType_t destAddr;
    466            uint16 shortAddr;
    467          
    468            /* parse header */
    469            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    470            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_121:
   \   00000D   5001         JNC       ??MT_ZdoNodeDescRequest_0
   \   00000F   0B           INC       R3
    471          
    472            /* Destination address */
    473            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    474            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    475            pBuf += 2;
   \                     ??CrossCallReturnLabel_48:
   \   00001E   5001         JNC       ??MT_ZdoNodeDescRequest_1
   \   000020   0B           INC       R3
    476          
    477            /* Network address of interest */
    478            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    479            pBuf += 2;
    480          
    481            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7902         MOV       R1,#0x2
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000032   E9           MOV       A,R1
   \   000033   02....       LJMP      ??Subroutine62_0 & 0xFFFF
    482          
    483            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   2402         ADD       A,#0x2
   \   000008   FA           MOV       R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006   F9           MOV       R1,A
   \   000007   EC           MOV       A,R4
   \   000008   F8           MOV       R0,A
   \   000009   7401         MOV       A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   CA           XCH       A,R2
   \   000006   FB           MOV       R3,A
   \   000007   EC           MOV       A,R4
   \   000008   2A           ADD       A,R2
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   FD           MOV       R5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?XSTACK_DISP101_8
   \   000003   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000006                REQUIRE ??Subroutine63_0
   \   000006                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00000B   740A         MOV       A,#0xa
   \   00000D                REQUIRE ??Subroutine64_0
   \   00000D                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine65_0
   \   000003                ; // Fall through to label ??Subroutine65_0
    485          
    486          /***************************************************************************************************
    487           * @fn      MT_ZdoPowerDescRequest
    488           *
    489           * @brief   Handle a Power Descriptor request.
    490           *
    491           * @param   pData  - MT message data
    492           *
    493           * @return  void
    494           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    496          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    497            uint8 cmdId;
    498            uint8 retValue;
    499            zAddrType_t destAddr;
    500            uint16 shortAddr;
    501          
    502            /* parse header */
    503            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    504            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_122:
   \   00000D   5001         JNC       ??MT_ZdoPowerDescRequest_0
   \   00000F   0B           INC       R3
    505          
    506            /* Dev address */
    507            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    508            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    509            pBuf += 2;
   \                     ??CrossCallReturnLabel_49:
   \   00001E   5001         JNC       ??MT_ZdoPowerDescRequest_1
   \   000020   0B           INC       R3
    510          
    511            /* Network address of interest */
    512            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    513            pBuf += 2;
    514          
    515            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7903         MOV       R1,#0x3
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    516          
    517            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    518          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003                REQUIRE ??Subroutine62_0
   \   000003                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET
    519          
    520          /***************************************************************************************************
    521           * @fn      MT_ZdoSimpleDescRequest
    522           *
    523           * @brief   Handle a Simple Descriptor request.
    524           *
    525           * @param   pBuf  - MT message data
    526           *
    527           * @return  void
    528           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    530          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    531            uint8 cmdId;
    532            uint8 retValue;
    533            uint8 epInt;
    534            zAddrType_t destAddr;
    535            uint16 shortAddr;
    536          
    537            /* parse header */
    538            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    539            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_123:
   \   00000D   5001         JNC       ??MT_ZdoSimpleDescRequest_0
   \   00000F   0B           INC       R3
    540          
    541            /* Dev address */
    542            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    543            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_2:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    544            pBuf += 2;
   \                     ??CrossCallReturnLabel_50:
   \   00001E   5001         JNC       ??MT_ZdoSimpleDescRequest_1
   \   000020   0B           INC       R3
    545          
    546            /* Network address of interest */
    547            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    548            pBuf += 2;
    549          
    550            /* endpoint/interface */
    551            epInt = *pBuf++;
    552          
    553            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000034   12....       LCALL     ?XSTACK_DISP101_8
   \   000037   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00003A   02....       LJMP      ??Subroutine63_0 & 0xFFFF
    554          
    555            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    556          }
    557          
    558          /***************************************************************************************************
    559           * @fn      MT_ZdoActiveEpRequest
    560           *
    561           * @brief   Handle a Active EP request.
    562           *
    563           * @param   pBuf  - MT message data
    564           *
    565           * @return  void
    566           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    567          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    568          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    569            uint8 cmdId;
    570            uint8 retValue;
    571            zAddrType_t destAddr;
    572            uint16 shortAddr;
    573          
    574            /* parse header */
    575            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    576            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_124:
   \   00000D   5001         JNC       ??MT_ZdoActiveEpRequest_0
   \   00000F   0B           INC       R3
    577          
    578            /* Dev address */
    579            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    580            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    581            pBuf += 2;
   \                     ??CrossCallReturnLabel_51:
   \   00001E   5001         JNC       ??MT_ZdoActiveEpRequest_1
   \   000020   0B           INC       R3
    582          
    583            /* Network address of interest */
    584            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    585            pBuf += 2;
    586          
    587            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7905         MOV       R1,#0x5
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    588          
    589            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    590          }
    591          
    592          /***************************************************************************************************
    593           * @fn      MT_ZdoMatchDescRequest
    594           *
    595           * @brief   Handle a Match Descriptor request.
    596           *
    597           * @param   pBuf  - MT message data
    598           *
    599           * @return  void
    600           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV       A,#-0x4a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
    603            uint8 cmdId;
    604            uint8 retValue = 0;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   12....       LCALL     ?Subroutine37 & 0xFFFF
    605            uint8 i, numInClusters, numOutClusters;
    606            uint16 profileId;
    607            zAddrType_t destAddr;
    608            uint16 shortAddr;
    609            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    610          
    611            /* parse header */
    612            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_66:
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FE           MOV       R6,A
    613            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   E8           MOV       A,R0
   \   00001C   2403         ADD       A,#0x3
   \   00001E   F8           MOV       R0,A
   \   00001F   5001         JNC       ??MT_ZdoMatchDescRequest_0
   \   000021   09           INC       R1
    614          
    615            /* Dev address */
    616            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?Subroutine54 & 0xFFFF
    617            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_99:
   \   00002C   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00002F   FB           MOV       R3,A
   \   000030   EC           MOV       A,R4
   \   000031   FA           MOV       R2,A
   \   000032   7401         MOV       A,#0x1
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   EA           MOV       A,R2
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EB           MOV       A,R3
   \   00003B   F0           MOVX      @DPTR,A
    618            pBuf += 2;
   \   00003C   E8           MOV       A,R0
   \   00003D   2402         ADD       A,#0x2
   \   00003F   F8           MOV       R0,A
   \   000040   5001         JNC       ??MT_ZdoMatchDescRequest_1
   \   000042   09           INC       R1
    619          
    620            /* Network address of interest */
    621            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   12....       LCALL     ?Subroutine16 & 0xFFFF
    622            pBuf += 2;
   \                     ??CrossCallReturnLabel_20:
   \   00004A   E8           MOV       A,R0
   \   00004B   2402         ADD       A,#0x2
   \   00004D   F8           MOV       R0,A
   \   00004E   5001         JNC       ??MT_ZdoMatchDescRequest_2
   \   000050   09           INC       R1
    623          
    624            /* Profile ID */
    625            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   12....       LCALL     ?Subroutine17 & 0xFFFF
    626            pBuf += 2;
    627          
    628            /* NumInClusters */
    629            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_22:
   \   000058   8882         MOV       DPL,R0
   \   00005A   8983         MOV       DPH,R1
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FF           MOV       R7,A
   \   000060   E8           MOV       A,R0
   \   000061   2403         ADD       A,#0x3
   \   000063   F8           MOV       R0,A
   \   000064   5001         JNC       ??MT_ZdoMatchDescRequest_3
   \   000066   09           INC       R1
    630            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000067   EF           MOV       A,R7
   \   000068   C3           CLR       C
   \   000069   9411         SUBB      A,#0x11
   \   00006B   502F         JNC       ??MT_ZdoMatchDescRequest_4
    631            {
    632              /* IN clusters */
    633              for ( i = 0; i < numInClusters; i++ )
   \   00006D   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   000070   E5..         MOV       A,?V3
   \   000072   C3           CLR       C
   \   000073   9F           SUBB      A,R7
   \   000074   502F         JNC       ??MT_ZdoMatchDescRequest_6
    634              {
    635                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000076   8882         MOV       DPL,R0
   \   000078   8983         MOV       DPH,R1
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F5..         MOV       ?V4,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F5..         MOV       ?V1,A
   \   000081   E5..         MOV       A,?V4
   \   000083   2400         ADD       A,#0x0
   \   000085   E4           CLR       A
   \   000086   35..         ADDC      A,?V1
   \   000088   F5..         MOV       ?V5,A
   \   00008A   12....       LCALL     ?Subroutine42 & 0xFFFF
    636                pBuf += 2;
    637              }
   \                     ??CrossCallReturnLabel_76:
   \   00008D   742A         MOV       A,#0x2a
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000095   5001         JNC       ??MT_ZdoMatchDescRequest_7
   \   000097   09           INC       R1
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000098   05..         INC       ?V3
   \   00009A   80D4         SJMP      ??MT_ZdoMatchDescRequest_5
    638            }
    639            else
    640            {
    641              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   7480         MOV       A,#-0x80
   \   0000A4   F0           MOVX      @DPTR,A
    642            }
    643          
    644            /* NumOutClusters */
    645            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   8983         MOV       DPH,R1
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   A882         MOV       R0,DPL
   \   0000AF   A983         MOV       R1,DPH
    646            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   0000B1   C3           CLR       C
   \   0000B2   9411         SUBB      A,#0x11
   \   0000B4   5023         JNC       ??MT_ZdoMatchDescRequest_8
    647            {
    648              /* OUT Clusters */
    649              for ( i = 0; i < numOutClusters; i++ )
   \   0000B6   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   0000B9   E5..         MOV       A,?V3
   \   0000BB   C3           CLR       C
   \   0000BC   95..         SUBB      A,?V2
   \   0000BE   5023         JNC       ??MT_ZdoMatchDescRequest_10
    650              {
    651                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   0000C0   8882         MOV       DPL,R0
   \   0000C2   8983         MOV       DPH,R1
   \   0000C4   12....       LCALL     ?Subroutine48 & 0xFFFF
    652                pBuf += 2;
    653              }
   \                     ??CrossCallReturnLabel_89:
   \   0000C7   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000CA   740A         MOV       A,#0xa
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000D2   5001         JNC       ??MT_ZdoMatchDescRequest_11
   \   0000D4   09           INC       R1
   \                     ??MT_ZdoMatchDescRequest_11:
   \   0000D5   05..         INC       ?V3
   \   0000D7   80E0         SJMP      ??MT_ZdoMatchDescRequest_9
    654            }
    655            else
    656            {
    657              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   7480         MOV       A,#-0x80
   \   0000E1   8055         SJMP      ??MT_ZdoMatchDescRequest_12
    658            }
    659          
    660            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   0000E3   85..82       MOV       DPL,?XSP + 0
   \   0000E6   85..83       MOV       DPH,?XSP + 1
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   704D         JNZ       ??MT_ZdoMatchDescRequest_13
    661            {
    662              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    663                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000EC                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000EC   75..00       MOV       ?V0,#0x0
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F4   740B         MOV       A,#0xb
   \   0000F6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F9   88..         MOV       ?V0,R0
   \   0000FB   89..         MOV       ?V1,R1
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000102   E5..         MOV       A,?V2
   \   000104   F5..         MOV       ?V0,A
   \   000106   78..         MOV       R0,#?V0
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010B   742E         MOV       A,#0x2e
   \   00010D   12....       LCALL     ?XSTACK_DISP100_8
   \   000110   88..         MOV       ?V0,R0
   \   000112   89..         MOV       ?V1,R1
   \   000114   78..         MOV       R0,#?V0
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   8A..         MOV       ?V0,R2
   \   00011B   8B..         MOV       ?V1,R3
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000122   EF           MOV       A,R7
   \   000123   F9           MOV       R1,A
   \   000124   7409         MOV       A,#0x9
   \   000126   12....       LCALL     ?XSTACK_DISP101_8
   \   000129   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   00012C   7408         MOV       A,#0x8
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000131   E9           MOV       A,R1
   \   000132   85..82       MOV       DPL,?XSP + 0
   \   000135   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   000138   F0           MOVX      @DPTR,A
    664            }
    665          
    666            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   000139                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000139   AC..         MOV       R4,?XSP + 0
   \   00013B   AD..         MOV       R5,?XSP + 1
   \   00013D   7B01         MOV       R3,#0x1
   \   00013F   EE           MOV       A,R6
   \   000140   FA           MOV       R2,A
   \   000141   7965         MOV       R1,#0x65
   \   000143   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    667          }
   \   000146   744A         MOV       A,#0x4a
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B                REQUIRE ?Subroutine2
   \   00014B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E5..         MOV       A,?V3
   \   000002   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   E8           MOV       A,R0
   \   000004   2402         ADD       A,#0x2
   \   000006   F8           MOV       R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V0
   \   000004   F582         MOV       DPL,A
   \   000006   E583         MOV       A,DPH
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C   E5..         MOV       A,?V4
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E5..         MOV       A,?V5
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V0,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   E5..         MOV       A,?V0
   \   000009   F5..         MOV       ?V4,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    668          
    669          /***************************************************************************************************
    670           * @fn      MT_ZdoComplexDescRequest
    671           *
    672           * @brief   Handle a Complex Descriptor request.
    673           *
    674           * @param   pBuf  - MT message data
    675           *
    676           * @return  void
    677           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    679          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    680            uint8 cmdId;
    681            uint8 retValue;
    682            zAddrType_t destAddr;
    683            uint16 shortAddr;
    684          
    685            /* parse header */
    686            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    687            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_125:
   \   00000D   5001         JNC       ??MT_ZdoComplexDescRequest_0
   \   00000F   0B           INC       R3
    688          
    689            /* Dev address */
    690            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    691            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_4:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    692            pBuf += 2;
   \                     ??CrossCallReturnLabel_52:
   \   00001E   5001         JNC       ??MT_ZdoComplexDescRequest_1
   \   000020   0B           INC       R3
    693          
    694            /* Network address of interest */
    695            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    696            pBuf += 2;
    697          
    698            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7910         MOV       R1,#0x10
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    699          
    700            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    701          }
    702          
    703          /***************************************************************************************************
    704           * @fn      MT_ZdoUserDescRequest
    705           *
    706           * @brief   Handle a User Descriptor request.
    707           *
    708           * @param   pBuf  - MT message data
    709           *
    710           * @return  void
    711           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    713          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    714            uint8 cmdId;
    715            uint8 retValue;
    716            zAddrType_t destAddr;
    717            uint16 shortAddr;
    718          
    719            /* parse header */
    720            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    721            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_126:
   \   00000D   5001         JNC       ??MT_ZdoUserDescRequest_0
   \   00000F   0B           INC       R3
    722          
    723            /* Dev address */
    724            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
    725            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    726            pBuf += 2;
   \                     ??CrossCallReturnLabel_53:
   \   00001E   5001         JNC       ??MT_ZdoUserDescRequest_1
   \   000020   0B           INC       R3
    727          
    728            /* Network address of interest */
    729            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    730            pBuf += 2;
    731          
    732            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7911         MOV       R1,#0x11
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    733          
    734            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    735          }
    736          
    737          /***************************************************************************************************
    738           * @fn      MT_ZdoEndDevAnnce
    739           *
    740           * @brief   Handle a End Device Announce Descriptor request.
    741           *
    742           * @param   pBuf  - MT message data
    743           *
    744           * @return  void
    745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    747          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FC           MOV       R4,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FD           MOV       R5,A
    748            uint8 cmdId;
    749            uint8 retValue;
    750            uint16 shortAddr;
    751            uint8 *pIEEEAddr;
    752          
    753            /* parse header */
    754            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV       DPL,R4
   \   000010   8D83         MOV       DPH,R5
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
    755            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV       A,R4
   \   000017   2403         ADD       A,#0x3
   \   000019   FC           MOV       R4,A
   \   00001A   5001         JNC       ??MT_ZdoEndDevAnnce_0
   \   00001C   0D           INC       R5
    756          
    757            /* network address */
    758            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   00001D   8C82         MOV       DPL,R4
   \   00001F   8D83         MOV       DPH,R5
   \   000021   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   FB           MOV       R3,A
    759            pBuf += 2;
   \   000027   EC           MOV       A,R4
   \   000028   2402         ADD       A,#0x2
   \   00002A   FC           MOV       R4,A
   \   00002B   5001         JNC       ??MT_ZdoEndDevAnnce_1
   \   00002D   0D           INC       R5
    760          
    761            /* extended address */
    762            pIEEEAddr = pBuf;
    763            pBuf += Z_EXTADDR_LEN;
    764          
    765            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_1:
   \   00002E                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00002E   88..         MOV       ?V0,R0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   8C82         MOV       DPL,R4
   \   000037   8D83         MOV       DPH,R5
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP      ?Subroutine5 & 0xFFFF
    766          
    767            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    768          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine66_0
   \   000002                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   28           ADD       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006                REQUIRE ??Subroutine68_0
   \   000006                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    769          
    770          /***************************************************************************************************
    771           * @fn      MT_ZdoUserDescSet
    772           *
    773           * @brief   Handle a User Descriptor Set.
    774           *
    775           * @param   pBuf  - MT message data
    776           *
    777           * @return  void
    778           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV       A,#-0x1b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    781            uint8 cmdId;
    782            uint8 retValue;
    783            zAddrType_t destAddr;
    784            uint16 shortAddr;
    785            UserDescriptorFormat_t userDesc;
    786          
    787            /* parse header */
    788            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V3,A
    789            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_ZdoUserDescSet_0
   \   000019   0B           INC       R3
    790          
    791            /* Dev address */
    792            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   00001A   7409         MOV       A,#0x9
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine6 & 0xFFFF
    793            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_6:
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine31 & 0xFFFF
    794            pBuf += 2;
   \                     ??CrossCallReturnLabel_54:
   \   000028   5001         JNC       ??MT_ZdoUserDescSet_1
   \   00002A   0B           INC       R3
    795          
    796            /* Network address of interest */
    797            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   00002B   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00002E   FE           MOV       R6,A
   \   00002F   E4           CLR       A
   \   000030   39           ADDC      A,R1
   \   000031   FF           MOV       R7,A
    798            pBuf += 2;
    799          
    800            /* User descriptor */
    801            userDesc.len = *pBuf++;
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C0E0         PUSH      A
   \   00003B   740A         MOV       A,#0xa
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
    802            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A982         MOV       R1,DPL
   \   00004C   AA83         MOV       R2,DPH
   \   00004E   89..         MOV       ?V0,R1
   \   000050   8A..         MOV       ?V1,R2
   \   000052   88..         MOV       ?V2,R0
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   740D         MOV       A,#0xd
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FC           MOV       R4,A
   \   000060   7D00         MOV       R5,#0x0
   \   000062   740E         MOV       A,#0xe
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
   \   00006B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    803            pBuf += 16;
    804          
    805            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000073                ; Setup parameters for call to function ZDP_UserDescSet
   \   000073   740A         MOV       A,#0xa
   \   000075   12....       LCALL     ?XSTACK_DISP100_8
   \   000078   88..         MOV       ?V0,R0
   \   00007A   89..         MOV       ?V1,R1
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7900         MOV       R1,#0x0
   \   000083   EE           MOV       A,R6
   \   000084   FC           MOV       R4,A
   \   000085   EF           MOV       A,R7
   \   000086   FD           MOV       R5,A
   \   000087   7403         MOV       A,#0x3
   \   000089   12....       LCALL     ?XSTACK_DISP101_8
   \   00008C   12....       LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   12....       LCALL     ?Subroutine36 & 0xFFFF
    806          
    807            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_64:
   \   000097   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    808          }
   \   00009A   741B         MOV       A,#0x1b
   \   00009C                REQUIRE ?Subroutine3
   \   00009C                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   AA..         MOV       R2,?V3
   \   000010   7965         MOV       R1,#0x65
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EC           MOV       A,R4
   \   000008   28           ADD       A,R0
   \   000009   22           RET
    809          
    810          /***************************************************************************************************
    811           * @fn      MT_ZdoServiceDiscRequest
    812           *
    813           * @brief   Handle a Server Discovery request.
    814           *
    815           * @param   pBuf  - MT message data
    816           *
    817           * @return  void
    818           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    820          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    821            uint8 cmdId;
    822            uint8 retValue;
    823            uint16 serviceMask;
    824          
    825            /* parse header */
    826            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    827            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_127:
   \   00000D   5001         JNC       ??MT_ZdoServiceDiscRequest_0
   \   00000F   0B           INC       R3
    828          
    829            /* Service Mask */
    830            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    831            pBuf += 2;
    832          
    833            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000010   7900         MOV       R1,#0x0
   \   000012   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000015   FB           MOV       R3,A
   \   000016   EC           MOV       A,R4
   \   000017   FA           MOV       R2,A
   \   000018   12....       LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   00001B   02....       LJMP      ?Subroutine5 & 0xFFFF
    834          
    835            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    836          }
    837          
    838          /***************************************************************************************************
    839           * @fn      MT_ZdoEndDevBindRequest
    840           *
    841           * @brief   Handle a End Device Bind request.
    842           *
    843           * @param   pBuf  - MT message data
    844           *
    845           * @return  void
    846           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    847          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    848          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV       A,#-0x46
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    849            uint8 cmdId;
    850            uint8 retValue = 0;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    851            uint8 i, epInt, numInClusters, numOutClusters;
    852            zAddrType_t destAddr;
    853            uint16 shortAddr;
    854            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    855          
    856            /* parse header */
    857            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_139:
   \   000018   F5..         MOV       ?V6,A
    858            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001A   EE           MOV       A,R6
   \   00001B   2403         ADD       A,#0x3
   \   00001D   FE           MOV       R6,A
   \   00001E   5001         JNC       ??MT_ZdoEndDevBindRequest_0
   \   000020   0F           INC       R7
    859          
    860            /* Dev address */
    861            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ??Subroutine70_0 & 0xFFFF
    862            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_143:
   \   00002B   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E8           MOV       A,R0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   E9           MOV       A,R1
   \   000035   F0           MOVX      @DPTR,A
    863            pBuf += 2;
   \   000036   EE           MOV       A,R6
   \   000037   2402         ADD       A,#0x2
   \   000039   FE           MOV       R6,A
   \   00003A   5001         JNC       ??MT_ZdoEndDevBindRequest_1
   \   00003C   0F           INC       R7
    864          
    865            /* Local coordinator of the binding */
    866            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000044   FC           MOV       R4,A
   \   000045   E4           CLR       A
   \   000046   39           ADDC      A,R1
   \   000047   FD           MOV       R5,A
    867            pBuf += 2;
    868          
    869            /* For now, skip past the extended address */
    870            pBuf += Z_EXTADDR_LEN;
    871          
    872            /* Endpoint */
    873            epInt = *pBuf++;
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   EE           MOV       A,R6
   \   000059   240B         ADD       A,#0xb
   \   00005B   FE           MOV       R6,A
   \   00005C   5001         JNC       ??MT_ZdoEndDevBindRequest_2
   \   00005E   0F           INC       R7
    874          
    875            /* Profile ID */
    876            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   12....       LCALL     ?Subroutine17 & 0xFFFF
    877            pBuf += 2;
    878          
    879            /* NumInClusters */
    880            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_23:
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F5..         MOV       ?V2,A
   \   00006F   EE           MOV       A,R6
   \   000070   2403         ADD       A,#0x3
   \   000072   FE           MOV       R6,A
   \   000073   5001         JNC       ??MT_ZdoEndDevBindRequest_3
   \   000075   0F           INC       R7
    881            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000076   E5..         MOV       A,?V2
   \   000078   C3           CLR       C
   \   000079   9410         SUBB      A,#0x10
   \   00007B   5019         JNC       ??MT_ZdoEndDevBindRequest_4
    882            {
    883              for ( i = 0; i < numInClusters; i++ )
   \   00007D   7800         MOV       R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00007F   E8           MOV       A,R0
   \   000080   C3           CLR       C
   \   000081   95..         SUBB      A,?V2
   \   000083   501A         JNC       ??MT_ZdoEndDevBindRequest_6
    884              {
    885                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000085   12....       LCALL     ?Subroutine10 & 0xFFFF
    886                pBuf += 2;
    887              }
   \                     ??CrossCallReturnLabel_11:
   \   000088   7428         MOV       A,#0x28
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000090   5001         JNC       ??MT_ZdoEndDevBindRequest_7
   \   000092   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000093   08           INC       R0
   \   000094   80E9         SJMP      ??MT_ZdoEndDevBindRequest_5
    888            }
    889            else
    890            {
    891              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   7480         MOV       A,#-0x80
   \   00009E   F0           MOVX      @DPTR,A
    892            }
    893          
    894            /* NumOutClusters */
    895            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F5..         MOV       ?V3,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   AE82         MOV       R6,DPL
   \   0000A9   AF83         MOV       R7,DPH
    896            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000AB   C3           CLR       C
   \   0000AC   9410         SUBB      A,#0x10
   \   0000AE   5019         JNC       ??MT_ZdoEndDevBindRequest_8
    897            {
    898              for ( i = 0; i < numOutClusters; i++ )
   \   0000B0   7800         MOV       R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   0000B2   E8           MOV       A,R0
   \   0000B3   C3           CLR       C
   \   0000B4   95..         SUBB      A,?V3
   \   0000B6   501B         JNC       ??MT_ZdoEndDevBindRequest_10
    899              {
    900                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000B8   12....       LCALL     ?Subroutine10 & 0xFFFF
    901                pBuf += 2;
    902              }
   \                     ??CrossCallReturnLabel_12:
   \   0000BB   740A         MOV       A,#0xa
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000C3   5001         JNC       ??MT_ZdoEndDevBindRequest_11
   \   0000C5   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000C6   08           INC       R0
   \   0000C7   80E9         SJMP      ??MT_ZdoEndDevBindRequest_9
    903            }
    904            else
    905            {
    906              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   7480         MOV       A,#-0x80
   \   0000D1   805C         SJMP      ??MT_ZdoEndDevBindRequest_12
    907            }
    908          
    909            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000D3   85..82       MOV       DPL,?XSP + 0
   \   0000D6   85..83       MOV       DPH,?XSP + 1
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   7054         JNZ       ??MT_ZdoEndDevBindRequest_13
    910            {
    911              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    912                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000DC                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000DC   75..00       MOV       ?V0,#0x0
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E4   740B         MOV       A,#0xb
   \   0000E6   12....       LCALL     ?XSTACK_DISP103_8
   \   0000E9   8E..         MOV       ?V0,R6
   \   0000EB   8F..         MOV       ?V1,R7
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F2   E5..         MOV       A,?V3
   \   0000F4   F5..         MOV       ?V0,A
   \   0000F6   78..         MOV       R0,#?V0
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FB   742C         MOV       A,#0x2c
   \   0000FD   12....       LCALL     ?XSTACK_DISP103_8
   \   000100   8E..         MOV       ?V0,R6
   \   000102   8F..         MOV       ?V1,R7
   \   000104   78..         MOV       R0,#?V0
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   E5..         MOV       A,?V2
   \   00010B   F5..         MOV       ?V0,A
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   8A..         MOV       ?V0,R2
   \   000114   8B..         MOV       ?V1,R3
   \   000116   78..         MOV       R0,#?V0
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   740A         MOV       A,#0xa
   \   00011D   12....       LCALL     ?XSTACK_DISP101_8
   \   000120   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000123   7409         MOV       A,#0x9
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   \   000128   E9           MOV       A,R1
   \   000129   85..82       MOV       DPL,?XSP + 0
   \   00012C   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   00012F   F0           MOVX      @DPTR,A
    913            }
    914          
    915            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   000130                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000130   AC..         MOV       R4,?XSP + 0
   \   000132   AD..         MOV       R5,?XSP + 1
   \   000134   7B01         MOV       R3,#0x1
   \   000136   AA..         MOV       R2,?V6
   \   000138   7965         MOV       R1,#0x65
   \   00013A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    916          }
   \   00013D   7446         MOV       A,#0x46
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142   7F07         MOV       R7,#0x7
   \   000144   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   EE           MOV       A,R6
   \   000004   2402         ADD       A,#0x2
   \   000006   FE           MOV       R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000007   E8           MOV       A,R0
   \   000008   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   7401         MOV       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET
    917          
    918          /***************************************************************************************************
    919           * @fn      MT_ZdoBindRequest
    920           *
    921           * @brief   Handle a Bind request.
    922           *
    923           * @param   pBuf  - MT message data
    924           *
    925           * @return  void
    926           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    927          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
    928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
    929            uint8 cmdId;
    930            uint8 retValue;
    931            zAddrType_t destAddr, devAddr;
    932            uint8 *pSrcAddr, *ptr;
    933            uint8 srcEPInt, dstEPInt;
    934            uint16 clusterID;
    935          
    936            /* parse header */
    937            cmdId = pBuf[MT_RPC_POS_CMD1];
    938            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_38:
   \   00000D   5002         JNC       ??MT_ZdoBindRequest_0
   \   00000F   05..         INC       ?V1
    939          
    940            /* Dev address */
    941            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000011   7412         MOV       A,#0x12
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine24 & 0xFFFF
    942            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_36:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine7 & 0xFFFF
    943            pBuf += 2;
    944          
    945            /* SrcAddress */
    946            pSrcAddr = pBuf;
    947            pBuf += Z_EXTADDR_LEN;
    948          
    949            /* SrcEPInt */
    950            srcEPInt = *pBuf++;
    951          
    952            /* ClusterID */
    953            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    954            pBuf += 2;
    955          
    956            /* Destination Address mode */
    957            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_7:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   E5..         MOV       A,?V0
   \   000026   2403         ADD       A,#0x3
   \   000028   F5..         MOV       ?V0,A
   \   00002A   5002         JNC       ??MT_ZdoBindRequest_1
   \   00002C   05..         INC       ?V1
    958          
    959            /* Destination Address */
    960            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002E   7403         MOV       A,#0x3
   \   000030   68           XRL       A,R0
   \   000031   700E         JNZ       ??MT_ZdoBindRequest_2
    961            {
    962              ptr = pBuf;
    963              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP      ??MT_ZdoBindRequest_3
    964            }
    965            else
    966            {
    967              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_2:
   \   000041   12....       LCALL     ?Subroutine13 & 0xFFFF
    968            }
   \                     ??CrossCallReturnLabel_135:
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E8           MOV       A,R0
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   F0           MOVX      @DPTR,A
    969            /* The short address occupies LSB two bytes */
    970            pBuf += Z_EXTADDR_LEN;
    971          
    972            /* DstEPInt */
    973            dstEPInt = *pBuf;
    974          
    975            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV       ?V4,#0x0
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V0,R0
   \   000071   89..         MOV       ?V1,R1
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV       ?V0,R6
   \   00007A   8F..         MOV       ?V1,R7
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V6
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V2
   \   000088   7412         MOV       A,#0x12
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   7A21         MOV       R2,#0x21
   \   00008F                REQUIRE ?Subroutine4
   \   00008F                ; // Fall through to label ?Subroutine4
    976          
    977            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV       A,#0x8
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00000D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000010   7413         MOV       A,#0x13
   \   000012   12....       LCALL     ?DEALLOC_XSTACK8
   \   000015   7F08         MOV       R7,#0x8
   \   000017   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8B..         MOV       ?V1,R3
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   EA           MOV       A,R2
   \   00000C   2403         ADD       A,#0x3
   \   00000E   F5..         MOV       ?V0,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FA           MOV       R2,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   EA           MOV       A,R2
   \   00000F   F8           MOV       R0,A
   \   000010   740A         MOV       A,#0xa
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E5..         MOV       A,?V0
   \   000007   2402         ADD       A,#0x2
   \   000009   F5..         MOV       ?V6,A
   \   00000B   E4           CLR       A
   \   00000C   35..         ADDC      A,?V1
   \   00000E   F5..         MOV       ?V7,A
   \   000010   E5..         MOV       A,?V6
   \   000012   2408         ADD       A,#0x8
   \   000014   F5..         MOV       ?V0,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V7
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   8582..       MOV       ?V0,DPL
   \   000025   8583..       MOV       ?V1,DPH
   \   000028   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00002B   FE           MOV       R6,A
   \   00002C   E4           CLR       A
   \   00002D   39           ADDC      A,R1
   \   00002E   FF           MOV       R7,A
   \   00002F   85..82       MOV       DPL,?V0
   \   000032   85..83       MOV       DPH,?V1
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   7409         MOV       A,#0x9
   \   00003B   22           RET
    979          
    980          /***************************************************************************************************
    981           * @fn      MT_ZdoUnbindRequest
    982           *
    983           * @brief   Handle a Unbind request.
    984           *
    985           * @param   pBuf  - MT message data
    986           *
    987           * @return  void
    988           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    989          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
    990          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
    991            uint8 cmdId;
    992            uint8 retValue;
    993            zAddrType_t destAddr, devAddr;
    994            uint8 *pSrcAddr, *ptr;
    995            uint8 srcEPInt, dstEPInt;
    996            uint16 clusterID;
    997          
    998            /* parse header */
    999            cmdId = pBuf[MT_RPC_POS_CMD1];
   1000            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_39:
   \   00000D   5002         JNC       ??MT_ZdoUnbindRequest_0
   \   00000F   05..         INC       ?V1
   1001          
   1002            /* dev address */
   1003            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000011   7412         MOV       A,#0x12
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine24 & 0xFFFF
   1004            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_37:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine7 & 0xFFFF
   1005            pBuf += 2;
   1006          
   1007            /* SrcAddress */
   1008            pSrcAddr = pBuf;
   1009            pBuf += Z_EXTADDR_LEN;
   1010          
   1011            /* SrcEPInt */
   1012            srcEPInt = *pBuf++;
   1013          
   1014            /* ClusterID */
   1015            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1016            pBuf += 2;
   1017          
   1018            /* Destination Address mode */
   1019            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_8:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   E5..         MOV       A,?V0
   \   000026   2403         ADD       A,#0x3
   \   000028   F5..         MOV       ?V0,A
   \   00002A   5002         JNC       ??MT_ZdoUnbindRequest_1
   \   00002C   05..         INC       ?V1
   1020          
   1021            /* Destination Address */
   1022            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002E   7403         MOV       A,#0x3
   \   000030   68           XRL       A,R0
   \   000031   700E         JNZ       ??MT_ZdoUnbindRequest_2
   1023            {
   1024              ptr = pBuf;
   1025              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP      ??MT_ZdoUnbindRequest_3
   1026            }
   1027            else
   1028            {
   1029              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000041   12....       LCALL     ?Subroutine13 & 0xFFFF
   1030            }
   \                     ??CrossCallReturnLabel_136:
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E8           MOV       A,R0
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   F0           MOVX      @DPTR,A
   1031            /* The short address occupies LSB two bytes */
   1032            pBuf += Z_EXTADDR_LEN;
   1033          
   1034            /* dstEPInt */
   1035            dstEPInt = *pBuf;
   1036          
   1037            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV       ?V4,#0x0
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V0,R0
   \   000071   89..         MOV       ?V1,R1
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV       ?V0,R6
   \   00007A   8F..         MOV       ?V1,R7
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V6
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V2
   \   000088   7412         MOV       A,#0x12
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   7A22         MOV       R2,#0x22
   \   00008F   02....       LJMP      ?Subroutine4 & 0xFFFF
   1038          
   1039            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1040          }
   1041          
   1042          #if defined (MT_SYS_KEY_MANAGEMENT)
   1043          /***************************************************************************************************
   1044           * @fn      MT_ZdoSetLinkKey
   1045           *
   1046           * @brief   Set an application or trust center link key.
   1047           *
   1048           * @param   pBuf  - MT message data
   1049           *
   1050           * @return  void
   1051           ***************************************************************************************************/
   1052          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1053          {
   1054            uint8 cmdId;
   1055            uint8 retValue;
   1056            uint8 *pExtAddr;
   1057            uint8 *pKey;
   1058            uint16 shortAddr;
   1059          
   1060            /* parse header */
   1061            cmdId = pBuf[MT_RPC_POS_CMD1];
   1062            pBuf += MT_RPC_FRAME_HDR_SZ;
   1063          
   1064            /* ShortAddr */
   1065            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1066            pBuf += 2;
   1067          
   1068            /* Extended Addr */
   1069            pExtAddr = pBuf;
   1070            pBuf += Z_EXTADDR_LEN;
   1071          
   1072            /* Key data */
   1073            pKey = pBuf;
   1074          
   1075            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1076          
   1077            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1078          }
   1079          
   1080          /***************************************************************************************************
   1081           * @fn      MT_ZdoRemoveLinkKey
   1082           *
   1083           * @brief   Remove an application or trust center link key.
   1084           *
   1085           * @param   pBuf  - MT message data
   1086           *
   1087           * @return  void
   1088           ***************************************************************************************************/
   1089          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1090          {
   1091            uint8 cmdId;
   1092            uint8 retValue;
   1093            uint8 *pExtAddr;
   1094          
   1095            /* parse header */
   1096            cmdId = pBuf[MT_RPC_POS_CMD1];
   1097            pBuf += MT_RPC_FRAME_HDR_SZ;
   1098          
   1099            /* ShortAddr */
   1100            pExtAddr = pBuf;
   1101          
   1102            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1103          
   1104            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1105          }
   1106          
   1107          /***************************************************************************************************
   1108           * @fn      MT_ZdoGetLinkKey
   1109           *
   1110           * @brief   Get the application link key.
   1111           *
   1112           * @param   pBuf  - MT message data
   1113           *
   1114           * @return  void
   1115           ***************************************************************************************************/
   1116          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1117          {
   1118            uint8 cmdId;
   1119            uint8 retValue;
   1120            uint8 *pExtAddr;
   1121            uint8 *retBuf = NULL;
   1122            uint8 len;
   1123            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1124            uint16 apsLinkKeyNvId;
   1125          
   1126            // parse header
   1127            cmdId = pBuf[MT_RPC_POS_CMD1];
   1128            pBuf += MT_RPC_FRAME_HDR_SZ;
   1129          
   1130            // Extended Address
   1131            pExtAddr = pBuf;
   1132          
   1133            // Fetch the key NV ID
   1134            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1135          
   1136            if (retValue == ZSuccess)
   1137            {
   1138              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1139              {
   1140                // retrieve key from NV
   1141                if (osal_nv_read( apsLinkKeyNvId, 0,
   1142                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1143                {
   1144                  retValue = ZNwkUnknownDevice;
   1145                }
   1146              }
   1147              else
   1148              {
   1149                retValue = ZNwkUnknownDevice;
   1150              }
   1151            }
   1152          
   1153            // Construct the response message
   1154            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1155            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1156            {
   1157              if (retValue == ZSuccess)
   1158              {
   1159                // Extended Address
   1160                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1161          
   1162                // Key data
   1163                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1164              }
   1165              else
   1166              {
   1167                // Failed case - set the rest fields to all FF
   1168                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1169              }
   1170          
   1171              retBuf[0] = retValue;  // Status
   1172          
   1173              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1174          
   1175              // clear retBuf because it contains key data and free allocated memory
   1176              osal_memset(retBuf, 0x00, len);
   1177          
   1178              osal_mem_free(retBuf);
   1179            }
   1180          
   1181            // clear copy of key in RAM
   1182            if (pApsLinkKey != NULL)
   1183            {
   1184              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1185          
   1186              osal_mem_free(pApsLinkKey);
   1187            }
   1188          
   1189            return;
   1190          }
   1191          #endif // MT_SYS_KEY_MANAGEMENT
   1192          
   1193          #if defined (MT_ZDO_MGMT)
   1194          /***************************************************************************************************
   1195           * @fn      MT_ZdoMgmtNwkDiscRequest
   1196           *
   1197           * @brief   Handle a Mgmt Nwk Discovery request.
   1198           *
   1199           * @param   pBuf  - MT message data
   1200           *
   1201           * @return  void
   1202           ***************************************************************************************************/
   1203          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1204          {
   1205            uint8 cmdId;
   1206            uint8 retValue;
   1207            zAddrType_t destAddr;
   1208            uint32 scanChannels;
   1209            uint8 scanDuration, startIndex;
   1210          
   1211            /* parse header */
   1212            cmdId = pBuf[MT_RPC_POS_CMD1];
   1213            pBuf += MT_RPC_FRAME_HDR_SZ;
   1214          
   1215            /* Dev address */
   1216            destAddr.addrMode = Addr16Bit;
   1217            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1218            pBuf += 2;
   1219          
   1220            /* Scan Channels */
   1221            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1222            pBuf += 4;
   1223          
   1224            /* Scan Duration */
   1225            scanDuration = *pBuf++;
   1226          
   1227            /* Start Index */
   1228            startIndex = *pBuf;
   1229          
   1230            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1231          
   1232            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1233          }
   1234          
   1235          /***************************************************************************************************
   1236           * @fn      MT_ZdoMgmtLqiRequest
   1237           *
   1238           * @brief   Handle a Mgmt Lqi request.
   1239           *
   1240           * @param   pBuf  - MT message data
   1241           *
   1242           * @return  void
   1243           ***************************************************************************************************/
   1244          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1245          {
   1246            uint8 cmdId;
   1247            uint8 retValue;
   1248            zAddrType_t destAddr;
   1249            uint8 startIndex;
   1250          
   1251            /* parse header */
   1252            cmdId = pBuf[MT_RPC_POS_CMD1];
   1253            pBuf += MT_RPC_FRAME_HDR_SZ;
   1254          
   1255            /* Dev address */
   1256            destAddr.addrMode = Addr16Bit;
   1257            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1258            pBuf += 2;
   1259          
   1260            /* Start Index */
   1261            startIndex = *pBuf;
   1262          
   1263            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1264          
   1265            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1266          }
   1267          
   1268          /***************************************************************************************************
   1269           * @fn      MT_ZdoMgmtRtgRequest
   1270           *
   1271           * @brief   Handle a Mgmt Rtg request.
   1272           *
   1273           * @param   pBuf  - MT message data
   1274           *
   1275           * @return  void
   1276           ***************************************************************************************************/
   1277          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1278          {
   1279            uint8 cmdId;
   1280            uint8 retValue;
   1281            zAddrType_t destAddr;
   1282            uint8 startIndex;
   1283          
   1284            /* parse header */
   1285            cmdId = pBuf[MT_RPC_POS_CMD1];
   1286            pBuf += MT_RPC_FRAME_HDR_SZ;
   1287          
   1288            /* Dev Address */
   1289            destAddr.addrMode = Addr16Bit;
   1290            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1291            pBuf += 2;
   1292          
   1293            /* Start Index */
   1294            startIndex = *pBuf;
   1295          
   1296            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1297          
   1298            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1299          }
   1300          
   1301          /***************************************************************************************************
   1302           * @fn      MT_ZdoMgmtBindRequest
   1303           *
   1304           * @brief   Handle a Mgmt Bind request.
   1305           *
   1306           * @param   pBuf  - MT message data
   1307           *
   1308           * @return  void
   1309           ***************************************************************************************************/
   1310          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1311          {
   1312            uint8 cmdId;
   1313            uint8 retValue;
   1314            zAddrType_t destAddr;
   1315            uint8 startIndex;
   1316          
   1317            /* parse header */
   1318            cmdId = pBuf[MT_RPC_POS_CMD1];
   1319            pBuf += MT_RPC_FRAME_HDR_SZ;
   1320          
   1321            /* Dev Address */
   1322            destAddr.addrMode = Addr16Bit;
   1323            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1324            pBuf += 2;
   1325          
   1326            /* Start Index */
   1327            startIndex = *pBuf;
   1328          
   1329            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1330          
   1331            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1332          }
   1333          
   1334          /***************************************************************************************************
   1335           * @fn      MT_ZdoMgmtLeaveRequest
   1336           *
   1337           * @brief   Handle a Mgmt Leave request.
   1338           *
   1339           * @param   pBuf  - MT message data
   1340           *
   1341           * @return  void
   1342           ***************************************************************************************************/
   1343          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1344          {
   1345            uint8 cmdId;
   1346            uint8 retValue;
   1347            zAddrType_t destAddr;
   1348            uint8 *pIEEEAddr;
   1349            uint8 removeChildren, rejoin;
   1350          
   1351            /* parse header */
   1352            cmdId = pBuf[MT_RPC_POS_CMD1];
   1353            pBuf += MT_RPC_FRAME_HDR_SZ;
   1354          
   1355            /* Destination Address */
   1356            destAddr.addrMode = Addr16Bit;
   1357            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1358            pBuf += 2;
   1359          
   1360            /* IEEE address */
   1361            pIEEEAddr = pBuf;
   1362            pBuf += Z_EXTADDR_LEN;
   1363          
   1364            /* Remove Children */
   1365            removeChildren = *pBuf++;
   1366          
   1367            /* Rejoin */
   1368            rejoin = *pBuf;
   1369          
   1370            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1371          
   1372            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1373          }
   1374          
   1375          
   1376          /***************************************************************************************************
   1377           * @fn      MT_ZdoMgmtDirectJoinRequest
   1378           *
   1379           * @brief   Handle a Mgmt Direct Join request.
   1380           *
   1381           * @param   pBuf  - MT message data
   1382           *
   1383           * @return  void
   1384           ***************************************************************************************************/
   1385          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1386          {
   1387            uint8 cmdId;
   1388            uint8 retValue;
   1389            zAddrType_t destAddr;
   1390            uint8 *deviceAddr;
   1391            uint8 capInfo;
   1392          
   1393            /* parse header */
   1394            cmdId = pBuf[MT_RPC_POS_CMD1];
   1395            pBuf += MT_RPC_FRAME_HDR_SZ;
   1396          
   1397            /* Destination Address */
   1398            destAddr.addrMode = Addr16Bit;
   1399            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1400            pBuf += 2;
   1401          
   1402            /* Device Address */
   1403            deviceAddr = pBuf;
   1404            pBuf += Z_EXTADDR_LEN;
   1405          
   1406            /* Capability information */
   1407            capInfo = *pBuf;
   1408          
   1409            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1410          
   1411            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1412          }
   1413          
   1414          /***************************************************************************************************
   1415           * @fn      MT_ZdoMgmtPermitJoinRequest
   1416           *
   1417           * @brief   Handle a Mgmt Permit Join request.
   1418           *
   1419           * @param   pBuf  - MT message data
   1420           *
   1421           * @return  void
   1422           ***************************************************************************************************/
   1423          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1424          {
   1425            uint8 cmdId;
   1426            uint8 retValue;
   1427            zAddrType_t destAddr;
   1428            uint8 duration, tcSignificance;
   1429          
   1430            /* parse header */
   1431            cmdId = pBuf[MT_RPC_POS_CMD1];
   1432            pBuf += MT_RPC_FRAME_HDR_SZ;
   1433          
   1434            /* Destination Address */
   1435            destAddr.addrMode = Addr16Bit;
   1436            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1437            pBuf += 2;
   1438          
   1439            /* Duration */
   1440            duration = *pBuf++;
   1441          
   1442            /* Trust center significance */
   1443            tcSignificance = *pBuf;
   1444          
   1445            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1446          
   1447            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1448          }
   1449          
   1450          /***************************************************************************************************
   1451           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1452           *
   1453           * @brief   Handle a Mgmt Nwk Update request.
   1454           *
   1455           * @param   pBuf  - MT message data
   1456           *
   1457           * @return  void
   1458           ***************************************************************************************************/
   1459          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1460          {
   1461            uint8 cmdId;
   1462            uint8 retValue;
   1463            zAddrType_t destAddr;
   1464            uint32 channelMask;
   1465            uint8 scanDuration, scanCount;
   1466            uint16 nwkManagerAddr;
   1467          
   1468              /* parse header */
   1469            cmdId = pBuf[MT_RPC_POS_CMD1];
   1470            pBuf += MT_RPC_FRAME_HDR_SZ;
   1471          
   1472            /* Destination address */
   1473            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1474            pBuf += 2;
   1475          
   1476            /* Destination address mode */
   1477            destAddr.addrMode = *pBuf++;
   1478          
   1479            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1480            pBuf += 4;
   1481          
   1482            /* Scan duration */
   1483            scanDuration = *pBuf++;
   1484          
   1485            /* Scan count */
   1486            scanCount = *pBuf++;
   1487          
   1488            /* NWK manager address */
   1489            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1490          
   1491            /* Send the Management Network Update request */
   1492            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1493                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1494          
   1495            /*
   1496              Since we don't recevied our own broadcast messages, we should
   1497              send a unicast copy of the message to ourself.
   1498            */
   1499            if ( destAddr.addrMode == AddrBroadcast )
   1500            {
   1501              destAddr.addrMode = Addr16Bit;
   1502              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1503              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1504                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1505            }
   1506          
   1507            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1508          }
   1509          #endif /* MT_ZDO_MGMT */
   1510          
   1511          /***************************************************************************************************
   1512           * @fn      MT_ZdoStartupFromApp
   1513           *
   1514           * @brief   Handle a Startup from App request.
   1515           *
   1516           * @param   pBuf  - MT message data
   1517           *
   1518           * @return  void
   1519           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1520          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1521          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1522            uint8 cmd0, cmd1, retValue;
   1523          
   1524            /* parse header */
   1525            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   1526            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   1527            pBuf += MT_RPC_FRAME_HDR_SZ;
   1528          
   1529            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV       R2,#0x64
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000020   12....       LCALL     ?Subroutine39 & 0xFFFF
   1530          
   1531            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_69:
   \   000023   700D         JNZ       ??MT_ZdoStartupFromApp_0
   1532            {
   1533              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC..         MOV       R4,?XSP + 0
   \   000027   AD..         MOV       R5,?XSP + 1
   \   000029   7B01         MOV       R3,#0x1
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   7965         MOV       R1,#0x65
   \   00002F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1534            }
   1535          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   80..         SJMP      ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   74E0         MOV       A,#-0x20
   \   00000A   5F           ANL       A,R7
   \   00000B   6420         XRL       A,#0x20
   \   00000D   22           RET
   1536          
   1537          
   1538          /***************************************************************************************************
   1539           * @fn      MT_ZdoNetworkDiscoveryReq
   1540           *
   1541           * @brief   Handle a ZDO Network Discovery request.
   1542           *
   1543           * @param   pBuf  - MT message data
   1544           *
   1545           * @return  void
   1546           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1547          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1548          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   1549            uint8  retValue = ZFailure;
   1550            uint8  cmdId;
   1551            uint32 scanChannels;
   1552          
   1553            /* parse header */
   1554            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_137:
   \   00000D   F5..         MOV       ?V4,A
   1555            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000F   EE           MOV       A,R6
   \   000010   2403         ADD       A,#0x3
   \   000012   FE           MOV       R6,A
   \   000013   5001         JNC       ??MT_ZdoNetworkDiscoveryReq_0
   \   000015   0F           INC       R7
   1556          
   1557            /* Packet format */
   1558            /* scan channels (4) | scan duration (1) */
   1559          
   1560            /* Scan channels */
   1561            scanChannels = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoNetworkDiscoveryReq_0:
   \   000016                ; Setup parameters for call to function osal_build_uint32
   \   000016   7904         MOV       R1,#0x4
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   1562            pBuf += 4;
   1563          
   1564            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \   00001E                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   00002B   E9           MOV       A,R1
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   F0           MOVX      @DPTR,A
   1565          
   1566            // Register ZDO callback for MT to handle the network discovery confirm
   1567            // and beacon notification confirm
   1568            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   000033                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000033   7A..         MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   000035   7B..         MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000037   7902         MOV       R1,#0x2
   \   000039   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1569            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   00003C                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003C   7A..         MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   00003E   7B..         MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   000040   7903         MOV       R1,#0x3
   \   000042   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1570          
   1571            /* Build and send back the response */
   1572            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   000045                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000045   AC..         MOV       R4,?XSP + 0
   \   000047   AD..         MOV       R5,?XSP + 1
   \   000049   7B01         MOV       R3,#0x1
   \   00004B   AA..         MOV       R2,?V4
   \   00004D   7965         MOV       R1,#0x65
   \   00004F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1573          }
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   7F05         MOV       R7,#0x5
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   7401         MOV       A,#0x1
   \   00000C                REQUIRE ??Subroutine69_0
   \   00000C                ; // Fall through to label ??Subroutine69_0
   1574          
   1575          
   1576          /***************************************************************************************************
   1577           * @fn      MT_ZdoJoinReq
   1578           *
   1579           * @brief   Handle a ZDO Join request.
   1580           *
   1581           * @param   pBuf  - MT message data
   1582           *
   1583           * @return  void
   1584           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1585          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1586          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   1587            uint8  retValue = ZFailure;
   1588            uint8  cmdId;
   1589            uint16 panId;
   1590            uint16 chosenParent;
   1591          
   1592            /* parse header */
   1593            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_138:
   \   00000D   F5..         MOV       ?V0,A
   1594            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000F   EE           MOV       A,R6
   \   000010   2403         ADD       A,#0x3
   \   000012   FE           MOV       R6,A
   \   000013   5001         JNC       ??MT_ZdoJoinReq_0
   \   000015   0F           INC       R7
   1595          
   1596            /* Packet format */
   1597            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1598             * parentDepth (1) | stackProfile  (1)
   1599             */
   1600          
   1601            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1602            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1603          
   1604            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??MT_ZdoJoinReq_0:
   \   000016                ; Setup parameters for call to function ZDApp_JoinReq
   \   000016   240E         ADD       A,#0xe
   \   000018   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   EE           MOV       A,R6
   \   00001F   240D         ADD       A,#0xd
   \   000021   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000027   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00002A   FA           MOV       R2,A
   \   00002B   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   C8           XCH       A,R0
   \   000031   F9           MOV       R1,A
   \   000032   EA           MOV       A,R2
   \   000033   28           ADD       A,R0
   \   000034   F5..         MOV       ?V2,A
   \   000036   E4           CLR       A
   \   000037   39           ADDC      A,R1
   \   000038   F5..         MOV       ?V3,A
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   EE           MOV       A,R6
   \   000040   2403         ADD       A,#0x3
   \   000042   FC           MOV       R4,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FD           MOV       R5,A
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000055   E4           CLR       A
   \   000056   39           ADDC      A,R1
   \   000057   FB           MOV       R3,A
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000061   7404         MOV       A,#0x4
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   E9           MOV       A,R1
   \   000067   85..82       MOV       DPL,?XSP + 0
   \   00006A   85..83       MOV       DPH,?XSP + 1
   \   00006D   F0           MOVX      @DPTR,A
   1605          
   1606            /* Register for MT to receive Join Confirm */
   1607            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   00006E                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00006E   7A..         MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   000070   7B..         MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000072   7904         MOV       R1,#0x4
   \   000074   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1608          
   1609            /* Build and send back the response */
   1610            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   000077                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000077   AC..         MOV       R4,?XSP + 0
   \   000079   AD..         MOV       R5,?XSP + 1
   \   00007B   7B01         MOV       R3,#0x1
   \   00007D   AA..         MOV       R2,?V0
   \   00007F   7965         MOV       R1,#0x65
   \   000081   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1611          
   1612          }
   \   000084   7401         MOV       A,#0x1
   \   000086   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V1,A
   \   000009   78..         MOV       R0,#?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   1613          
   1614          /***************************************************************************************************
   1615           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1616           *
   1617           * @brief       Send an indication to inform host device the completion of
   1618           *              network discovery scan
   1619           *
   1620           * @param       pStr - pointer to a parameter and a structure of parameters
   1621           *
   1622           * @return      void
   1623           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1624          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1625          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1626            /* pStr: status (uint8) */
   1627            /* Packet Format */
   1628            /* Status (1) */
   1629          
   1630            // Scan completed. De-register the callback with ZDO
   1631            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1632            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV       R1,#0x3
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1633          
   1634            // Send the buffered beacon indication
   1635            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1636          
   1637            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1638                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   7B01         MOV       R3,#0x1
   \   000020   7AC7         MOV       R2,#-0x39
   \   000022   7945         MOV       R1,#0x45
   \   000024   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1639            return NULL;
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   02....       LJMP      ??Subroutine65_0 & 0xFFFF
   1640          }
   1641          
   1642          
   1643          
   1644          /***************************************************************************************************
   1645           * @fn          MT_ZdoBeaconIndCB
   1646           *
   1647           * @brief       Send an indication to host device of a beacon notification
   1648           *
   1649           * @param       pStr -  pointer to a parameter and a structure of parameters
   1650           *
   1651           * @return      void
   1652           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1653          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1654          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1655            zdoBeaconInd_t *pBeacon = pStr;
   1656            uint8 *pTmp;
   1657          
   1658            /* Packet Format */
   1659            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1660          
   1661            if( pStr != NULL)
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1662            {
   1663              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000016   701C         JNZ       ??MT_ZdoBeaconIndCB_1
   1664              {
   1665                // If pBeaconIndBuf has not been allocated yet
   1666                // allocate memory now with MAX_UART_TX_BUFF
   1667                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A7B         MOV       R2,#0x7b
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#pBeaconIndBuf
   \   000022   EA           MOV       A,R2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   EB           MOV       A,R3
   \   000026   F0           MOVX      @DPTR,A
   \   000027   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1668                {
   1669                  // Memory failure
   1670                  return NULL;
   1671                }
   1672                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002F   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   1673              }
   \                     ??CrossCallReturnLabel_144:
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   1674          
   1675              // Fill in the buffer with the beacon indication
   1676              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000034   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000037   F8           MOV       R0,A
   \   000038   A9F0         MOV       R1,B
   \   00003A   90....       MOV       DPTR,#pBeaconIndBuf
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   28           ADD       A,R0
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   39           ADDC      A,R1
   \   000043   8A82         MOV       DPL,R2
   \   000045   F583         MOV       DPH,A
   \   000047   A3           INC       DPTR
   \   000048   AA82         MOV       R2,DPL
   \   00004A   AB83         MOV       R3,DPH
   1677              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E0           MOVX      A,@DPTR
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   12....       LCALL     ?Subroutine34 & 0xFFFF
   1678              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_55:
   \   000058   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00005B   F0           MOVX      @DPTR,A
   1679              *pTmp++ = LO_UINT16(pBeacon->panID);
   \   00005C   EE           MOV       A,R6
   \   00005D   2402         ADD       A,#0x2
   \   00005F   F8           MOV       R0,A
   \   000060   E4           CLR       A
   \   000061   3F           ADDC      A,R7
   \   000062   F9           MOV       R1,A
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?Subroutine54 & 0xFFFF
   1680              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_100:
   \   00006E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000071   12....       LCALL     ?Subroutine34 & 0xFFFF
   1681              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_56:
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000079   12....       LCALL     ?Subroutine38 & 0xFFFF
   1682              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_140:
   \   00007C   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00007F   12....       LCALL     ?Subroutine34 & 0xFFFF
   1683              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_57:
   \   000082   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000085   12....       LCALL     ?Subroutine38 & 0xFFFF
   1684              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_141:
   \   000088   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00008B   12....       LCALL     ?Subroutine34 & 0xFFFF
   1685              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_58:
   \   00008E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000091   12....       LCALL     ?Subroutine38 & 0xFFFF
   1686              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_142:
   \   000094   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000097   12....       LCALL     ?Subroutine34 & 0xFFFF
   1687              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_59:
   \   00009A   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00009D   A3           INC       DPTR
   \   00009E   F0           MOVX      @DPTR,A
   1688              *pTmp++ = pBeacon->depth;
   \   00009F   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000A2   C0E0         PUSH      A
   \   0000A4   EA           MOV       A,R2
   \   0000A5   240B         ADD       A,#0xb
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   E4           CLR       A
   \   0000AA   3B           ADDC      A,R3
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   D0E0         POP       A
   \   0000AF   F0           MOVX      @DPTR,A
   1689              *pTmp++ = pBeacon->updateID;
   \   0000B0   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000B3   C0E0         PUSH      A
   \   0000B5   EA           MOV       A,R2
   \   0000B6   240C         ADD       A,#0xc
   \   0000B8   F582         MOV       DPL,A
   \   0000BA   E4           CLR       A
   \   0000BB   3B           ADDC      A,R3
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   D0E0         POP       A
   \   0000C0   F0           MOVX      @DPTR,A
   1690              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000C1                ; Setup parameters for call to function osal_memcpy
   \   0000C1   EE           MOV       A,R6
   \   0000C2   240D         ADD       A,#0xd
   \   0000C4   F5..         MOV       ?V0,A
   \   0000C6   E4           CLR       A
   \   0000C7   3F           ADDC      A,R7
   \   0000C8   F5..         MOV       ?V1,A
   \   0000CA   75..00       MOV       ?V2,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D2   7C08         MOV       R4,#0x8
   \   0000D4   7D00         MOV       R5,#0x0
   \   0000D6   EA           MOV       A,R2
   \   0000D7   240D         ADD       A,#0xd
   \   0000D9   FA           MOV       R2,A
   \   0000DA   5001         JNC       ??MT_ZdoBeaconIndCB_3
   \   0000DC   0B           INC       R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000DD   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E0   7403         MOV       A,#0x3
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
   1691          
   1692              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   0000E5   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   04           INC       A
   \   0000EA   F0           MOVX      @DPTR,A
   1693          
   1694              // Check if the buffer can fit in another beacon
   1695              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   0000EB   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000EE   A9F0         MOV       R1,B
   \   0000F0   2416         ADD       A,#0x16
   \   0000F2   5001         JNC       ??MT_ZdoBeaconIndCB_4
   \   0000F4   09           INC       R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   0000F5   C3           CLR       C
   \   0000F6   947C         SUBB      A,#0x7c
   \   0000F8   E9           MOV       A,R1
   \   0000F9   9400         SUBB      A,#0x0
   \   0000FB   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000FD   65D0         XRL       A,PSW
   \   0000FF   33           RLC       A
   \   000100   4034         JC        ??MT_ZdoBeaconIndCB_2
   1696              {
   1697                // Packet full, send the packet over MT
   1698                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1699                                             MT_ZDO_BEACON_NOTIFY_IND,
   1700                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000102                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000102   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000105   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1701                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   000108   12....       LCALL     ?Subroutine25 & 0xFFFF
   1702              }
   1703            }
   \                     ??CrossCallReturnLabel_147:
   \   00010B   E4           CLR       A
   \   00010C   8027         SJMP      ??MT_ZdoBeaconIndCB_5
   1704            else
   1705            {
   1706              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00010E   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000111   6023         JZ        ??MT_ZdoBeaconIndCB_2
   \   000113   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000116   E0           MOVX      A,@DPTR
   \   000117   600B         JZ        ??MT_ZdoBeaconIndCB_6
   1707              {
   1708                // End of beacon indication, send the packet over MT
   1709                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1710                                             MT_ZDO_BEACON_NOTIFY_IND,
   1711                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000119                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000119   12....       LCALL     ?Subroutine9 & 0xFFFF
   1712              }
   \                     ??CrossCallReturnLabel_10:
   \   00011C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1713              // Free the allocated memory
   1714              if(pBeaconIndBuf != NULL)
   \   00011F   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000122   6012         JZ        ??MT_ZdoBeaconIndCB_2
   1715              {
   1716                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000124                ; Setup parameters for call to function osal_mem_free
   \   000124   90....       MOV       DPTR,#pBeaconIndBuf
   \   000127   E0           MOVX      A,@DPTR
   \   000128   FA           MOV       R2,A
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   FB           MOV       R3,A
   \   00012C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1717                pBeaconIndBuf = NULL;
   \   00012F   90....       MOV       DPTR,#pBeaconIndBuf
   \   000132   E4           CLR       A
   \   000133   F0           MOVX      @DPTR,A
   \   000134   A3           INC       DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000135   F0           MOVX      @DPTR,A
   1718              }
   1719            }
   1720          
   1721            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000136   7A00         MOV       R2,#0x0
   \   000138   7B00         MOV       R3,#0x0
   \   00013A   7F03         MOV       R7,#0x3
   \   00013C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine70_0
   \   000001                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine71_0
   \   000006                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   75F015       MOV       B,#0x15
   \   00000F   A4           MUL       AB
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000006   FD           MOV       R5,A
   \   000007   75F015       MOV       B,#0x15
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   A4           MUL       AB
   \   000010   04           INC       A
   \   000011   FB           MOV       R3,A
   \   000012   7AC5         MOV       R2,#-0x3b
   \   000014   7945         MOV       R1,#0x45
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1723          
   1724          
   1725          
   1726          /***************************************************************************************************
   1727           * @fn          MT_ZdoJoinCnfCB
   1728           *
   1729           * @brief       Handle the ZDO Join Confirm from ZDO
   1730           *
   1731           * @param       pStr - pointer to a parameter and a structure of parameters
   1732           *
   1733           * @return      void
   1734           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   1736          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1737            /* pStr: zdoJoinCnf_t* */
   1738            /* Packet Format */
   1739            /* Status (1) | device addr (2) | parent addr (2) */
   1740          
   1741            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   1742            zdoJoinCnf_t *joinCnf = pStr;
   1743          
   1744            /* Join Complete. De-register the callback with ZDO */
   1745            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1746          
   1747            buf[0] = joinCnf->status;
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   E0           MOVX      A,@DPTR
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   12....       LCALL     ?Subroutine34 & 0xFFFF
   1748            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_60:
   \   000021   A882         MOV       R0,DPL
   \   000023   A983         MOV       R1,DPH
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C0E0         PUSH      A
   \   000028   7401         MOV       A,#0x1
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   D0E0         POP       A
   \   00002F   12....       LCALL     ?Subroutine35 & 0xFFFF
   1749            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_61:
   \   000032   C0E0         PUSH      A
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
   1750            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003C   EE           MOV       A,R6
   \   00003D   2403         ADD       A,#0x3
   \   00003F   F8           MOV       R0,A
   \   000040   E4           CLR       A
   \   000041   3F           ADDC      A,R7
   \   000042   F9           MOV       R1,A
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   E0           MOVX      A,@DPTR
   \   000048   C0E0         PUSH      A
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   12....       LCALL     ?Subroutine35 & 0xFFFF
   1751            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_62:
   \   000054   C0E0         PUSH      A
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   D0E0         POP       A
   \   00005D   F0           MOVX      @DPTR,A
   1752          
   1753            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1754                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   00005E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00005E   AC..         MOV       R4,?XSP + 0
   \   000060   AD..         MOV       R5,?XSP + 1
   \   000062   7B05         MOV       R3,#0x5
   \   000064   7AC6         MOV       R2,#-0x3a
   \   000066   7945         MOV       R1,#0x45
   \   000068   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1755          
   1756            return NULL;
   \   00006B   7A00         MOV       R2,#0x0
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   7405         MOV       A,#0x5
   \   000071   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1757          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   1758          
   1759          /*************************************************************************************************
   1760           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1761           *
   1762           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1763           *
   1764           * @param   pBuf  - MT message data
   1765           *
   1766           * @return  void
   1767           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FF           MOV       R7,A
   \   000007                REQUIRE ??Subroutine61_0
   \   000007                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1768          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1769          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1770            uint8 cmd0, cmd1, tmp;
   1771            uint16 cId;
   1772          
   1773            /* parse header */
   1774            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL     ?Subroutine8 & 0xFFFF
   1775            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1776            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_118:
   \   00000D   5001         JNC       ??MT_ZdoRegisterForZDOMsg_0
   \   00000F   0B           INC       R3
   1777          
   1778            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1779            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000013   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000016   12....       LCALL     ?Subroutine39 & 0xFFFF
   1780          
   1781            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_70:
   \   000019   700D         JNZ       ??MT_ZdoRegisterForZDOMsg_1
   1782            {
   1783              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   7B01         MOV       R3,#0x1
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   7965         MOV       R1,#0x65
   \   000025   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1784            }
   1785          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   000028   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   FB           MOV       R3,A
   \   000007   90....       MOV       DPTR,#MT_TaskID
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET
   1786          
   1787          /*************************************************************************************************
   1788           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1789           *
   1790           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1791           *
   1792           * @param   pBuf  - MT message data
   1793           *
   1794           * @return  void
   1795           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1796          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   1797          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1798            uint8 cmd0, cmd1, tmp;
   1799            uint16 cId;
   1800          
   1801            /* parse header */
   1802            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL     ?Subroutine8 & 0xFFFF
   1803            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1804            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_119:
   \   00000D   5001         JNC       ??MT_ZdoRemoveRegisteredCB_0
   \   00000F   0B           INC       R3
   1805          
   1806            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1807            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000010                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000010   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000013   12....       LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   000016   12....       LCALL     ?Subroutine39 & 0xFFFF
   1808          
   1809            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_71:
   \   000019   700D         JNZ       ??MT_ZdoRemoveRegisteredCB_1
   1810            {
   1811              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   7B01         MOV       R3,#0x1
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   7965         MOV       R1,#0x65
   \   000025   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1812            }
   1813          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   000028   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   1814          
   1815          #endif /* MT_ZDO_FUNC */
   1816          
   1817          
   1818          /***************************************************************************************************
   1819           * Callback handling function
   1820           ***************************************************************************************************/
   1821          
   1822          #if defined (MT_ZDO_CB_FUNC)
   1823          
   1824          /***************************************************************************************************
   1825           * @fn      MT_ZdoStateChangeCB
   1826           *
   1827           * @brief   Handle state change OSAL message from ZDO.
   1828           *
   1829           * @param   pMsg  - Message data
   1830           *
   1831           * @return  void
   1832           */
   1833          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1834          {
   1835            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1836                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1837          }
   1838          
   1839          /***************************************************************************************************
   1840           * @fn     MT_ZdoDirectCB()
   1841           *
   1842           * @brief  ZDO direct callback.  Build an MT message directly from the
   1843           *         over-the-air ZDO message.
   1844           *
   1845           * @param  pData - Incoming AF frame.
   1846           *
   1847           * @return  none
   1848           ***************************************************************************************************/
   1849          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1850          {
   1851            uint8 len, *pBuf;
   1852            uint16 origClusterId;
   1853          
   1854            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   1855            origClusterId = pData->clusterId;
   1856          
   1857            // Is the message an exception or not a response?
   1858            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1859            {
   1860              return;  // Handled somewhere else or not needed.
   1861            }
   1862          
   1863            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1864             * two bytes for srcAddr.
   1865             */
   1866            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1867          
   1868            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1869            {
   1870              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1871          
   1872              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1873              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1874          
   1875              /* copy ZDO data, skipping one-byte sequence number */
   1876              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1877          
   1878              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1879              osal_mem_free(pBuf);
   1880            }
   1881          }
   1882          
   1883          /***************************************************************************************************
   1884           * @fn     MT_ZdoHandleExceptions()
   1885           *
   1886           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   1887           *
   1888           * @param  pData - Incoming AF frame.
   1889           *
   1890           * @return  TRUE if handled by this function, FALSE if not
   1891           ***************************************************************************************************/
   1892          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1893          {
   1894            uint8 ret = TRUE;
   1895            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   1896            ZDO_DeviceAnnce_t devAnnce;
   1897            uint8 doDefault = FALSE;
   1898          
   1899            switch ( inMsg->clusterID )
   1900            {
   1901              case NWK_addr_rsp:
   1902              case IEEE_addr_rsp:
   1903                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   1904                {
   1905                  if ( nwkRsp->status == ZDO_SUCCESS )
   1906                  {
   1907                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1908                  }
   1909                  osal_mem_free( nwkRsp );
   1910                }
   1911                break;
   1912          
   1913              case Device_annce:
   1914                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1915                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1916                break;
   1917          
   1918              case Simple_Desc_rsp:
   1919                if ( pData->cmd.DataLength > 5 )
   1920                {
   1921                  ret = FALSE;
   1922                }
   1923                else
   1924                {
   1925                  doDefault = TRUE;
   1926                }
   1927                break;
   1928          
   1929              default:
   1930                ret = FALSE;
   1931                break;
   1932            }
   1933          
   1934            if ( doDefault )
   1935            {
   1936              ret = FALSE;
   1937              pData->clusterId = MtZdoDef_rsp;
   1938              pData->cmd.DataLength = 2;
   1939            }
   1940          
   1941            return ( ret );
   1942          }
   1943          
   1944          /***************************************************************************************************
   1945           * @fn      MT_ZdoAddrRspCB
   1946           *
   1947           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1948           *
   1949           * @param   pMsg  - Message data
   1950           *
   1951           * @return  void
   1952           */
   1953          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1954          {
   1955            uint8   listLen, len, *pBuf;
   1956          
   1957            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1958          
   1959            /* get length, sanity check length */
   1960            listLen = pMsg->numAssocDevs;
   1961          
   1962            /* calculate msg length */
   1963            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1964          
   1965            /* get buffer */
   1966            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1967            {
   1968              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1969              uint8 *pTmp = pBuf;
   1970          
   1971              *pTmp++ = pMsg->status;
   1972          
   1973              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1974              pTmp += Z_EXTADDR_LEN;
   1975          
   1976              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1977              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1978          
   1979              *pTmp++ = pMsg->startIndex;
   1980              *pTmp++ = listLen;
   1981          
   1982              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1983          
   1984              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1985              osal_mem_free(pBuf);
   1986            }
   1987          }
   1988          
   1989          /***************************************************************************************************
   1990           * @fn      MT_ZdoEndDevAnnceCB
   1991           *
   1992           * @brief   Handle end device announce OSAL message from ZDO.
   1993           *
   1994           * @param   pMsg  - Message data
   1995           *
   1996           * @return  void
   1997           */
   1998          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1999          {
   2000            uint8 *pBuf;
   2001          
   2002            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2003            {
   2004              uint8 *pTmp = pBuf;
   2005          
   2006              *pTmp++ = LO_UINT16(srcAddr);
   2007              *pTmp++ = HI_UINT16(srcAddr);
   2008          
   2009              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2010              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2011          
   2012              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2013              pTmp += Z_EXTADDR_LEN;
   2014          
   2015              *pTmp = pMsg->capabilities;
   2016          
   2017              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2018                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2019                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2020              osal_mem_free(pBuf);
   2021            }
   2022          }
   2023          
   2024          /***************************************************************************************************
   2025           * @fn      MT_ZdoSrcRtgCB
   2026           *
   2027           * @brief   Handle Src Route from ZDO.
   2028           *
   2029           * @param   pStr  - pointer to the data structure for the src route
   2030           *
   2031           * @return  void*
   2032           */
   2033          void* MT_ZdoSrcRtgCB( void *pStr )
   2034          {
   2035            uint8 len, *pBuf;
   2036            zdoSrcRtg_t *pSrcRtg = pStr;
   2037          
   2038            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2039            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2040          
   2041            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2042            {
   2043              uint8 idx, *pTmp = pBuf;
   2044              uint16 *pRelay;
   2045          
   2046              // Packet payload
   2047              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2048              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2049              *pTmp++ = pSrcRtg->relayCnt;
   2050          
   2051              // Relay List
   2052              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2053              {
   2054                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2055                {
   2056                  *pTmp++ = LO_UINT16(*pRelay);
   2057                  *pTmp++ = HI_UINT16(*pRelay);
   2058                  pRelay++;
   2059                }
   2060              }
   2061              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2062                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2063              osal_mem_free(pBuf);
   2064            }
   2065          
   2066            return NULL;
   2067          }
   2068          
   2069          /***************************************************************************************************
   2070           * @fn          MT_ZdoConcentratorIndCB
   2071           *
   2072           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2073           *
   2074           * @param       pStr - pointer to a parameter and a structure of parameters
   2075           *
   2076           * @return      NULL
   2077           ***************************************************************************************************/
   2078          static void *MT_ZdoConcentratorIndCB(void *pStr)
   2079          {
   2080            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2081            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2082          
   2083            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2084            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2085            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2086            *pTmp = pInd->pktCost;
   2087          
   2088            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2089                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2090            return NULL;
   2091          }
   2092          
   2093          /***************************************************************************************************
   2094           * @fn          MT_ZdoLeaveInd
   2095           *
   2096           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2097           *
   2098           * @param       vPtr - Pointer to the received Leave Indication message.
   2099           *
   2100           * @return      NULL
   2101           ***************************************************************************************************/
   2102          static void *MT_ZdoLeaveInd(void *vPtr)
   2103          {
   2104            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2105            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2106          
   2107            buf[0] = LO_UINT16(pInd->srcAddr);
   2108            buf[1] = HI_UINT16(pInd->srcAddr);
   2109            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2110            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2111            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2112            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2113          
   2114            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2115                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2116            return NULL;
   2117          }
   2118          #endif // MT_ZDO_CB_FUNC
   2119          
   2120          /***************************************************************************************************
   2121           * @fn      MT_ZdoSendMsgCB
   2122           *
   2123           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2124           *
   2125           * @param   pMsg  - Message data
   2126           *
   2127           * @return  void
   2128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2129          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2130          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   2131            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00000D   2409         ADD       A,#0x9
   \   00000F   F5..         MOV       ?V3,A
   2132            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   FA           MOV       R2,A
   \   000012   7B00         MOV       R3,#0x0
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   AE..         MOV       R6,?V0
   \   00001D   AF..         MOV       R7,?V1
   2133          
   2134            if (pBuf != NULL)
   \   00001F   EE           MOV       A,R6
   \   000020   4F           ORL       A,R7
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2135            {
   2136              uint8 *pTmp = pBuf;
   2137          
   2138              // Assuming exclusive use of network short addresses.
   2139              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000026   E5..         MOV       A,?V4
   \   000028   2402         ADD       A,#0x2
   \   00002A   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   12....       LCALL     ?Subroutine35 & 0xFFFF
   2140              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_63:
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
   2141              *pTmp++ = pMsg->wasBroadcast;
   \   00003B   E5..         MOV       A,?V4
   \   00003D   240B         ADD       A,#0xb
   \   00003F   F582         MOV       DPL,A
   \   000041   E4           CLR       A
   \   000042   35..         ADDC      A,?V5
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   F0           MOVX      @DPTR,A
   2142              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \   00004E   E5..         MOV       A,?V4
   \   000050   240C         ADD       A,#0xc
   \   000052   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000055   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000058   12....       LCALL     ?Subroutine37 & 0xFFFF
   2143              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_67:
   \   00005B   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00005E   A3           INC       DPTR
   \   00005F   F0           MOVX      @DPTR,A
   2144              *pTmp++ = pMsg->SecurityUse;
   \   000060   E5..         MOV       A,?V4
   \   000062   240E         ADD       A,#0xe
   \   000064   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000067   F0           MOVX      @DPTR,A
   2145              *pTmp++ = pMsg->TransSeq;
   \   000068   E5..         MOV       A,?V4
   \   00006A   240F         ADD       A,#0xf
   \   00006C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00006F   A3           INC       DPTR
   \   000070   F0           MOVX      @DPTR,A
   2146              // Skipping asduLen since it can be deduced from the RPC packet length.
   2147              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \   000071   E5..         MOV       A,?V4
   \   000073   2411         ADD       A,#0x11
   \   000075   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000078   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00007B   12....       LCALL     ?Subroutine37 & 0xFFFF
   2148              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_68:
   \   00007E   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000081   A3           INC       DPTR
   \   000082   F0           MOVX      @DPTR,A
   2149              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   E5..         MOV       A,?V4
   \   000085   2413         ADD       A,#0x13
   \   000087   F582         MOV       DPL,A
   \   000089   E4           CLR       A
   \   00008A   35..         ADDC      A,?V5
   \   00008C   F583         MOV       DPH,A
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F5..         MOV       ?V0,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F5..         MOV       ?V1,A
   \   000095   75..00       MOV       ?V2,#0x0
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009D   E5..         MOV       A,?V4
   \   00009F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000A2   FC           MOV       R4,A
   \   0000A3   7D00         MOV       R5,#0x0
   \   0000A5   EE           MOV       A,R6
   \   0000A6   2409         ADD       A,#0x9
   \   0000A8   FA           MOV       R2,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   FB           MOV       R3,A
   \   0000AC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AF   7403         MOV       A,#0x3
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   2150          
   2151              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2152                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0000B4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B4   EE           MOV       A,R6
   \   0000B5   FC           MOV       R4,A
   \   0000B6   EF           MOV       A,R7
   \   0000B7   FD           MOV       R5,A
   \   0000B8   AB..         MOV       R3,?V3
   \   0000BA   7AFF         MOV       R2,#-0x1
   \   0000BC   7945         MOV       R1,#0x45
   \   0000BE   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2153          
   2154              osal_mem_free(pBuf);
   \   0000C1                ; Setup parameters for call to function osal_mem_free
   \   0000C1   EE           MOV       A,R6
   \   0000C2   FA           MOV       R2,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2155            }
   2156          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000C8   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   2410         ADD       A,#0x10
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V5
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V5
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2157          
   2158          #endif   /*ZDO Command Processing in MT*/
   2159          /***************************************************************************************************
   2160          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     29   MT_ZdoActiveEpRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1     52   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      0      9   MT_ZdoCommandProcessing
        0      9   -> MT_ZdoActiveEpRequest
        0      9   -> MT_ZdoBindRequest
        0      9   -> MT_ZdoComplexDescRequest
        0      9   -> MT_ZdoEndDevAnnce
        0      9   -> MT_ZdoEndDevBindRequest
        0      9   -> MT_ZdoIEEEAddrRequest
        0      9   -> MT_ZdoJoinReq
        0      9   -> MT_ZdoMatchDescRequest
        0      9   -> MT_ZdoNWKAddressRequest
        0      9   -> MT_ZdoNetworkDiscoveryReq
        0      9   -> MT_ZdoNodeDescRequest
        0      9   -> MT_ZdoPowerDescRequest
        0      9   -> MT_ZdoRegisterForZDOMsg
        0      9   -> MT_ZdoRemoveRegisteredCB
        0      9   -> MT_ZdoServiceDiscRequest
        0      9   -> MT_ZdoSimpleDescRequest
        0      9   -> MT_ZdoStartupFromApp
        0      9   -> MT_ZdoUnbindRequest
        0      9   -> MT_ZdoUserDescRequest
        0      9   -> MT_ZdoUserDescSet
      1     29   MT_ZdoComplexDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     20   MT_ZdoEndDevAnnce
        0     10   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_DeviceAnnce
      1    103   MT_ZdoEndDevBindRequest
        0     85   -> MT_BuildAndSendZToolResponse
        0     94   -> ZDP_EndDeviceBindReq
      1     20   MT_ZdoIEEEAddrRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_IEEEAddrReq
      0      0   MT_ZdoInit
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     26   MT_ZdoJoinReq
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_JoinReq
        0     13   -> ZDO_RegisterForZdoCB
      1    105   MT_ZdoMatchDescRequest
        0     88   -> MT_BuildAndSendZToolResponse
        0     96   -> ZDP_MatchDescReq
      1     20   MT_ZdoNWKAddressRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_NwkAddrReq
      1     23   MT_ZdoNetworkDiscoveryReq
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDApp_NetworkDiscoveryReq
        0     14   -> ZDO_RegisterForZdoCB
        0     14   -> osal_build_uint32
      1     29   MT_ZdoNodeDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      1     29   MT_ZdoPowerDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     19   MT_ZdoRegisterForZDOMsg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RegisterForZDOMsg
      1     19   MT_ZdoRemoveRegisteredCB
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RemoveRegisteredCB
      1     17   MT_ZdoSendMsgCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      1     19   MT_ZdoServiceDiscRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_ServerDiscReq
      1     29   MT_ZdoSimpleDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_SimpleDescReq
      1     19   MT_ZdoStartupFromApp
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDOInitDevice
      1     52   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     29   MT_ZdoUserDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     51   MT_ZdoUserDescSet
        0     39   -> MT_BuildAndSendZToolResponse
        0     41   -> ZDP_UserDescSet
        0     42   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine60_0
      13  ??Subroutine61_0
       6  ??Subroutine62_0
      13  ??Subroutine63_0
       3  ??Subroutine64_0
       5  ??Subroutine65_0
       9  ??Subroutine66_0
      10  ??Subroutine67_0
       5  ??Subroutine68_0
       9  ??Subroutine69_0
       6  ??Subroutine70_0
       6  ??Subroutine71_0
       8  ??Subroutine72_0
       3  ?Subroutine0
      16  ?Subroutine1
      12  ?Subroutine10
      13  ?Subroutine11
      10  ?Subroutine12
       6  ?Subroutine13
       3  ?Subroutine14
       8  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      17  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
      10  ?Subroutine22
      11  ?Subroutine23
      19  ?Subroutine24
       6  ?Subroutine25
      17  ?Subroutine26
       4  ?Subroutine27
       4  ?Subroutine28
       8  ?Subroutine29
       8  ?Subroutine3
       8  ?Subroutine30
      10  ?Subroutine31
      19  ?Subroutine32
      12  ?Subroutine33
       7  ?Subroutine34
       6  ?Subroutine35
      19  ?Subroutine36
       5  ?Subroutine37
       1  ?Subroutine38
      14  ?Subroutine39
      26  ?Subroutine4
      11  ?Subroutine40
      11  ?Subroutine41
       6  ?Subroutine42
      12  ?Subroutine43
      10  ?Subroutine44
      11  ?Subroutine45
      13  ?Subroutine46
      14  ?Subroutine47
      12  ?Subroutine48
       2  ?Subroutine49
       6  ?Subroutine5
      10  ?Subroutine50
       6  ?Subroutine51
       4  ?Subroutine52
      20  ?Subroutine53
       6  ?Subroutine54
       9  ?Subroutine55
       4  ?Subroutine56
       7  ?Subroutine57
       9  ?Subroutine58
       7  ?Subroutine59
      12  ?Subroutine6
      60  ?Subroutine7
       7  ?Subroutine8
      23  ?Subroutine9
      46  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     319  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     143  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
     186  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
      46  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
      78  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     327  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
      47  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
       3  MT_ZdoInit
       6  MT_ZdoInit::?relay
     116  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     137  MT_ZdoJoinReq
       6  MT_ZdoJoinReq::?relay
     331  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
      58  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
      92  MT_ZdoNetworkDiscoveryReq
       6  MT_ZdoNetworkDiscoveryReq::?relay
      54  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
      46  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
      46  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
      43  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
      43  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     203  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
      30  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
      61  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
      52  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
     146  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
      46  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     156  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub
       2  pBeaconIndBuf

 
 3 579 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
   156 bytes of CODE     memory
 3 579 bytes of HUGECODE memory
     6 bytes of XDATA    memory

Errors: none
Warnings: none
