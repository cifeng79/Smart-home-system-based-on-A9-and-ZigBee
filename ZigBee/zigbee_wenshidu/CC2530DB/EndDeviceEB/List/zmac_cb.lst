###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               25/Aug/2024  15:10:44
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\user\EW2687.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\zmac\f8w\zmac_cb.c" -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2012-03-08 17:10:16 -0800 (Thu, 08 Mar 2012) $
      4            Revision:       $Revision: 29685 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_security.h"
     61          
     62          #include "mac_main.h"
     63          extern void *ZMac_ScanBuf;
     64          
     65          /********************************************************************************************************
     66           *                                               CONSTANTS
     67           ********************************************************************************************************/
     68          
     69          #if !defined NONWK
     70          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     71          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     72            0,
     73            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     74            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     75            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     76            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     77            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     78            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     79            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     80            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     81            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     82            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     83            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     84            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     85            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     86            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     87            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     88            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     89          };
     90          #endif /* !defined NONWK */
     91          
     92          /********************************************************************************************************
     93           *                                               LOCALS
     94           ********************************************************************************************************/
     95          
     96          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          
     99          #if !defined NONWK
    100          /* LQI Adjustment Function */
    101          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    102          #endif
    103          
    104          /*********************************************************************
    105           * ZMAC Function Pointers
    106           */
    107          
    108          /*
    109           * ZMac Application callback function. This function will be called
    110           * for every MAC message that is received over-the-air or generated
    111           * locally by MAC for the application.
    112           *
    113           * The callback function should return TRUE if it has handled the
    114           * MAC message and no further action should be taken with it. It
    115           * should return FALSE if it has not handled the MAC message and
    116           * normal processing should take place.
    117           *
    118           * NOTE: The processing in this function should be kept to the
    119           *       minimum.
    120           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          
    124          /*********************************************************************
    125           * ZMAC Functions
    126           */
    127          
    128          /**************************************************************************************************
    129           * @fn       MAC_CbackEvent()
    130           *
    131           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    132           *
    133           * @param    pData - pointer to macCbackEvent_t
    134           *
    135           * @return   none
    136           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    138          #ifndef MT_MAC_CB_FUNC
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    140          #if !defined NONWK
    141            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V3,A
    142            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F8           MOV       R0,A
   \   00001C   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00001F   F8           MOV       R0,A
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E8           MOV       A,R0
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
    143            macCbackEvent_t *msgPtr;
    144          
    145            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    146             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    147             */
    148            if (tmp == 0)
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    149            {
    150              return;
    151            }
    152          
    153            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    154            if ( event == MAC_MCPS_DATA_IND )
   \   000035   740D         MOV       A,#0xd
   \   000037   65..         XRL       A,?V3
   \   000039   7046         JNZ       ??MAC_CbackEvent_1
    155            {
    156              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00003B                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   7953         MOV       R1,#0x53
   \   000042   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    157              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    158                  (pData->dataInd.msdu.len == 0))
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   64FE         XRL       A,#0xfe
   \   00004D   7003         JNZ       ??MAC_CbackEvent_2
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   000052   7003         JNZ       $+5
   \   000054   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F4           CPL       A
   \   00005E   7003         JNZ       ??MAC_CbackEvent_4
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   000063   7003         JNZ       $+5
   \   000065   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000068   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    159              {
    160                mac_msg_deallocate( (uint8 **)&pData );
    161                return;
    162              }
    163              msgPtr = pData;
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FE           MOV       R6,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FF           MOV       R7,A
   \   00007E   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    164            }
    165            else
    166            {
    167              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   000081   7405         MOV       A,#0x5
   \   000083   65..         XRL       A,?V3
   \   000085   7015         JNZ       ??MAC_CbackEvent_6
    168              {
    169                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000087   85..82       MOV       DPL,?XSP + 0
   \   00008A   85..83       MOV       DPH,?XSP + 1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F8           MOV       R0,A
   \   00008F   12....       LCALL     ?Subroutine3 & 0xFFFF
    170              }
   \                     ??CrossCallReturnLabel_9:
   \   000092   7900         MOV       R1,#0x0
   \   000094   2421         ADD       A,#0x21
   \   000096   F8           MOV       R0,A
   \   000097   502E         JNC       ??MAC_CbackEvent_7
   \   000099   09           INC       R1
   \   00009A   802B         SJMP      ??MAC_CbackEvent_7
    171              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   00009C   7407         MOV       A,#0x7
   \   00009E   65..         XRL       A,?V3
   \   0000A0   7031         JNZ       ??MAC_CbackEvent_8
    172              {
    173                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A2   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   700F         JNZ       ??MAC_CbackEvent_9
    174                {
    175                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   241B         ADD       A,#0x1b
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   3400         ADDC      A,#0x0
   \   0000B5   801B         SJMP      ??MAC_CbackEvent_10
    176                }
    177                else
    178                {
    179                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000B7   85..82       MOV       DPL,?XSP + 0
   \   0000BA   85..83       MOV       DPH,?XSP + 1
   \   0000BD   12....       LCALL     ?Subroutine3 & 0xFFFF
    180                }
    181              }
   \                     ??CrossCallReturnLabel_10:
   \   0000C0   75F021       MOV       B,#0x21
   \   0000C3   A4           MUL       AB
   \   0000C4   F8           MOV       R0,A
   \   0000C5   A9F0         MOV       R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   28           ADD       A,R0
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000D2   F0           MOVX      @DPTR,A
    182          
    183              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000D3                ; Setup parameters for call to function osal_msg_allocate
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FA           MOV       R2,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000E0   8A..         MOV       ?V0,R2
   \   0000E2   8B..         MOV       ?V1,R3
   \   0000E4   AE..         MOV       R6,?V0
   \   0000E6   AF..         MOV       R7,?V1
   \   0000E8   EE           MOV       A,R6
   \   0000E9   4F           ORL       A,R7
   \   0000EA   7047         JNZ       ??MAC_CbackEvent_11
    184              {
    185                // Not enough memory. If data confirm - try again
    186                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   0000EC   740C         MOV       A,#0xc
   \   0000EE   65..         XRL       A,?V3
   \   0000F0   6003         JZ        $+5
   \   0000F2   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
   \   0000F5   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000F8   7003         JNZ       $+5
   \   0000FA   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    187                {
    188                  halIntState_t intState;
    189          
    190                  // This is not normally deallocated here because the pZMac_AppCallback()
    191                  // application may need it.
    192                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000FD   A2AF         MOV       C,0xa8.7
   \   0000FF   E4           CLR       A
   \   000100   33           RLC       A
   \   000101   F5..         MOV       ?V0,A
   \   000103   C2AF         CLR       0xa8.7
    193          
    194                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000105                ; Setup parameters for call to function mac_msg_deallocate
   \   000105   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000108   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    195                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00010B                ; Setup parameters for call to function osal_msg_allocate
   \   00010B   7402         MOV       A,#0x2
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FA           MOV       R2,A
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   FB           MOV       R3,A
   \   000115   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000118   8A..         MOV       ?V4,R2
   \   00011A   8B..         MOV       ?V5,R3
   \   00011C   AE..         MOV       R6,?V4
   \   00011E   AF..         MOV       R7,?V5
   \   000120   EE           MOV       A,R6
   \   000121   4F           ORL       A,R7
   \   000122   7009         JNZ       ??MAC_CbackEvent_12
    196                  {
    197                    // Still no allocation, something is wrong
    198                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000124   E5..         MOV       A,?V0
   \   000126   A2E0         MOV       C,0xE0 /* A   */.0
   \   000128   92AF         MOV       0xa8.7,C
    199                    return;
   \   00012A   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    200                  }
    201                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   00012D   E5..         MOV       A,?V0
   \   00012F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000131   92AF         MOV       0xa8.7,C
    202                }
    203                else
    204                {
    205                  // This message is dropped
    206                  return;
    207                }
    208              }
    209              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   000133                ; Setup parameters for call to function osal_memcpy
   \   000133   85..82       MOV       DPL,?XSP + 0
   \   000136   85..83       MOV       DPH,?XSP + 1
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F5..         MOV       ?V0,A
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   F5..         MOV       ?V1,A
   \   000140   75..00       MOV       ?V2,#0x0
   \   000143   78..         MOV       R0,#?V0
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000148   A8..         MOV       R0,?V3
   \   00014A   12....       LCALL     ?Subroutine8 & 0xFFFF
    210            }
   \                     ??CrossCallReturnLabel_20:
   \   00014D   FC           MOV       R4,A
   \   00014E   7D00         MOV       R5,#0x0
   \   000150   EE           MOV       A,R6
   \   000151   FA           MOV       R2,A
   \   000152   EF           MOV       A,R7
   \   000153   FB           MOV       R3,A
   \   000154   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000157   7403         MOV       A,#0x3
   \   000159   12....       LCALL     ?DEALLOC_XSTACK8
    211          
    212            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   00015C   7405         MOV       A,#0x5
   \   00015E   65..         XRL       A,?V3
   \   000160   707A         JNZ       ??MAC_CbackEvent_13
    213            {
    214              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    215          
    216              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000162   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000165   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000168   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016B   7C21         MOV       R4,#0x21
   \   00016D   7D00         MOV       R5,#0x0
   \   00016F   AA..         MOV       R2,?V4
   \   000171   AB..         MOV       R3,?V5
   \   000173   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000176   7403         MOV       A,#0x3
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
    217              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00017B   8E82         MOV       DPL,R6
   \   00017D   8F83         MOV       DPH,R7
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   E5..         MOV       A,?V4
   \   000184   F0           MOVX      @DPTR,A
   \   000185   A3           INC       DPTR
   \   000186   E5..         MOV       A,?V5
   \   000188   F0           MOVX      @DPTR,A
    218              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000189   EE           MOV       A,R6
   \   00018A   2409         ADD       A,#0x9
   \   00018C   F5..         MOV       ?V6,A
   \   00018E   E4           CLR       A
   \   00018F   3F           ADDC      A,R7
   \   000190   F5..         MOV       ?V7,A
   \   000192                ; Setup parameters for call to function osal_memcpy
   \   000192   85..82       MOV       DPL,?V6
   \   000195   F583         MOV       DPH,A
   \   000197   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019D   8E82         MOV       DPL,R6
   \   00019F   8F83         MOV       DPH,R7
   \   0001A1   A3           INC       DPTR
   \   0001A2   A3           INC       DPTR
   \   0001A3   A3           INC       DPTR
   \   0001A4   A3           INC       DPTR
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   A3           INC       DPTR
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   FC           MOV       R4,A
   \   0001AB   7D00         MOV       R5,#0x0
   \   0001AD   E5..         MOV       A,?V4
   \   0001AF   2421         ADD       A,#0x21
   \   0001B1   FA           MOV       R2,A
   \   0001B2   E4           CLR       A
   \   0001B3   35..         ADDC      A,?V5
   \   0001B5   FB           MOV       R3,A
   \   0001B6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B9   7403         MOV       A,#0x3
   \   0001BB   12....       LCALL     ?DEALLOC_XSTACK8
    219              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001BE   8E82         MOV       DPL,R6
   \   0001C0   8F83         MOV       DPH,R7
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   2421         ADD       A,#0x21
   \   0001C8   F8           MOV       R0,A
   \   0001C9   A3           INC       DPTR
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   3400         ADDC      A,#0x0
   \   0001CD   F9           MOV       R1,A
   \   0001CE   85..82       MOV       DPL,?V6
   \   0001D1   85..83       MOV       DPH,?V7
   \   0001D4   E8           MOV       A,R0
   \   0001D5   F0           MOVX      @DPTR,A
   \   0001D6   A3           INC       DPTR
   \   0001D7   E9           MOV       A,R1
   \   0001D8   F0           MOVX      @DPTR,A
   \   0001D9   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    220            }
    221            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001DC   7407         MOV       A,#0x7
   \   0001DE   65..         XRL       A,?V3
   \   0001E0   6003         JZ        $+5
   \   0001E2   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    222            {
    223              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    224          
    225              if (ZMac_ScanBuf != NULL)
   \   0001E5   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001E8   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001EB   7003         JNZ       $+5
   \   0001ED   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    226              {
    227                void *pTmp = ZMac_ScanBuf;
   \   0001F0   7404         MOV       A,#0x4
   \   0001F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F5   E8           MOV       A,R0
   \   0001F6   F0           MOVX      @DPTR,A
   \   0001F7   A3           INC       DPTR
   \   0001F8   E9           MOV       A,R1
   \   0001F9   F0           MOVX      @DPTR,A
    228                ZMac_ScanBuf = NULL;
   \   0001FA   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001FD   E4           CLR       A
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   A3           INC       DPTR
   \   000200   F0           MOVX      @DPTR,A
    229          
    230                if (pScan->scanType == ZMAC_ED_SCAN)
   \   000201   8E82         MOV       DPL,R6
   \   000203   8F83         MOV       DPH,R7
   \   000205   A3           INC       DPTR
   \   000206   A3           INC       DPTR
   \   000207   E0           MOVX      A,@DPTR
   \   000208   7027         JNZ       ??MAC_CbackEvent_14
    231                {
    232                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   00020A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00020D   EE           MOV       A,R6
   \   00020E   2409         ADD       A,#0x9
   \   000210   F5..         MOV       ?V6,A
   \   000212   E4           CLR       A
   \   000213   3F           ADDC      A,R7
   \   000214   85..82       MOV       DPL,?V6
   \   000217   F583         MOV       DPH,A
   \   000219   E5..         MOV       A,?V4
   \   00021B   F0           MOVX      @DPTR,A
   \   00021C   A3           INC       DPTR
   \   00021D   E5..         MOV       A,?V5
   \   00021F   F0           MOVX      @DPTR,A
    233                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000220                ; Setup parameters for call to function osal_memcpy
   \   000220   7404         MOV       A,#0x4
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   12....       LCALL     ?Subroutine1 & 0xFFFF
    234                }
   \                     ??CrossCallReturnLabel_5:
   \   000228   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022B   7C1B         MOV       R4,#0x1b
   \   00022D   7D00         MOV       R5,#0x0
   \   00022F   802F         SJMP      ??MAC_CbackEvent_15
    235                else
    236                {
    237                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   000231   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   E5..         MOV       A,?V4
   \   00023C   F0           MOVX      @DPTR,A
   \   00023D   A3           INC       DPTR
   \   00023E   E5..         MOV       A,?V5
   \   000240   F0           MOVX      @DPTR,A
    238                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000241                ; Setup parameters for call to function osal_memcpy
   \   000241   7404         MOV       A,#0x4
   \   000243   12....       LCALL     ?XSTACK_DISP0_8
   \   000246   12....       LCALL     ?Subroutine1 & 0xFFFF
    239                }
   \                     ??CrossCallReturnLabel_6:
   \   000249   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00024C   8E82         MOV       DPL,R6
   \   00024E   8F83         MOV       DPH,R7
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   A3           INC       DPTR
   \   000256   A3           INC       DPTR
   \   000257   A3           INC       DPTR
   \   000258   E0           MOVX      A,@DPTR
   \   000259   75F021       MOV       B,#0x21
   \   00025C   A4           MUL       AB
   \   00025D   FC           MOV       R4,A
   \   00025E   ADF0         MOV       R5,B
   \                     ??MAC_CbackEvent_15:
   \   000260   AA..         MOV       R2,?V4
   \   000262   AB..         MOV       R3,?V5
   \   000264   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000267   7403         MOV       A,#0x3
   \   000269   12....       LCALL     ?DEALLOC_XSTACK8
    240          
    241                osal_mem_free(pTmp);
   \   00026C                ; Setup parameters for call to function osal_mem_free
   \   00026C   7404         MOV       A,#0x4
   \   00026E   12....       LCALL     ?XSTACK_DISP0_8
   \   000271   E0           MOVX      A,@DPTR
   \   000272   FA           MOV       R2,A
   \   000273   A3           INC       DPTR
   \   000274   E0           MOVX      A,@DPTR
   \   000275   FB           MOV       R3,A
   \   000276   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    242              }
    243            }
    244          
    245            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000279   90....       MOV       DPTR,#pZMac_AppCallback
   \   00027C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00027F   6012         JZ        ??MAC_CbackEvent_16
   \   000281                ; Setup parameters for indirect call
   \   000281   EE           MOV       A,R6
   \   000282   FA           MOV       R2,A
   \   000283   EF           MOV       A,R7
   \   000284   FB           MOV       R3,A
   \   000285   E0           MOVX      A,@DPTR
   \   000286   F583         MOV       DPH,A
   \   000288   8882         MOV       DPL,R0
   \   00028A   12....       LCALL     ?CALL_IND
   \   00028D   E9           MOV       A,R1
   \   00028E   6003         JZ        $+5
   \   000290   02....       LJMP      ??MAC_CbackEvent_17 & 0xFFFF
    246            {
    247              // Filter out non-zigbee packets
    248              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   000293   740D         MOV       A,#0xd
   \   000295   65..         XRL       A,?V3
   \   000297   6003         JZ        $+5
   \   000299   02....       LJMP      ??MAC_CbackEvent_18 & 0xFFFF
    249              {
    250                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    251                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    252                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00029C   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00029F   F9           MOV       R1,A
   \   0002A0   8882         MOV       DPL,R0
   \   0002A2   8983         MOV       DPH,R1
   \   0002A4   A3           INC       DPTR
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   FA           MOV       R2,A
    253                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    254                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   0002A7   8882         MOV       DPL,R0
   \   0002A9   8983         MOV       DPH,R1
   \   0002AB   E0           MOVX      A,@DPTR
   \   0002AC   5403         ANL       A,#0x3
   \   0002AE   C3           CLR       C
   \   0002AF   9402         SUBB      A,#0x2
   \   0002B1   502C         JNC       ??MAC_CbackEvent_3
   \   0002B3   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002B6   F583         MOV       DPH,A
   \   0002B8   8882         MOV       DPL,R0
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   13           RRC       A
   \   0002BC   13           RRC       A
   \   0002BD   543F         ANL       A,#0x3f
   \   0002BF   540F         ANL       A,#0xf
   \   0002C1   F8           MOV       R0,A
   \   0002C2   90....       MOV       DPTR,#_NIB + 17
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   68           XRL       A,R0
   \   0002C7   7016         JNZ       ??MAC_CbackEvent_3
   \   0002C9   74E0         MOV       A,#-0x20
   \   0002CB   5A           ANL       A,R2
   \   0002CC   7011         JNZ       ??MAC_CbackEvent_3
   \   0002CE   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0002D1   C8           XCH       A,R0
   \   0002D2   241A         ADD       A,#0x1a
   \   0002D4   F582         MOV       DPL,A
   \   0002D6   E4           CLR       A
   \   0002D7   38           ADDC      A,R0
   \   0002D8   F583         MOV       DPH,A
   \   0002DA   E0           MOVX      A,@DPTR
   \   0002DB   6402         XRL       A,#0x2
   \   0002DD   6007         JZ        ??MAC_CbackEvent_19
    255                {
    256                  // Drop the message
    257                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   0002DF                ; Setup parameters for call to function mac_msg_deallocate
   \   0002DF   AA..         MOV       R2,?XSP + 0
   \   0002E1   AB..         MOV       R3,?XSP + 1
   \   0002E3   02....       LJMP      ??CrossCallReturnLabel_14 & 0xFFFF
    258                  return;
    259                }
    260                else
    261                {
    262                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   0002E6   EE           MOV       A,R6
   \   0002E7   2412         ADD       A,#0x12
   \   0002E9   F8           MOV       R0,A
   \   0002EA   E4           CLR       A
   \   0002EB   3F           ADDC      A,R7
   \   0002EC   F9           MOV       R1,A
    263                  // See if LQI needs adjustment due to frame correlation
    264                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002ED                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002ED   E8           MOV       A,R0
   \   0002EE   241C         ADD       A,#0x1c
   \   0002F0   FA           MOV       R2,A
   \   0002F1   E4           CLR       A
   \   0002F2   39           ADDC      A,R1
   \   0002F3   FB           MOV       R3,A
   \   0002F4   E8           MOV       A,R0
   \   0002F5   241D         ADD       A,#0x1d
   \   0002F7   F582         MOV       DPL,A
   \   0002F9   E4           CLR       A
   \   0002FA   39           ADDC      A,R1
   \   0002FB   F583         MOV       DPH,A
   \   0002FD   E0           MOVX      A,@DPTR
   \   0002FE   F9           MOV       R1,A
   \   0002FF   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    265          
    266                  // Look for broadcast message that has a radius of greater 1
    267                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    268                         && (pData->dataInd.msdu.p[6] > 1) )
   \   000302   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000305   C8           XCH       A,R0
   \   000306   241B         ADD       A,#0x1b
   \   000308   F582         MOV       DPL,A
   \   00030A   E4           CLR       A
   \   00030B   38           ADDC      A,R0
   \   00030C   F583         MOV       DPH,A
   \   00030E   E0           MOVX      A,@DPTR
   \   00030F   F4           CPL       A
   \   000310   7003         JNZ       ??MAC_CbackEvent_20
   \   000312   A3           INC       DPTR
   \   000313   E0           MOVX      A,@DPTR
   \   000314   F4           CPL       A
   \                     ??MAC_CbackEvent_20:
   \   000315   7061         JNZ       ??MAC_CbackEvent_21
   \   000317   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00031A   C8           XCH       A,R0
   \   00031B   2406         ADD       A,#0x6
   \   00031D   F582         MOV       DPL,A
   \   00031F   E4           CLR       A
   \   000320   38           ADDC      A,R0
   \   000321   F583         MOV       DPH,A
   \   000323   E0           MOVX      A,@DPTR
   \   000324   C3           CLR       C
   \   000325   9402         SUBB      A,#0x2
   \   000327   404F         JC        ??MAC_CbackEvent_21
    269                  {
    270                    // Send the messsage to a special broadcast queue
    271                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   000329                ; Setup parameters for call to function nwk_broadcastSend
   \   000329   EE           MOV       A,R6
   \   00032A   FA           MOV       R2,A
   \   00032B   EF           MOV       A,R7
   \   00032C   FB           MOV       R3,A
   \   00032D   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   000330   E9           MOV       A,R1
   \   000331   6062         JZ        ??MAC_CbackEvent_0
    272                    {
    273                      // Drop the message, too many broadcast messages to process
    274                      mac_msg_deallocate( (uint8 **)&pData );
   \   000333                ; Setup parameters for call to function mac_msg_deallocate
   \   000333   AA..         MOV       R2,?XSP + 0
   \   000335   AB..         MOV       R3,?XSP + 1
   \   000337   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    275                    }
    276                    return;
   \                     ??MAC_CbackEvent_22:
   \   00033A   8059         SJMP      ??MAC_CbackEvent_0
    277                  }
    278                }
    279              }
    280              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_18:
   \   00033C   740C         MOV       A,#0xc
   \   00033E   65..         XRL       A,?V3
   \   000340   7036         JNZ       ??MAC_CbackEvent_21
   \   000342   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000345   A3           INC       DPTR
   \   000346   E0           MOVX      A,@DPTR
   \   000347   641A         XRL       A,#0x1a
   \   000349   602D         JZ        ??MAC_CbackEvent_21
    281              {
    282                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    283                
    284                if (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK)
   \   00034B   8E82         MOV       DPL,R6
   \   00034D   8F83         MOV       DPH,R7
   \   00034F   A3           INC       DPTR
   \   000350   A3           INC       DPTR
   \   000351   A3           INC       DPTR
   \   000352   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000355   C8           XCH       A,R0
   \   000356   240E         ADD       A,#0xe
   \   000358   F582         MOV       DPL,A
   \   00035A   E4           CLR       A
   \   00035B   38           ADDC      A,R0
   \   00035C   F583         MOV       DPH,A
   \   00035E   E0           MOVX      A,@DPTR
   \   00035F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000361   5015         JNC       ??MAC_CbackEvent_21
    285                {
    286                  // See if LQI needs adjustment due to frame correlation
    287                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000363                ; Setup parameters for call to function ZMacLqiAdjust
   \   000363   EE           MOV       A,R6
   \   000364   240C         ADD       A,#0xc
   \   000366   FA           MOV       R2,A
   \   000367   E4           CLR       A
   \   000368   3F           ADDC      A,R7
   \   000369   FB           MOV       R3,A
   \   00036A   EE           MOV       A,R6
   \   00036B   240D         ADD       A,#0xd
   \   00036D   F582         MOV       DPL,A
   \   00036F   E4           CLR       A
   \   000370   3F           ADDC      A,R7
   \   000371   F583         MOV       DPH,A
   \   000373   E0           MOVX      A,@DPTR
   \   000374   F9           MOV       R1,A
   \   000375   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    288                }
    289              }
    290          
    291              // Application hasn't already processed this message. Send it to NWK task.
    292              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_21:
   \   000378                ; Setup parameters for call to function osal_msg_send
   \   000378   EE           MOV       A,R6
   \   000379   FA           MOV       R2,A
   \   00037A   EF           MOV       A,R7
   \   00037B   FB           MOV       R3,A
   \   00037C   90....       MOV       DPTR,#NWK_TaskID
   \   00037F   E0           MOVX      A,@DPTR
   \   000380   F9           MOV       R1,A
   \   000381   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    293            }
    294          
    295            if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_17:
   \   000384   740C         MOV       A,#0xc
   \   000386   65..         XRL       A,?V3
   \   000388   700B         JNZ       ??MAC_CbackEvent_0
   \   00038A   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00038D   6006         JZ        ??MAC_CbackEvent_0
    296            {
    297              // If the application needs 'pDataReq' then we cannot free it here.
    298              // The application must free it after using it. Note that 'pDataReq'
    299              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    300          
    301              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00038F                ; Setup parameters for call to function mac_msg_deallocate
   \   00038F   12....       LCALL     ?Subroutine5 & 0xFFFF
    302            }
   \                     ??CrossCallReturnLabel_14:
   \   000392   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    303          #endif
    304          }
   \                     ??MAC_CbackEvent_0:
   \   000395   7406         MOV       A,#0x6
   \   000397   12....       LCALL     ?DEALLOC_XSTACK8
   \   00039A   7F08         MOV       R7,#0x8
   \   00039C   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00039F                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   E4           CLR       A
   \   00000B   93           MOVC      A,@A+DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F5..         MOV       ?V4,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2403         ADD       A,#0x3
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2408         ADD       A,#0x8
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine14_0
   \   000006                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    305          #else  // ifdef MT_MAC_CB_FUNC
    306          {
    307            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    308            switch (pData->hdr.event)
    309            {
    310              case MAC_MLME_ASSOCIATE_IND:
    311                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    312                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    313                break;
    314          
    315              case MAC_MLME_ASSOCIATE_CNF:
    316                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    317                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    318                break;
    319          
    320              case MAC_MLME_DISASSOCIATE_IND:
    321                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    322                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    323                break;
    324          
    325              case MAC_MLME_DISASSOCIATE_CNF:
    326                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    327                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    328                break;
    329          
    330              case MAC_MLME_BEACON_NOTIFY_IND:
    331                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    332                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    333                break;
    334          
    335              case MAC_MLME_ORPHAN_IND:
    336                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    337                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    338                break;
    339          
    340              case MAC_MLME_SCAN_CNF:
    341                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    342                {
    343                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    344                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    345                }
    346          
    347                if (ZMac_ScanBuf != NULL)
    348                {
    349                  void *pTmp = ZMac_ScanBuf;
    350                  ZMac_ScanBuf = NULL;
    351                  osal_mem_free(pTmp);
    352                }
    353                break;
    354          
    355              case MAC_MLME_START_CNF:
    356                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    357                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    358                break;
    359          
    360              case MAC_MLME_SYNC_LOSS_IND:
    361                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    362                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    363                break;
    364          
    365              case MAC_MLME_POLL_CNF:
    366                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    367                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    368                break;
    369          
    370              case MAC_MLME_COMM_STATUS_IND:
    371                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    372                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    373                break;
    374          
    375              case MAC_MCPS_DATA_CNF:
    376                if (pData->dataCnf.pDataReq != NULL)
    377                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    378          
    379                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    380                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    381                break;
    382          
    383              case MAC_MCPS_DATA_IND:
    384                {
    385                  /*
    386                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    387                     buffer and re-organize the contents into ZMAC format.
    388                  */
    389                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    390                  uint8 event, status, len, *msdu;
    391          
    392                  /* Store parameters */
    393                  event = pData->hdr.event;
    394                  status = pData->hdr.status;
    395                  len = pData->dataInd.msdu.len;
    396                  msdu = pData->dataInd.msdu.p;
    397          
    398                  /* Copy security fields */
    399                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    400                  
    401                  /* Copy mac fields one by one since the two buffers overlap. */
    402                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    403                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    404                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    405                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    406                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    407                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    408                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    409                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    410                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    411                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    412          
    413                  /* Restore parameters */
    414                  pDataInd->hdr.Status = status;
    415                  pDataInd->hdr.Event = event;
    416                  pDataInd->msduLength = len;
    417          
    418                  if (len)
    419                    pDataInd->msdu = msdu;
    420                  else
    421                    pDataInd->msdu = NULL;
    422          
    423                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    424                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    425                }
    426          
    427                /* free buffer */
    428                mac_msg_deallocate( (uint8 **)&pData );
    429                break;
    430          
    431              case MAC_MCPS_PURGE_CNF:
    432                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    433                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    434                break;
    435          
    436              default:
    437                break;
    438            }
    439          }
    440          #endif
    441          
    442          /********************************************************************************************************
    443           * @fn      MAC_CbackCheckPending
    444           *
    445           * @brief   Return number of pending indirect msg
    446           *
    447           * @param   None
    448           *
    449           * @return  Number of indirect msg holding
    450           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    452          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    453          #if !defined (NONWK)
    454            if ( ZSTACK_ROUTER_BUILD )
    455            {
    456              return (nwkDB_ReturnIndirectHoldingCnt());
    457            }
    458            else
    459            {
    460              return (0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    461            }
    462          #else
    463            return (0);
    464          #endif
    465          }
    466          
    467          /********************************************************************************************************
    468           * @fn      ZMacLqiAdjustMode
    469           *
    470           * @brief   Sets/return LQI adjust mode
    471           *
    472           * @param   mode - LQI_ADJ_GET = return current mode only
    473           *                 LQI_ADJ_OFF = disable LQI adjusts
    474           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    475           *
    476           * @return  current LQI adjust mode
    477           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    479          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    480            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    481            {
    482              lqiAdjMode = mode;
   \   00000B   E8           MOV       A,R0
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    483            }
    484            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
    485          }
    486          
    487          #if !defined NONWK
    488          /********************************************************************************************************
    489           * @fn      ZMacLqiAdjust
    490           *
    491           * @brief   Adjust LQI according to correlation value
    492           *
    493           * @notes - the IEEE 802.15.4 specification provides some general statements on
    494           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    495           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    496           *          802.15.4 signals detectable by the receiver, and LQ values should be
    497           *          uniformly distributed between these two limits." Section E.2.3: "The
    498           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    499           *          received packet. When energy level and SNR information are combined,
    500           *          they can indicate whether a corrupt packet resulted from low signal
    501           *          strength or from high signal strength plus interference."
    502           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    503           *          packet correlation value (related to SNR) to scale incoming LQI value
    504           *          (related to signal strength) to 'derate' noisy packets.
    505           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    506           *          implement their own proprietary LQI adjustment algorithm.
    507           *
    508           * @param   corr - packet correlation value
    509           * @param   lqi  - ptr to link quality (scaled rssi)
    510           *
    511           * @return  *lqi - adjusted link quality
    512           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    515            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    516            {
    517              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV       DPL,R4
   \   000013   8D83         MOV       DPH,R5
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    518          
    519              // Keep correlation within theoretical limits
    520              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    521              {
    522                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    523              }
    524              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    525              {
    526                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    527              }
    528          
    529              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    530              {
    531                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    532                           which is computed from the incoming correlation value between
    533                           theorectical minimum/maximum values. This is a very simple way
    534                           of 'derating' the incoming LQI as correlation value drops. */
    535                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85..F0       MOV       B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   85..F0       MOV       B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    536              }
    537              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    538              {
    539                /* MODE2 - location for developer to implement a proprietary algorithm */
    540              }
    541          
    542              // Replace incoming LQI with scaled value
    543              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    544            }
    545          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjustMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjust::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust
    546          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   MAC_CbackCheckPending
      0     25   MAC_CbackEvent
        0     22   -> MAC_MlmeGetReq
        0     22   -> ZMacLqiAdjust
        0     22   -> mac_msg_deallocate
        0     22   -> nwk_broadcastSend
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_msg_allocate
        0     22   -> osal_msg_send
      1     32   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine14_0
       7  ?Subroutine0
      10  ?Subroutine1
       7  ?Subroutine10
      10  ?Subroutine11
       8  ?Subroutine12
       6  ?Subroutine13
       8  ?Subroutine2
      13  ?Subroutine3
       4  ?Subroutine4
      16  ?Subroutine5
       4  ?Subroutine6
      11  ?Subroutine7
      13  ?Subroutine8
       6  ?Subroutine9
       5  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
     927  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
     103  ZMacLqiAdjust
       6  ZMacLqiAdjust::?relay
      28  ZMacLqiAdjustMode
       6  ZMacLqiAdjustMode::?relay
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 191 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    41 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 191 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
