###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               25/Aug/2024  15:10:37
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c
#    Command line       =  
#        -f C:\user\EWB64.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c" -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List\MT_UART.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj\MT_UART.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV       A,#-0x1d
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV       DPTR,#App_TaskID
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   04           INC       A
   \   000015   F0           MOVX      @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   7404         MOV       A,#0x4
   \   00001B   F0           MOVX      @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7440         MOV       A,#0x40
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV       A,#0xa
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   7480         MOV       A,#-0x80
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   7480         MOV       A,#-0x80
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E4           CLR       A
   \   000043   F0           MOVX      @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7406         MOV       A,#0x6
   \   00004B   F0           MOVX      @DPTR,A
    114            uartConfig.intEnable            = TRUE; //ÖÐ¶Ï
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   7401         MOV       A,#0x1
   \   000053   F0           MOVX      @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData; //·¢ËÍÏûÏ¢¡¢½ÓÊÕÏûÏ¢£¬µ÷ÓÃ»Øµ÷º¯Êý
   \   000054   741B         MOV       A,#0x1b
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   74..         MOV       A,#`??MT_UartProcessZToolData::?relay` & 0xff
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   74..         MOV       A,#(`??MT_UartProcessZToolData::?relay` >> 8) & 0xff
   \   00005F   F0           MOVX      @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000060                ; Setup parameters for call to function HalUARTOpen
   \   000060   AA..         MOV       R2,?XSP + 0
   \   000062   AB..         MOV       R3,?XSP + 1
   \   000064   7900         MOV       R1,#0x0
   \   000066   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   000069   741D         MOV       A,#0x1d
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#App_TaskID
   \   000008   F0           MOVX      @DPTR,A
    153          }
   \   000009   80..         SJMP      ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV       R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV       R0,#0x0
   \   00000A   800E         SJMP      ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   C9           XCH       A,R1
   \   000012   69           XRL       A,R1
   \   000013   F9           MOV       R1,A
   \   000014   08           INC       R0
   \   000015   A3           INC       DPTR
   \   000016   AA82         MOV       R2,DPL
   \   000018   AB83         MOV       R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV       A,R0
   \   00001B   C3           CLR       C
   \   00001C   9C           SUBB      A,R4
   \   00001D   40ED         JC        ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   80..         SJMP      ?Subroutine0
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    196          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV       A,#-0x80
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    197            uint8 i = 0;
   \   00000C   7F00         MOV       R7,#0x0
    198            uint8 rx_buf[MT_UART_DEFAULT_MAX_RX_BUFF], rx_len = 0;
   \   00000E   75..00       MOV       ?V0,#0x0
    199            (void)event;
   \   000011   801B         SJMP      ??MT_UartProcessZToolData_0
    200            while (Hal_UART_RxBufLen(port)){   //Ñ­»·½« DMA ÖÐ½ÓÊÕµ½µÄ´®¿ÚÊý¾Ý¶Á³öÀ´£¬²¢·ÅÈë»º³åÇø rx_buf£»
    201              HalUARTRead(port, &rx_buf[rx_len], 1);
   \                     ??MT_UartProcessZToolData_1:
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C01         MOV       R4,#0x1
   \   000015   7D00         MOV       R5,#0x0
   \   000017   A8..         MOV       R0,?V0
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E582         MOV       A,DPL
   \   000021   28           ADD       A,R0
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   3583         ADDC      A,DPH
   \   000026   FB           MOV       R3,A
   \   000027   EE           MOV       A,R6
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    202              rx_len++;
   \   00002C   05..         INC       ?V0
    203            }
   \                     ??MT_UartProcessZToolData_0:
   \   00002E                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00002E   EE           MOV       A,R6
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000033   8B..         MOV       ?V3,R3
   \   000035   EA           MOV       A,R2
   \   000036   45..         ORL       A,?V3
   \   000038   70D9         JNZ       ??MT_UartProcessZToolData_1
    204             if (rx_len != 0) {          //È·±£»º³åÇøÖÐÓÐÊý¾Ý£»
   \   00003A   E5..         MOV       A,?V0
   \   00003C   6079         JZ        ??MT_UartProcessZToolData_2
    205                 pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof( mtOSALSerialData_t ) + rx_len + 1);//ÎªÏûÏ¢·ÖÅäÄÚ´æ¿Õ¼ä£»
   \   00003E                ; Setup parameters for call to function osal_msg_allocate
   \   00003E   2405         ADD       A,#0x5
   \   000040   FA           MOV       R2,A
   \   000041   E4           CLR       A
   \   000042   3400         ADDC      A,#0x0
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000048   90....       MOV       DPTR,#pMsg
   \   00004B   EA           MOV       A,R2
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EB           MOV       A,R3
   \   00004F   F0           MOVX      @DPTR,A
    206                 pMsg->hdr.event = CMD_SERIAL_MSG;       //Ö¸¶¨ÁËÏûÏ¢µÄÀàÐÍ£¬½«´®¿ÚÊý¾Ý¸´ÖÆµ½ÏûÏ¢µÄÊý¾ÝÇø£¬Êý¾ÝµÄ¸ñÊ½Îª£ºÊý¾Ý³¤¶È+Êý¾Ý
   \   000050   90....       MOV       DPTR,#pMsg
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F583         MOV       DPH,A
   \   000059   8882         MOV       DPL,R0
   \   00005B   7401         MOV       A,#0x1
   \   00005D   F0           MOVX      @DPTR,A
    207                 pMsg->msg = (uint8*)(pMsg + 1);
   \   00005E   90....       MOV       DPTR,#pMsg
   \   000061   E0           MOVX      A,@DPTR
   \   000062   2404         ADD       A,#0x4
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   3400         ADDC      A,#0x0
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00006D   E8           MOV       A,R0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E9           MOV       A,R1
   \   000071   F0           MOVX      @DPTR,A
    208                 pMsg->msg[0] = rx_len;
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   E5..         MOV       A,?V0
   \   000078   F0           MOVX      @DPTR,A
    209                 for (i = 0; i < rx_len; i++){
    210                   pMsg->msg[i + 1] = rx_buf[i];
   \                     ??MT_UartProcessZToolData_3:
   \   000079   EF           MOV       A,R7
   \   00007A   F8           MOV       R0,A
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   E582         MOV       A,DPL
   \   000083   28           ADD       A,R0
   \   000084   F582         MOV       DPL,A
   \   000086   E4           CLR       A
   \   000087   3583         ADDC      A,DPH
   \   000089   F583         MOV       DPH,A
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   C0E0         PUSH      A
   \   00008E   12....       LCALL     ?Subroutine1 & 0xFFFF
    211                 }
   \                     ??CrossCallReturnLabel_1:
   \   000091   E0           MOVX      A,@DPTR
   \   000092   28           ADD       A,R0
   \   000093   FA           MOV       R2,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   3400         ADDC      A,#0x0
   \   000098   8A82         MOV       DPL,R2
   \   00009A   F583         MOV       DPH,A
   \   00009C   A3           INC       DPTR
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   0F           INC       R7
   \   0000A1   EF           MOV       A,R7
   \   0000A2   C3           CLR       C
   \   0000A3   95..         SUBB      A,?V0
   \   0000A5   40D2         JC        ??MT_UartProcessZToolData_3
    212             osal_msg_send( App_TaskID, (byte *)pMsg );//½«ÏûÏ¢·¢ËÍ¸øÖ¸¶¨ task_id µÄÈÎÎñ¡£
   \   0000A7                ; Setup parameters for call to function osal_msg_send
   \   0000A7   90....       MOV       DPTR,#pMsg
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FA           MOV       R2,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FB           MOV       R3,A
   \   0000AF   90....       MOV       DPTR,#App_TaskID
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    213             }
    214          }
   \                     ??MT_UartProcessZToolData_2:
   \   0000B7   7480         MOV       A,#-0x80
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   7F04         MOV       R7,#0x4
   \   0000BE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV       DPTR,#pMsg
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartRegisterTaskID::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartCalcFCS::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartProcessZToolData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    215          
    216          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    217          /***************************************************************************************************
    218           * @fn      MT_UartProcessZAppData
    219           *
    220           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    221           *          |  1  |  2   |       1         |  1   |
    222           *
    223           *          Parses the data and determine either is SPI or just simply serial data
    224           *          then send the data to correct place (MT or APP)
    225           *
    226           * @param   port    - UART port
    227           *          event   - Event that causes the callback
    228           *
    229           *
    230           * @return  None
    231           ***************************************************************************************************/
    232          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    233          {
    234          
    235            osal_event_hdr_t  *msg_ptr;
    236            uint16 length = 0;
    237            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    238          
    239            /*
    240               If maxZAppBufferLength is 0 or larger than current length
    241               the entire length of the current buffer is returned.
    242            */
    243            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    244            {
    245              length = MT_UartMaxZAppBufLen;
    246            }
    247            else
    248            {
    249              length = rxBufLen;
    250            }
    251          
    252            /* Verify events */
    253            if (event == HAL_UART_TX_FULL)
    254            {
    255              // Do something when TX if full
    256              return;
    257            }
    258          
    259            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    260            {
    261              if ( App_TaskID )
    262              {
    263                /*
    264                   If Application is ready to receive and there is something
    265                   in the Rx buffer then send it up
    266                */
    267                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    268                {
    269                  /* Disable App flow control until it processes the current data */
    270                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    271          
    272                  /* 2 more bytes are added, 1 for CMD type, other for length */
    273                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    274                  if ( msg_ptr )
    275                  {
    276                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    277                    msg_ptr->status = length;
    278          
    279                    /* Read the data of Rx buffer */
    280                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    281          
    282                    /* Send the raw data to application...or where ever */
    283                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    284                  }
    285                }
    286              }
    287            }
    288          }
    289          
    290          /***************************************************************************************************
    291           * @fn      SPIMgr_ZAppBufferLengthRegister
    292           *
    293           * @brief
    294           *
    295           * @param   maxLen - Max Length that the application wants at a time
    296           *
    297           * @return  None
    298           *
    299           ***************************************************************************************************/
    300          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    301          {
    302            /* If the maxLen is larger than the RX buff, something is not right */
    303            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    304              MT_UartMaxZAppBufLen = maxLen;
    305            else
    306              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    307          }
    308          
    309          /***************************************************************************************************
    310           * @fn      SPIMgr_AppFlowControl
    311           *
    312           * @brief
    313           *
    314           * @param   status - ready to send or not
    315           *
    316           * @return  None
    317           *
    318           ***************************************************************************************************/
    319          void MT_UartAppFlowControl ( bool status )
    320          {
    321          
    322            /* Make sure only update if needed */
    323            if (status != MT_UartZAppRxStatus )
    324            {
    325              MT_UartZAppRxStatus = status;
    326            }
    327          
    328            /* App is ready to read again, ProcessZAppData have to be triggered too */
    329            if (status == MT_UART_ZAPP_RX_READY)
    330            {
    331              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    332            }
    333          
    334          }
    335          
    336          #endif //ZAPP
    337          
    338          /***************************************************************************************************
    339          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MT_UartCalcFCS
      2     29   MT_UartInit
        2     29   -> HalUARTOpen
      1    140   MT_UartProcessZToolData
        0    140   -> HalUARTRead
        0    140   -> Hal_UART_RxBufLen
        0    140   -> osal_msg_allocate
        0    140   -> osal_msg_send
      2      0   MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      14  ?Subroutine1
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      33  MT_UartCalcFCS
       6  MT_UartCalcFCS::?relay
     110  MT_UartInit
       6  MT_UartInit::?relay
     193  MT_UartProcessZToolData
       6  MT_UartProcessZToolData::?relay
      11  MT_UartRegisterTaskID
       6  MT_UartRegisterTaskID::?relay
       2  pMsg
       1  state
       1  tempDataLen

 
 368 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
 368 bytes of HUGECODE memory
   9 bytes of XDATA    memory

Errors: none
Warnings: none
