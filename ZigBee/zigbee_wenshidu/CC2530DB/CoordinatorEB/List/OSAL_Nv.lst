###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               24/Aug/2024  06:27:25
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\user\EWF832.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\CoordinatorEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2011-06-05 18:52:21 -0700 (Sun, 05 Jun 2011) $
      4            Revision:       $Revision: 26212 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV       R7,#0x0
    241            uint8 findDups = FALSE;
   \   00000C   75..00       MOV       ?V0,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV       R6,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV       ?V2,#0x8
   \   000019   75..00       MOV       ?V3,#0x0
   \   00001C   78..         MOV       R0,#?V2
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP102_8
   \   000026   7A00         MOV       R2,#0x0
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   EE           MOV       A,R6
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000034   85..82       MOV       DPL,?XSP + 0
   \   000037   85..83       MOV       DPH,?XSP + 1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F4           CPL       A
   \   00003C   7003         JNZ       ??initNV_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F4           CPL       A
   \                     ??initNV_1:
   \   000041   7013         JNZ       ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000043   90....       MOV       DPTR,#pgRes
   \   000046   E0           MOVX      A,@DPTR
   \   000047   7004         JNZ       ??initNV_3
    253                {
    254                  pgRes = pg;
   \   000049   EE           MOV       A,R6
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   8019         SJMP      ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004D                ; Setup parameters for call to function setPageUse
   \   00004D   7A01         MOV       R2,#0x1
   \   00004F   EE           MOV       A,R6
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000054   8010         SJMP      ??initNV_4
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F4           CPL       A
   \   00005D   7003         JNZ       ??initNV_5
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F4           CPL       A
   \                     ??initNV_5:
   \   000062   6002         JZ        ??initNV_4
    263              {
    264                oldPg = pg;
   \   000064   EE           MOV       A,R6
   \   000065   FF           MOV       R7,A
    265              }
    266            }
   \                     ??initNV_4:
   \   000066   0E           INC       R6
   \   000067   EE           MOV       A,R6
   \   000068   C3           CLR       C
   \   000069   947F         SUBB      A,#0x7f
   \   00006B   40A9         JC        ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006D   EF           MOV       A,R7
   \   00006E   90....       MOV       DPTR,#pgRes
   \   000071   601E         JZ        ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000073   E0           MOVX      A,@DPTR
   \   000074   600F         JZ        ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   000076                ; Setup parameters for call to function erasePage
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   00007A                ; Setup parameters for call to function compactPage
   \   00007A   7A00         MOV       R2,#0x0
   \   00007C   7B00         MOV       R3,#0x0
   \   00007E   EF           MOV       A,R7
   \   00007F   F9           MOV       R1,A
   \   000080   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000083   8013         SJMP      ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   000085                ; Setup parameters for call to function erasePage
   \   000085   EF           MOV       A,R7
   \   000086   F9           MOV       R1,A
   \   000087   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    285                pgRes = oldPg;
   \   00008A   EF           MOV       A,R7
   \   00008B   90....       MOV       DPTR,#pgRes
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   8007         SJMP      ??initNV_8
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6004         JZ        ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000094                ; Setup parameters for call to function erasePage
   \   000094   F9           MOV       R1,A
   \   000095   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000098   7E79         MOV       R6,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   00009A                ; Setup parameters for call to function initPage
   \   00009A   AC..         MOV       R4,?V0
   \   00009C   7A00         MOV       R2,#0x0
   \   00009E   7B00         MOV       R3,#0x0
   \   0000A0   EE           MOV       A,R6
   \   0000A1   F9           MOV       R1,A
   \   0000A2   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   0000A5   8B..         MOV       ?V3,R3
   \   0000A7   EA           MOV       A,R2
   \   0000A8   45..         ORL       A,?V3
   \   0000AA   6005         JZ        ??initNV_10
    303              {
    304                findDups = TRUE;
   \   0000AC   75..01       MOV       ?V0,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000AF   7E78         MOV       R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_10:
   \   0000B1   0E           INC       R6
   \   0000B2   EE           MOV       A,R6
   \   0000B3   C3           CLR       C
   \   0000B4   947F         SUBB      A,#0x7f
   \   0000B6   40E2         JC        ??initNV_9
    309          
    310            if (findDups)
   \   0000B8   E5..         MOV       A,?V0
   \   0000BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BC   5014         JNC       ??initNV_11
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000BE   7E79         MOV       R6,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000C0                ; Setup parameters for call to function initPage
   \   0000C0   7C00         MOV       R4,#0x0
   \   0000C2   7A00         MOV       R2,#0x0
   \   0000C4   7B00         MOV       R3,#0x0
   \   0000C6   EE           MOV       A,R6
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
    316              }
   \   0000CB   0E           INC       R6
   \   0000CC   EE           MOV       A,R6
   \   0000CD   C3           CLR       C
   \   0000CE   947F         SUBB      A,#0x7f
   \   0000D0   40EE         JC        ??initNV_12
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000D2   90....       MOV       DPTR,#pgRes
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   7044         JNZ       ??initNV_13
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000D8   7E00         MOV       R6,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000DA   7A00         MOV       R2,#0x0
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000DC   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   64F8         XRL       A,#0xf8
   \   0000E2   7004         JNZ       ??initNV_15
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   6407         XRL       A,#0x7
   \                     ??initNV_15:
   \   0000E8   7004         JNZ       ??initNV_16
    327                {
    328                  mostLost = idx;
   \   0000EA   EA           MOV       A,R2
   \   0000EB   FE           MOV       R6,A
    329                  break;
   \   0000EC   8023         SJMP      ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000EE   EE           MOV       A,R6
   \   0000EF   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000F2   C082         PUSH      DPL
   \   0000F4   C083         PUSH      DPH
   \   0000F6   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000F9   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000FC   D083         POP       DPH
   \   0000FE   D082         POP       DPL
   \   000100   C3           CLR       C
   \   000101   E0           MOVX      A,@DPTR
   \   000102   98           SUBB      A,R0
   \   000103   A3           INC       DPTR
   \   000104   E0           MOVX      A,@DPTR
   \   000105   99           SUBB      A,R1
   \   000106   5002         JNC       ??initNV_18
    335                {
    336                  mostLost = idx;
   \   000108   EA           MOV       A,R2
   \   000109   FE           MOV       R6,A
    337                }
    338              }
   \                     ??initNV_18:
   \   00010A   0A           INC       R2
   \   00010B   EA           MOV       A,R2
   \   00010C   C3           CLR       C
   \   00010D   9406         SUBB      A,#0x6
   \   00010F   40CB         JC        ??initNV_14
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000111   7479         MOV       A,#0x79
   \   000113   2E           ADD       A,R6
   \   000114   90....       MOV       DPTR,#pgRes
   \   000117   F0           MOVX      @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   000118                ; Setup parameters for call to function erasePage
   \   000118   F9           MOV       R1,A
   \   000119   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_13:
   \   00011C   7901         MOV       R1,#0x1
   \   00011E   7408         MOV       A,#0x8
   \   000120   80..         SJMP      ??Subroutine49_0
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   74..         MOV       A,#pgLost & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FF           MOV       R7,A
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    362          
    363            if ( inUse )
   \   000016   EF           MOV       A,R7
   \   000017   6008         JZ        ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E4           CLR       A
   \   00001F   8007         SJMP      ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   74FF         MOV       A,#-0x1
    370            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_118:
   \   00002B   7A00         MOV       R2,#0x0
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    373          }
   \   000032   7408         MOV       A,#0x8
   \   000034   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000013   89..         MOV       ?V6,R1
   \   000015   8C..         MOV       ?V7,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000017   75..08       MOV       ?V0,#0x8
   \   00001A   75..00       MOV       ?V1,#0x0
    393            uint16 sz, lost = 0;
   \   00001D   75..00       MOV       ?V2,#0x0
   \   000020   75..00       MOV       ?V3,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   000023                ; Setup parameters for call to function HalFlashRead
   \   000023   75..08       MOV       ?V4,#0x8
   \   000026   75..00       MOV       ?V5,#0x0
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   A9..         MOV       R1,?V6
   \   000039   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F4           CPL       A
   \   000048   7003         JNZ       ??initPage_1
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F4           CPL       A
   \                     ??initPage_1:
   \   00004D   7003         JNZ       $+5
   \   00004F   02....       LJMP      ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00005A   4006         JC        ??initPage_3
   \   00005C   7EFC         MOV       R6,#-0x4
   \   00005E   7FFF         MOV       R7,#-0x1
   \   000060   8008         SJMP      ??CrossCallReturnLabel_46
   \                     ??initPage_3:
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine17 & 0xFFFF
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??CrossCallReturnLabel_46:
   \   00006A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00006D   5020         JNC       ??initPage_4
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   00006F   E5..         MOV       A,?V2
   \   000071   2400         ADD       A,#0x0
   \   000073   E5..         MOV       A,?V3
   \   000075   3408         ADDC      A,#0x8
   \   000077   F5..         MOV       ?V3,A
   \   000079   C3           CLR       C
   \   00007A   E5..         MOV       A,?V2
   \   00007C   95..         SUBB      A,?V0
   \   00007E   F5..         MOV       ?V2,A
   \   000080   E5..         MOV       A,?V3
   \   000082   95..         SUBB      A,?V1
   \   000084   F5..         MOV       ?V3,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   000086   75..00       MOV       ?V0,#0x0
   \   000089   75..08       MOV       ?V1,#0x8
    413                break;
   \   00008C   02....       LJMP      ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_4:
   \   00008F   12....       LCALL     ?Subroutine35 & 0xFFFF
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \                     ??CrossCallReturnLabel_86:
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00009A   7003         JNZ       $+5
   \   00009C   02....       LJMP      ??initPage_5 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   00009F   85..82       MOV       DPL,?XSP + 0
   \   0000A2   85..83       MOV       DPH,?XSP + 1
   \   0000A5   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000A8   6053         JZ        ??initPage_6
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   547F         ANL       A,#0x7f
   \   0000B4   F9           MOV       R1,A
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   68           XRL       A,R0
   \   0000BC   7003         JNZ       ??initPage_7
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   69           XRL       A,R1
   \                     ??initPage_7:
   \   0000C1   6003         JZ        $+5
   \   0000C3   02....       LJMP      ??initPage_8 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000C6   85..82       MOV       DPL,?XSP + 0
   \   0000C9   85..83       MOV       DPH,?XSP + 1
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   5480         ANL       A,#0x80
   \   0000D0   7013         JNZ       ??initPage_9
   \   0000D2   7408         MOV       A,#0x8
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F4           CPL       A
   \   0000D9   7003         JNZ       ??initPage_10
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F4           CPL       A
   \                     ??initPage_10:
   \   0000DE   6003         JZ        $+5
   \   0000E0   02....       LJMP      ??initPage_8 & 0xFFFF
   \   0000E3   8011         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   0000E5   7408         MOV       A,#0x8
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F4           CPL       A
   \   0000EC   7003         JNZ       ??initPage_12
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F4           CPL       A
   \                     ??initPage_12:
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??initPage_8 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_11:
   \   0000F6   AA..         MOV       R2,?V0
   \   0000F8   AB..         MOV       R3,?V1
   \   0000FA   02....       LJMP      ??initPage_13 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_6:
   \   0000FD                ; Setup parameters for call to function calcChkF
   \   0000FD   7404         MOV       A,#0x4
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000105   AA..         MOV       R2,?V0
   \   000107   AB..         MOV       R3,?V1
   \   000109   A9..         MOV       R1,?V6
   \   00010B   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00010E   8A..         MOV       ?V4,R2
   \   000110   8B..         MOV       ?V5,R3
   \   000112   A8..         MOV       R0,?V4
   \   000114   A9..         MOV       R1,?V5
   \   000116   7406         MOV       A,#0x6
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   68           XRL       A,R0
   \   00011D   7003         JNZ       ??initPage_14
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   69           XRL       A,R1
   \                     ??initPage_14:
   \   000122   7045         JNZ       ??initPage_15
    442                  {
    443                    if ( findDups )
   \   000124   E5..         MOV       A,?V7
   \   000126   602D         JZ        ??initPage_16
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000128   7408         MOV       A,#0x8
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F4           CPL       A
   \   00012F   7003         JNZ       ??initPage_17
   \   000131   A3           INC       DPTR
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F4           CPL       A
   \                     ??initPage_17:
   \   000134   704F         JNZ       ??initPage_8
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000136                ; Setup parameters for call to function findItem
   \   000136   7402         MOV       A,#0x2
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   FA           MOV       R2,A
   \   00013D   A3           INC       DPTR
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   4480         ORL       A,#0x80
   \   000141   FB           MOV       R3,A
   \   000142   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   000145   EA           MOV       A,R2
   \   000146   4B           ORL       A,R3
   \   000147   603C         JZ        ??initPage_8
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000149                ; Setup parameters for call to function setItem
   \   000149   7C01         MOV       R4,#0x1
   \   00014B   90....       MOV       DPTR,#findPg
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F9           MOV       R1,A
   \   000150   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000153   8030         SJMP      ??initPage_8
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000155   7408         MOV       A,#0x8
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F4           CPL       A
   \   00015C   7003         JNZ       ??initPage_18
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   F4           CPL       A
   \                     ??initPage_18:
   \   000161   6022         JZ        ??initPage_8
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   000163   7AFF         MOV       R2,#-0x1
   \   000165   7BFF         MOV       R3,#-0x1
   \   000167   804F         SJMP      ??initPage_13
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   000169                ; Setup parameters for call to function setItem
   \   000169   7C01         MOV       R4,#0x1
   \   00016B   AA..         MOV       R2,?V0
   \   00016D   AB..         MOV       R3,?V1
   \   00016F   A9..         MOV       R1,?V6
   \   000171   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_5:
   \   000174   EE           MOV       A,R6
   \   000175   2408         ADD       A,#0x8
   \   000177   F8           MOV       R0,A
   \   000178   E4           CLR       A
   \   000179   3F           ADDC      A,R7
   \   00017A   F9           MOV       R1,A
   \   00017B   E5..         MOV       A,?V2
   \   00017D   28           ADD       A,R0
   \   00017E   F5..         MOV       ?V2,A
   \   000180   E5..         MOV       A,?V3
   \   000182   39           ADDC      A,R1
   \   000183   F5..         MOV       ?V3,A
    475              }
    476              offset += sz;
   \                     ??initPage_8:
   \   000185   E5..         MOV       A,?V0
   \   000187   2E           ADD       A,R6
   \   000188   F5..         MOV       ?V0,A
   \   00018A   E5..         MOV       A,?V1
   \   00018C   3F           ADDC      A,R7
   \   00018D   F5..         MOV       ?V1,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   00018F   C3           CLR       C
   \   000190   E5..         MOV       A,?V0
   \   000192   94F8         SUBB      A,#-0x8
   \   000194   E5..         MOV       A,?V1
   \   000196   9407         SUBB      A,#0x7
   \   000198   5003         JNC       $+5
   \   00019A   02....       LJMP      ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   00019D   A8..         MOV       R0,?V6
   \   00019F   E8           MOV       A,R0
   \   0001A0   28           ADD       A,R0
   \   0001A1   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001A4   E5..         MOV       A,?V0
   \   0001A6   F0           MOVX      @DPTR,A
   \   0001A7   A3           INC       DPTR
   \   0001A8   E5..         MOV       A,?V1
   \   0001AA   12....       LCALL     ?Subroutine8 & 0xFFFF
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_2:
   \   0001AD   E5..         MOV       A,?V2
   \   0001AF   F0           MOVX      @DPTR,A
   \   0001B0   A3           INC       DPTR
   \   0001B1   E5..         MOV       A,?V3
   \   0001B3   F0           MOVX      @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   0001B4   7A00         MOV       R2,#0x0
   \   0001B6   7B00         MOV       R3,#0x0
   \                     ??initPage_13:
   \   0001B8   02....       LJMP      ?Subroutine2 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC      A,R1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E5..         MOV       A,?V0
   \   000002   2408         ADD       A,#0x8
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   74F8         MOV       A,#-0x8
   \   000002   C3           CLR       C
   \   000003   95..         SUBB      A,?V0
   \   000005   F8           MOV       R0,A
   \   000006   7407         MOV       A,#0x7
   \   000008   95..         SUBB      A,?V1
   \   00000A   F9           MOV       R1,A
   \   00000B   C3           CLR       C
   \   00000C   E8           MOV       A,R0
   \   00000D   9E           SUBB      A,R6
   \   00000E   E9           MOV       A,R1
   \   00000F   9F           SUBB      A,R7
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   94FC         SUBB      A,#-0x4
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   94FF         SUBB      A,#-0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine54_0
   \   000002                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   54FC         ANL       A,#0xfc
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV       A,R6
   \   00000B   2E           ADD       A,R6
   \   00000C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000F   7408         MOV       A,#0x8
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   12....       LCALL     ?Subroutine8 & 0xFFFF
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_3:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    501          }
   \   00001B   80..         SJMP      ??Subroutine51_0
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7409         MOV       A,#0x9
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   89..         MOV       ?V6,R1
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   00001A                ; Setup parameters for call to function HalFlashRead
   \   00001A   75..01       MOV       ?V0,#0x1
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP102_8
   \   00002A   AA..         MOV       R2,?V2
   \   00002C   AB..         MOV       R3,?V3
   \   00002E   90....       MOV       DPTR,#pgRes
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F9           MOV       R1,A
   \   000033   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F4           CPL       A
   \   000043   600D         JZ        ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000045                ; Setup parameters for call to function erasePage
   \   000045   90....       MOV       DPTR,#pgRes
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    542                return FALSE;
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   02....       LJMP      ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   000052   05..         INC       ?V2
   \   000054   E5..         MOV       A,?V2
   \   000056   7002         JNZ       ??compactPage_3
   \   000058   05..         INC       ?V3
   \                     ??compactPage_3:
   \   00005A   C3           CLR       C
   \   00005B   E5..         MOV       A,?V3
   \   00005D   9408         SUBB      A,#0x8
   \   00005F   40B9         JC        ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000061   75..08       MOV       ?V2,#0x8
   \   000064   75..00       MOV       ?V3,#0x0
    547            rtrn = TRUE;
   \   000067   7401         MOV       A,#0x1
   \   000069   F0           MOVX      @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   00006A   90....       MOV       DPTR,#pgRes
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   25E0         ADD       A,0xE0 /* A   */
   \   000070   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000073   12....       LCALL     ?Subroutine22 & 0xFFFF
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_58:
   \   000076                ; Setup parameters for call to function HalFlashRead
   \   000076   75..08       MOV       ?V4,#0x8
   \   000079   75..00       MOV       ?V5,#0x0
   \   00007C   78..         MOV       R0,#?V4
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7403         MOV       A,#0x3
   \   000083   12....       LCALL     ?XSTACK_DISP102_8
   \   000086   AA..         MOV       R2,?V2
   \   000088   AB..         MOV       R3,?V3
   \   00008A   A9..         MOV       R1,?V6
   \   00008C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000094   7401         MOV       A,#0x1
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F4           CPL       A
   \   00009B   7003         JNZ       ??compactPage_5
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F4           CPL       A
   \                     ??compactPage_5:
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??compactPage_6 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000A5   7403         MOV       A,#0x3
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000AD   4006         JC        ??compactPage_7
   \   0000AF   7EFC         MOV       R6,#-0x4
   \   0000B1   7FFF         MOV       R7,#-0x1
   \   0000B3   8008         SJMP      ??CrossCallReturnLabel_47
   \                     ??compactPage_7:
   \   0000B5   7403         MOV       A,#0x3
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine17 & 0xFFFF
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??CrossCallReturnLabel_47:
   \   0000BD   74F8         MOV       A,#-0x8
   \   0000BF   C3           CLR       C
   \   0000C0   95..         SUBB      A,?V2
   \   0000C2   F8           MOV       R0,A
   \   0000C3   7407         MOV       A,#0x7
   \   0000C5   95..         SUBB      A,?V3
   \   0000C7   F9           MOV       R1,A
   \   0000C8   C3           CLR       C
   \   0000C9   E8           MOV       A,R0
   \   0000CA   9E           SUBB      A,R6
   \   0000CB   E9           MOV       A,R1
   \   0000CC   9F           SUBB      A,R7
   \   0000CD   5003         JNC       $+5
   \   0000CF   02....       LJMP      ??compactPage_6 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000D2   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000D5   5003         JNC       $+5
   \   0000D7   02....       LJMP      ??compactPage_8 & 0xFFFF
    570              {
    571                rtrn = FALSE;
    572                break;
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \   0000DA   12....       LCALL     ?Subroutine36 & 0xFFFF
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \                     ??CrossCallReturnLabel_88:
   \   0000DD   7401         MOV       A,#0x1
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000E5   7003         JNZ       $+5
   \   0000E7   02....       LJMP      ??compactPage_9 & 0xFFFF
   \   0000EA   7409         MOV       A,#0x9
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   68           XRL       A,R0
   \   0000F1   7003         JNZ       ??compactPage_10
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   69           XRL       A,R1
   \                     ??compactPage_10:
   \   0000F6   7003         JNZ       $+5
   \   0000F8   02....       LJMP      ??compactPage_9 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   0000FB                ; Setup parameters for call to function calcChkF
   \   0000FB   7403         MOV       A,#0x3
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000103   AA..         MOV       R2,?V2
   \   000105   AB..         MOV       R3,?V3
   \   000107   A9..         MOV       R1,?V6
   \   000109   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00010C   8A..         MOV       ?V4,R2
   \   00010E   8B..         MOV       ?V5,R3
   \   000110   A8..         MOV       R0,?V4
   \   000112   A9..         MOV       R1,?V5
   \   000114   7405         MOV       A,#0x5
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   68           XRL       A,R0
   \   00011B   7003         JNZ       ??compactPage_11
   \   00011D   A3           INC       DPTR
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   69           XRL       A,R1
   \                     ??compactPage_11:
   \   000120   6003         JZ        $+5
   \   000122   02....       LJMP      ??compactPage_9 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000125   7407         MOV       A,#0x7
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   F4           CPL       A
   \   00012C   7003         JNZ       ??compactPage_12
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F4           CPL       A
   \                     ??compactPage_12:
   \   000131   700B         JNZ       ??compactPage_13
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   000133                ; Setup parameters for call to function setItem
   \   000133   7C00         MOV       R4,#0x0
   \   000135   AA..         MOV       R2,?V2
   \   000137   AB..         MOV       R3,?V3
   \   000139   A9..         MOV       R1,?V6
   \   00013B   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_13:
   \   00013E                ; Setup parameters for call to function writeItem
   \   00013E   75..00       MOV       ?V4,#0x0
   \   000141   78..         MOV       R0,#?V4
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000146   E4           CLR       A
   \   000147   F5..         MOV       ?V5,A
   \   000149   78..         MOV       R0,#?V4
   \   00014B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014E   7406         MOV       A,#0x6
   \   000150   12....       LCALL     ?XSTACK_DISP0_8
   \   000153   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000156   7404         MOV       A,#0x4
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00015E   90....       MOV       DPTR,#pgRes
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F9           MOV       R1,A
   \   000163   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000166   7403         MOV       A,#0x3
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   E9           MOV       A,R1
   \   00016C   7003         JNZ       $+5
   \   00016E   02....       LJMP      ??compactPage_8 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   000171   12....       LCALL     ?Subroutine35 & 0xFFFF
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_87:
   \   000174                ; Setup parameters for call to function xferBuf
   \   000174   8E..         MOV       ?V4,R6
   \   000176   8F..         MOV       ?V5,R7
   \   000178   78..         MOV       R0,#?V4
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   90....       MOV       DPTR,#pgRes
   \   000185   E0           MOVX      A,@DPTR
   \   000186   FC           MOV       R4,A
   \   000187   AA..         MOV       R2,?V2
   \   000189   AB..         MOV       R3,?V3
   \   00018B   A9..         MOV       R1,?V6
   \   00018D   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000190   7404         MOV       A,#0x4
   \   000192   12....       LCALL     ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   000195                ; Setup parameters for call to function calcChkF
   \   000195   7403         MOV       A,#0x3
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00019D   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   0001A0   8A..         MOV       ?V4,R2
   \   0001A2   8B..         MOV       ?V5,R3
   \   0001A4   A8..         MOV       R0,?V4
   \   0001A6   A9..         MOV       R1,?V5
   \   0001A8   7405         MOV       A,#0x5
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   68           XRL       A,R0
   \   0001AF   7003         JNZ       ??compactPage_14
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   69           XRL       A,R1
   \                     ??compactPage_14:
   \   0001B4   7057         JNZ       ??compactPage_8
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001B6                ; Setup parameters for call to function setChk
   \   0001B6   7405         MOV       A,#0x5
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001BE   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0001C1   8A..         MOV       ?V4,R2
   \   0001C3   8B..         MOV       ?V5,R3
   \   0001C5   A8..         MOV       R0,?V4
   \   0001C7   A9..         MOV       R1,?V5
   \   0001C9   7405         MOV       A,#0x5
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   68           XRL       A,R0
   \   0001D0   7003         JNZ       ??compactPage_15
   \   0001D2   A3           INC       DPTR
   \   0001D3   E0           MOVX      A,@DPTR
   \   0001D4   69           XRL       A,R1
   \                     ??compactPage_15:
   \   0001D5   7036         JNZ       ??compactPage_8
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001D7                ; Setup parameters for call to function hotItemUpdate
   \   0001D7   7401         MOV       A,#0x1
   \   0001D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL     ?Subroutine13 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
   \                     ??CrossCallReturnLabel_25:
   \   0001DF   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_9:
   \   0001E2   E5..         MOV       A,?V2
   \   0001E4   2E           ADD       A,R6
   \   0001E5   F5..         MOV       ?V2,A
   \   0001E7   E5..         MOV       A,?V3
   \   0001E9   3F           ADDC      A,R7
   \   0001EA   F5..         MOV       ?V3,A
   \   0001EC   C3           CLR       C
   \   0001ED   E5..         MOV       A,?V2
   \   0001EF   94F8         SUBB      A,#-0x8
   \   0001F1   E5..         MOV       A,?V3
   \   0001F3   9407         SUBB      A,#0x7
   \   0001F5   5003         JNC       $+5
   \   0001F7   02....       LJMP      ??compactPage_4 & 0xFFFF
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0001FA   85..82       MOV       DPL,?XSP + 0
   \   0001FD   85..83       MOV       DPH,?XSP + 1
   \   000200   E0           MOVX      A,@DPTR
   \   000201   7014         JNZ       ??compactPage_16
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_17:
   \   000203                ; Setup parameters for call to function erasePage
   \   000203   90....       MOV       DPTR,#pgRes
   \   000206   E0           MOVX      A,@DPTR
   \   000207   F9           MOV       R1,A
   \   000208   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00020B   8029         SJMP      ??compactPage_18
    626            }
   \                     ??compactPage_8:
   \   00020D   85..82       MOV       DPL,?XSP + 0
   \   000210   85..83       MOV       DPH,?XSP + 1
   \   000213   E4           CLR       A
   \   000214   F0           MOVX      @DPTR,A
   \   000215   80EC         SJMP      ??compactPage_17
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_16:
   \   000217   7409         MOV       A,#0x9
   \   000219   12....       LCALL     ?XSTACK_DISP0_8
   \   00021C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00021F   7015         JNZ       ??compactPage_18
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   000221                ; Setup parameters for call to function setPageUse
   \   000221   7A01         MOV       R2,#0x1
   \   000223   90....       MOV       DPTR,#pgRes
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F9           MOV       R1,A
   \   000228   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   00022B                ; Setup parameters for call to function erasePage
   \   00022B   A9..         MOV       R1,?V6
   \   00022D   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000230   E5..         MOV       A,?V6
   \   000232   90....       MOV       DPTR,#pgRes
   \   000235   F0           MOVX      @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_18:
   \   000236   85..82       MOV       DPL,?XSP + 0
   \   000239   85..83       MOV       DPH,?XSP + 1
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   F9           MOV       R1,A
   \                     ??compactPage_2:
   \   00023E   740B         MOV       A,#0xb
   \   000240                REQUIRE ?Subroutine3
   \   000240                ; // Fall through to label ?Subroutine3
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   AA..         MOV       R2,?V0
   \   000005   AB..         MOV       R3,?V1
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV       A,?V2
   \   000002   2408         ADD       A,#0x8
   \   000004   F5..         MOV       ?V2,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F5..         MOV       ?V3,A
   \   00000B   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    668            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    673            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ??Subroutine50_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR       C
   \   000015   EC           MOV       A,R4
   \   000016   94F4         SUBB      A,#-0xc
   \   000018   ED           MOV       A,R5
   \   000019   94FF         SUBB      A,#-0x1
   \   00001B   400E         JC        ??initItem_0
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   74FC         MOV       A,#-0x4
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74FF         MOV       A,#-0x1
   \   000029   8019         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV       A,R4
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   54FC         ANL       A,#0xfc
   \   000036   2408         ADD       A,#0x8
   \   000038   5001         JNC       ??initItem_2
   \   00003A   09           INC       R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX      @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV       R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV       R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   04           INC       A
   \   00004E   FE           MOV       R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV       A,R6
   \   000050   C3           CLR       C
   \   000051   947F         SUBB      A,#0x7f
   \   000053   4002         JC        ??initItem_4
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV       R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6E           XRL       A,R6
   \   00005C   602C         JZ        ??initItem_5
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV       A,#-0x79
   \   000060   2E           ADD       A,R6
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000061   25E0         ADD       A,0xE0 /* A   */
   \   000063   F8           MOV       R0,A
   \   000064   E4           CLR       A
   \   000065   33           RLC       A
   \   000066   F9           MOV       R1,A
   \   000067   74..         MOV       A,#pgOff & 0xff
   \   000069   28           ADD       A,R0
   \   00006A   F582         MOV       DPL,A
   \   00006C   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   00006E   39           ADDC      A,R1
   \   00006F   F583         MOV       DPH,A
   \   000071   12....       LCALL     ?Subroutine16 & 0xFFFF
    710                {
    711                  break;
    712                }
    713              }
   \                     ??CrossCallReturnLabel_37:
   \   000074   E4           CLR       A
   \   000075   C3           CLR       C
   \   000076   9A           SUBB      A,R2
   \   000077   FA           MOV       R2,A
   \   000078   7408         MOV       A,#0x8
   \   00007A   9B           SUBB      A,R3
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   2A           ADD       A,R2
   \   000081   FA           MOV       R2,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   3B           ADDC      A,R3
   \   000085   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000088   5008         JNC       ??initItem_6
    714              pg++;
   \                     ??initItem_5:
   \   00008A   0E           INC       R6
    715            } while (--cnt);
   \   00008B   1C           DEC       R4
   \   00008C   EC           MOV       A,R4
   \   00008D   70C0         JNZ       ??initItem_3
   \   00008F   02....       LJMP      ??initItem_7 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_6:
   \   000092   EC           MOV       A,R4
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??initItem_7 & 0xFFFF
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   000098   EE           MOV       A,R6
   \   000099   25E0         ADD       A,0xE0 /* A   */
   \   00009B   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00009E   FA           MOV       R2,A
   \   00009F   7408         MOV       A,#0x8
   \   0000A1   99           SUBB      A,R1
   \   0000A2   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000A5   4003         JC        $+5
   \   0000A7   02....       LJMP      ??initItem_8 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000AA                ; Setup parameters for call to function HalFlashRead
   \   0000AA   75..08       MOV       ?V2,#0x8
   \   0000AD   8F..         MOV       ?V3,R7
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   7404         MOV       A,#0x4
   \   0000B6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B9   7A00         MOV       R2,#0x0
   \   0000BB   7B00         MOV       R3,#0x0
   \   0000BD   EE           MOV       A,R6
   \   0000BE   F9           MOV       R1,A
   \   0000BF   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000C2   7402         MOV       A,#0x2
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000C7   7406         MOV       A,#0x6
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F4           CPL       A
   \   0000CE   7003         JNZ       ??initItem_9
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F4           CPL       A
   \                     ??initItem_9:
   \   0000D3   700B         JNZ       ??initItem_10
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000D5   12....       LCALL     ?Subroutine7 & 0xFFFF
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
   \                     ??CrossCallReturnLabel_116:
   \   0000D8   7A04         MOV       R2,#0x4
   \   0000DA   FB           MOV       R3,A
   \   0000DB   EE           MOV       A,R6
   \   0000DC   F9           MOV       R1,A
   \   0000DD   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000E0                ; Setup parameters for call to function compactPage
   \   0000E0   AA..         MOV       R2,?V6
   \   0000E2   AB..         MOV       R3,?V7
   \   0000E4   EE           MOV       A,R6
   \   0000E5   F9           MOV       R1,A
   \   0000E6   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000E9   E9           MOV       A,R1
   \   0000EA   6079         JZ        ??initItem_7
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000EC                ; Setup parameters for call to function writeItem
   \   0000EC   E5..         MOV       A,?V4
   \   0000EE   F5..         MOV       ?V2,A
   \   0000F0   78..         MOV       R0,#?V2
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   741B         MOV       A,#0x1b
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000FD   AC..         MOV       R4,?V0
   \   0000FF   AD..         MOV       R5,?V1
   \   000101   AA..         MOV       R2,?V6
   \   000103   AB..         MOV       R3,?V7
   \   000105   90....       MOV       DPTR,#pgRes
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00010D   7403         MOV       A,#0x3
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   E9           MOV       A,R1
   \   000113   6005         JZ        ??initItem_11
    741                  {
    742                    rtrn = pgRes;
   \   000115   90....       MOV       DPTR,#pgRes
   \   000118   E0           MOVX      A,@DPTR
   \   000119   FF           MOV       R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   00011A   E5..         MOV       A,?V4
   \   00011C   700B         JNZ       ??initItem_12
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   00011E   741A         MOV       A,#0x1a
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ?Subroutine44 & 0xFFFF
    751                  }
   \                     ??CrossCallReturnLabel_107:
   \   000126   EE           MOV       A,R6
   \   000127   8013         SJMP      ??initItem_13
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   000129                ; Setup parameters for call to function setPageUse
   \   000129   7A01         MOV       R2,#0x1
   \   00012B   90....       MOV       DPTR,#pgRes
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   F9           MOV       R1,A
   \   000130   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000133                ; Setup parameters for call to function erasePage
   \   000133   EE           MOV       A,R6
   \   000134   F9           MOV       R1,A
   \   000135   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000138   EE           MOV       A,R6
   \   000139   90....       MOV       DPTR,#pgRes
   \                     ??initItem_13:
   \   00013C   F0           MOVX      @DPTR,A
   \   00013D   8026         SJMP      ??initItem_7
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   00013F                ; Setup parameters for call to function writeItem
   \   00013F   E5..         MOV       A,?V4
   \   000141   F5..         MOV       ?V2,A
   \   000143   78..         MOV       R0,#?V2
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000148   741B         MOV       A,#0x1b
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000150   AC..         MOV       R4,?V0
   \   000152   AA..         MOV       R2,?V6
   \   000154   AB..         MOV       R3,?V7
   \   000156   EE           MOV       A,R6
   \   000157   F9           MOV       R1,A
   \   000158   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00015B   7403         MOV       A,#0x3
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   E9           MOV       A,R1
   \   000161   6002         JZ        ??initItem_7
    764                {
    765                  rtrn = pg;
   \   000163   EE           MOV       A,R6
   \   000164   FF           MOV       R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_7:
   \   000165   EF           MOV       A,R7
   \   000166   F9           MOV       R1,A
   \   000167   02....       LJMP      ?Subroutine2 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   FB           MOV       R3,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00000A   C3           CLR       C
   \   00000B   EA           MOV       A,R2
   \   00000C   98           SUBB      A,R0
   \   00000D   EB           MOV       A,R3
   \   00000E   99           SUBB      A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine52_0
   \   000007                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000006   E4           CLR       A
   \   000007   C3           CLR       C
   \   000008   98           SUBB      A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8C..         MOV       ?V3,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V0,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V1,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V0
   \   00002A   AB..         MOV       R3,?V1
   \   00002C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000034   E5..         MOV       A,?V3
   \   000036   7022         JNZ       ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000038   7406         MOV       A,#0x6
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000041                ; Setup parameters for call to function writeWord
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   AC82         MOV       R4,DPL
   \   000048   AD83         MOV       R5,DPH
   \   00004A   E5..         MOV       A,?V0
   \   00004C   2404         ADD       A,#0x4
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V1
   \   000052   FB           MOV       R3,A
   \   000053   A9..         MOV       R1,?V2
   \   000055   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000058   8019         SJMP      ??CrossCallReturnLabel_120
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine11 & 0xFFFF
    801              hdr.id = 0;
   \                     ??CrossCallReturnLabel_16:
   \   000062   12....       LCALL     ?Subroutine7 & 0xFFFF
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_117:
   \   000065   AA..         MOV       R2,?V0
   \   000067   AB..         MOV       R3,?V1
   \   000069   A9..         MOV       R1,?V2
   \   00006B   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   00006E   A8..         MOV       R0,?V2
   \   000070   12....       LCALL     ?Subroutine23 & 0xFFFF
    804            }
    805          }
   \                     ??CrossCallReturnLabel_120:
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078                REQUIRE ?Subroutine4
   \   000078                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   00000D                REQUIRE ??Subroutine53_0
   \   00000D                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   2408         ADD       A,#0x8
   \   000005   FE           MOV       R6,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FF           MOV       R7,A
   \   000009   22           RET
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
   \   000017   EA           MOV       A,R2
   \   000018   FE           MOV       R6,A
   \   000019   EB           MOV       A,R3
   \   00001A   FF           MOV       R7,A
    821            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV       A,R6
   \   00001C   24FC         ADD       A,#-0x4
   \   00001E   FE           MOV       R6,A
   \   00001F   EF           MOV       A,R7
   \   000020   34FF         ADDC      A,#-0x1
   \   000022   FF           MOV       R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV       R4,?XSP + 0
   \   000025   AD..         MOV       R5,?XSP + 1
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   75..02       MOV       ?V2,#0x2
   \   000031   75..00       MOV       ?V3,#0x0
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP102_8
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   A9..         MOV       R1,?V0
   \   000044   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000055   02....       LJMP      ?Subroutine0 & 0xFFFF
    826          }
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
    839          {
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
    841            uint16 chk;
    842          
    843            if ( !buf )
    844            {
    845              chk = len * OSAL_NV_ERASED;
    846            }
    847            else
    848            {
    849              chk = 0;
    850              while ( len-- )
    851              {
    852                chk += *buf++;
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    860            }
    861          
    862            return chk;
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    878            uint16 chk = 0;
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV       A,R6
   \   00001B   2403         ADD       A,#0x3
   \   00001D   F5..         MOV       ?V4,A
   \   00001F   E4           CLR       A
   \   000020   3F           ADDC      A,R7
   \   000021   F5..         MOV       ?V5,A
   \   000023   7402         MOV       A,#0x2
   \   000025   78..         MOV       R0,#?V4
   \   000027   12....       LCALL     ?US_SHR
   \   00002A   AE..         MOV       R6,?V4
   \   00002C   AF..         MOV       R7,?V5
    881          
    882            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000031   604A         JZ        ??calcChkF_1
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000033                ; Setup parameters for call to function HalFlashRead
   \   000033   75..04       MOV       ?V4,#0x4
   \   000036   75..00       MOV       ?V5,#0x0
   \   000039   78..         MOV       R0,#?V4
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7402         MOV       A,#0x2
   \   000040   12....       LCALL     ?XSTACK_DISP102_8
   \   000043   AA..         MOV       R2,?V0
   \   000045   AB..         MOV       R3,?V1
   \   000047   A9..         MOV       R1,?V6
   \   000049   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   000051   12....       LCALL     ?Subroutine37 & 0xFFFF
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_90:
   \   000054   7800         MOV       R0,#0x0
    890              {
    891                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000056   E8           MOV       A,R0
   \   000057   FA           MOV       R2,A
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   E582         MOV       A,DPL
   \   000060   2A           ADD       A,R2
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   3583         ADDC      A,DPH
   \   000066   F583         MOV       DPH,A
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   E5..         MOV       A,?V2
   \   00006C   2A           ADD       A,R2
   \   00006D   F5..         MOV       ?V2,A
   \   00006F   E4           CLR       A
   \   000070   35..         ADDC      A,?V3
   \   000072   F5..         MOV       ?V3,A
    892              }
   \   000074   08           INC       R0
   \   000075   E8           MOV       A,R0
   \   000076   C3           CLR       C
   \   000077   9404         SUBB      A,#0x4
   \   000079   50B3         JNC       ??calcChkF_0
   \   00007B   80D9         SJMP      ??calcChkF_2
    893            }
    894          
    895            return chk;
   \                     ??calcChkF_1:
   \   00007D   AA..         MOV       R2,?V2
   \   00007F   AB..         MOV       R3,?V3
   \   000081   7404         MOV       A,#0x4
   \   000083   02....       LJMP      ?Subroutine3 & 0xFFFF
    896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV       A,?V0
   \   000002   2404         ADD       A,#0x4
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000007                ; Setup parameters for call to function HalFlashWrite
   \   000007   75..01       MOV       ?V0,#0x1
   \   00000A   75..00       MOV       ?V1,#0x0
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   7402         MOV       A,#0x2
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SHR
   \   00001D   EE           MOV       A,R6
   \   00001E   F5..         MOV       ?V2,A
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   7409         MOV       A,#0x9
   \   000025   78..         MOV       R0,#?V2
   \   000027   12....       LCALL     ?S_SHL
   \   00002A   E5..         MOV       A,?V0
   \   00002C   2400         ADD       A,#0x0
   \   00002E   FA           MOV       R2,A
   \   00002F   E5..         MOV       A,?V1
   \   000031   35..         ADDC      A,?V3
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000037   02....       LJMP      ?Subroutine0 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    930          {
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    933            HalFlashWrite(offset, buf, cnt);
    934          }
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    952            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    955          
    956            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    957          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV       A,R2
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V6,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000019   6065         JZ        ??CrossCallReturnLabel_91
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV       A,#-0x4
   \   00001D   55..         ANL       A,?V0
   \   00001F   F5..         MOV       ?V0,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000021                ; Setup parameters for call to function HalFlashRead
   \   000021   75..04       MOV       ?V2,#0x4
   \   000024   75..00       MOV       ?V3,#0x0
   \   000027   78..         MOV       R0,#?V2
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP102_8
   \   000031   AA..         MOV       R2,?V0
   \   000033   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_0:
   \   00003B   EE           MOV       A,R6
   \   00003C   4F           ORL       A,R7
   \   00003D   6031         JZ        ??writeBuf_1
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    982              {
    983                tmp[rem++] = *buf++;
   \   00003F   7414         MOV       A,#0x14
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000047   C0E0         PUSH      A
   \   000049   A8..         MOV       R0,?V6
   \   00004B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00004E   D0E0         POP       A
   \   000050   F0           MOVX      @DPTR,A
   \   000051   7414         MOV       A,#0x14
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00005F   05..         INC       ?V6
    984                len--;
   \   000061   EE           MOV       A,R6
   \   000062   24FF         ADD       A,#-0x1
   \   000064   1E           DEC       R6
   \   000065   EF           MOV       A,R7
   \   000066   34FF         ADDC      A,#-0x1
   \   000068   FF           MOV       R7,A
    985              }
   \   000069   E5..         MOV       A,?V6
   \   00006B   C3           CLR       C
   \   00006C   9404         SUBB      A,#0x4
   \   00006E   40CB         JC        ??writeBuf_0
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   000070                ; Setup parameters for call to function writeWord
   \   000070   AC..         MOV       R4,?XSP + 0
   \   000072   AD..         MOV       R5,?XSP + 1
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   A9..         MOV       R1,?V7
   \   00007A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    988              dstOff += OSAL_NV_WORD_SIZE;
   \   00007D   12....       LCALL     ?Subroutine37 & 0xFFFF
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_91:
   \   000080   EE           MOV       A,R6
   \   000081   5403         ANL       A,#0x3
   \   000083   F5..         MOV       ?V6,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   000085   8E..         MOV       ?V2,R6
   \   000087   8F..         MOV       ?V3,R7
   \   000089   7402         MOV       A,#0x2
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?US_SHR
   \   000090   AE..         MOV       R6,?V2
   \   000092   AF..         MOV       R7,?V3
    993          
    994            if ( len )
   \   000094   EE           MOV       A,R6
   \   000095   4F           ORL       A,R7
   \   000096   6067         JZ        ??CrossCallReturnLabel_11
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   000098                ; Setup parameters for call to function HalFlashWrite
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7416         MOV       A,#0x16
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000A5   85....       MOV       ?V2,?V0
   \   0000A8   85....       MOV       ?V3,?V1
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?US_SHR
   \   0000B2   E5..         MOV       A,?V7
   \   0000B4   F5..         MOV       ?V4,A
   \   0000B6   75..00       MOV       ?V5,#0x0
   \   0000B9   7409         MOV       A,#0x9
   \   0000BB   78..         MOV       R0,#?V4
   \   0000BD   12....       LCALL     ?S_SHL
   \   0000C0   E5..         MOV       A,?V2
   \   0000C2   2400         ADD       A,#0x0
   \   0000C4   FA           MOV       R2,A
   \   0000C5   E5..         MOV       A,?V3
   \   0000C7   35..         ADDC      A,?V5
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000D2   8E..         MOV       ?V2,R6
   \   0000D4   8F..         MOV       ?V3,R7
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   78..         MOV       R0,#?V2
   \   0000DA   12....       LCALL     ?S_SHL
   \   0000DD   A8..         MOV       R0,?V2
   \   0000DF   A9..         MOV       R1,?V3
   \   0000E1   E5..         MOV       A,?V0
   \   0000E3   28           ADD       A,R0
   \   0000E4   F5..         MOV       ?V0,A
   \   0000E6   E5..         MOV       A,?V1
   \   0000E8   39           ADDC      A,R1
   \   0000E9   F5..         MOV       ?V1,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   0000EB   7414         MOV       A,#0x14
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   28           ADD       A,R0
   \   0000F2   F8           MOV       R0,A
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   39           ADDC      A,R1
   \   0000F6   F9           MOV       R1,A
   \   0000F7   7414         MOV       A,#0x14
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL     ?Subroutine10 & 0xFFFF
    999            }
   1000          
   1001            if ( rem )
   \                     ??CrossCallReturnLabel_11:
   \   0000FF   E5..         MOV       A,?V6
   \   000101   6059         JZ        ??writeBuf_2
   1002            {
   1003              uint8 idx = 0;
   \   000103   7E00         MOV       R6,#0x0
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000105                ; Setup parameters for call to function HalFlashRead
   \   000105   75..04       MOV       ?V2,#0x4
   \   000108   8E..         MOV       ?V3,R6
   \   00010A   78..         MOV       R0,#?V2
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   7402         MOV       A,#0x2
   \   000111   12....       LCALL     ?XSTACK_DISP102_8
   \   000114   AA..         MOV       R2,?V0
   \   000116   AB..         MOV       R3,?V1
   \   000118   A9..         MOV       R1,?V7
   \   00011A   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00011D   7402         MOV       A,#0x2
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122   8021         SJMP      ??writeBuf_3
   1005              while ( rem-- )
   1006              {
   1007                tmp[idx++] = *buf++;
   \                     ??writeBuf_4:
   \   000124   7414         MOV       A,#0x14
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   12....       LCALL     ?Subroutine15 & 0xFFFF
   1008              }
   \                     ??CrossCallReturnLabel_33:
   \   00012C   C0E0         PUSH      A
   \   00012E   EE           MOV       A,R6
   \   00012F   F8           MOV       R0,A
   \   000130   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000133   D0E0         POP       A
   \   000135   F0           MOVX      @DPTR,A
   \   000136   7414         MOV       A,#0x14
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000144   0E           INC       R6
   \                     ??writeBuf_3:
   \   000145   AF..         MOV       R7,?V6
   \   000147   74FF         MOV       A,#-0x1
   \   000149   2F           ADD       A,R7
   \   00014A   F5..         MOV       ?V6,A
   \   00014C   04           INC       A
   \   00014D   70D5         JNZ       ??writeBuf_4
   1009              writeWord( dstPg, dstOff, tmp );
   \   00014F                ; Setup parameters for call to function writeWord
   \   00014F   AC..         MOV       R4,?XSP + 0
   \   000151   AD..         MOV       R5,?XSP + 1
   \   000153   AA..         MOV       R2,?V0
   \   000155   AB..         MOV       R3,?V1
   \   000157   A9..         MOV       R1,?V7
   \   000159   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1010            }
   1011          }
   \                     ??writeBuf_2:
   \   00015C   7404         MOV       A,#0x4
   \   00015E   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   7414         MOV       A,#0x14
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
   \   000016   8C..         MOV       ?V3,R4
   \   000018   7415         MOV       A,#0x15
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine22 & 0xFFFF
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_59:
   \   000020   E5..         MOV       A,?V0
   \   000022   5403         ANL       A,#0x3
   \   000024   F5..         MOV       ?V2,A
   \   000026   7417         MOV       A,#0x17
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FE           MOV       R6,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FF           MOV       R7,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   000030   E5..         MOV       A,?V2
   \   000032   6078         JZ        ??CrossCallReturnLabel_92
   1026            {
   1027              dstOff -= rem;
   \   000034   F8           MOV       R0,A
   \   000035   C3           CLR       C
   \   000036   E5..         MOV       A,?V0
   \   000038   98           SUBB      A,R0
   \   000039   F5..         MOV       ?V0,A
   \   00003B   E5..         MOV       A,?V1
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   F5..         MOV       ?V1,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000041                ; Setup parameters for call to function HalFlashRead
   \   000041   75..04       MOV       ?V4,#0x4
   \   000044   75..00       MOV       ?V5,#0x0
   \   000047   78..         MOV       R0,#?V4
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7403         MOV       A,#0x3
   \   00004E   12....       LCALL     ?XSTACK_DISP102_8
   \   000051   AA..         MOV       R2,?V0
   \   000053   AB..         MOV       R3,?V1
   \   000055   A9..         MOV       R1,?V3
   \   000057   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   00005F   EE           MOV       A,R6
   \   000060   4F           ORL       A,R7
   \   000061   6038         JZ        ??xferBuf_1
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000063                ; Setup parameters for call to function HalFlashRead
   \   000063   75..01       MOV       ?V4,#0x1
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   A8..         MOV       R0,?V2
   \   00006D   7403         MOV       A,#0x3
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F9           MOV       R1,A
   \   00007A   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   000082   05..         INC       ?V6
   \   000084   E5..         MOV       A,?V6
   \   000086   7002         JNZ       ??xferBuf_2
   \   000088   05..         INC       ?V7
   1034                rem++;
   \                     ??xferBuf_2:
   \   00008A   05..         INC       ?V2
   1035                len--;
   \   00008C   EE           MOV       A,R6
   \   00008D   24FF         ADD       A,#-0x1
   \   00008F   1E           DEC       R6
   \   000090   EF           MOV       A,R7
   \   000091   34FF         ADDC      A,#-0x1
   \   000093   FF           MOV       R7,A
   1036              }
   \   000094   E5..         MOV       A,?V2
   \   000096   C3           CLR       C
   \   000097   9404         SUBB      A,#0x4
   \   000099   40C4         JC        ??xferBuf_0
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   00009B                ; Setup parameters for call to function writeWord
   \   00009B   7401         MOV       A,#0x1
   \   00009D   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A0   AA..         MOV       R2,?V0
   \   0000A2   AB..         MOV       R3,?V1
   \   0000A4   A9..         MOV       R1,?V3
   \   0000A6   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1039              dstOff += OSAL_NV_WORD_SIZE;
   \   0000A9   12....       LCALL     ?Subroutine37 & 0xFFFF
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_92:
   \   0000AC   EE           MOV       A,R6
   \   0000AD   5403         ANL       A,#0x3
   \   0000AF   F5..         MOV       ?V2,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   0000B1   8E..         MOV       ?V4,R6
   \   0000B3   8F..         MOV       ?V5,R7
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?US_SHR
   \   0000BC   AE..         MOV       R6,?V4
   \   0000BE   AF..         MOV       R7,?V5
   \   0000C0   803F         SJMP      ??CrossCallReturnLabel_93
   1044          
   1045            while ( len-- )
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000C2                ; Setup parameters for call to function HalFlashRead
   \   0000C2   75..04       MOV       ?V4,#0x4
   \   0000C5   75..00       MOV       ?V5,#0x0
   \   0000C8   78..         MOV       R0,#?V4
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CD   7403         MOV       A,#0x3
   \   0000CF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D2   AA..         MOV       R2,?V6
   \   0000D4   AB..         MOV       R3,?V7
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F9           MOV       R1,A
   \   0000DD   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E0   7402         MOV       A,#0x2
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   0000E5   E5..         MOV       A,?V6
   \   0000E7   2404         ADD       A,#0x4
   \   0000E9   F5..         MOV       ?V6,A
   \   0000EB   E4           CLR       A
   \   0000EC   35..         ADDC      A,?V7
   \   0000EE   F5..         MOV       ?V7,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   0000F0                ; Setup parameters for call to function writeWord
   \   0000F0   7401         MOV       A,#0x1
   \   0000F2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F5   AA..         MOV       R2,?V0
   \   0000F7   AB..         MOV       R3,?V1
   \   0000F9   A9..         MOV       R1,?V3
   \   0000FB   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1050              dstOff += OSAL_NV_WORD_SIZE;
   \   0000FE   12....       LCALL     ?Subroutine37 & 0xFFFF
   1051            }
   \                     ??CrossCallReturnLabel_93:
   \   000101   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000104   70BC         JNZ       ??xferBuf_3
   1052          
   1053            if ( rem )
   \   000106   E5..         MOV       A,?V2
   \   000108   6061         JZ        ??xferBuf_4
   1054            {
   1055              uint8 idx = 0;
   \   00010A   7E00         MOV       R6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00010C                ; Setup parameters for call to function HalFlashRead
   \   00010C   75..04       MOV       ?V4,#0x4
   \   00010F   8E..         MOV       ?V5,R6
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   7403         MOV       A,#0x3
   \   000118   12....       LCALL     ?XSTACK_DISP102_8
   \   00011B   AA..         MOV       R2,?V0
   \   00011D   AB..         MOV       R3,?V1
   \   00011F   A9..         MOV       R1,?V3
   \   000121   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000124   7402         MOV       A,#0x2
   \   000126   12....       LCALL     ?DEALLOC_XSTACK8
   \   000129   8028         SJMP      ??xferBuf_5
   1057              while ( rem-- )
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   00012B                ; Setup parameters for call to function HalFlashRead
   \   00012B   75..01       MOV       ?V4,#0x1
   \   00012E   78..         MOV       R0,#?V4
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   EE           MOV       A,R6
   \   000134   F8           MOV       R0,A
   \   000135   7403         MOV       A,#0x3
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   E0           MOVX      A,@DPTR
   \   000141   F9           MOV       R1,A
   \   000142   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000145   7402         MOV       A,#0x2
   \   000147   12....       LCALL     ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   00014A   05..         INC       ?V6
   \   00014C   E5..         MOV       A,?V6
   \   00014E   7002         JNZ       ??xferBuf_7
   \   000150   05..         INC       ?V7
   1061                idx++;
   \                     ??xferBuf_7:
   \   000152   0E           INC       R6
   1062              }
   \                     ??xferBuf_5:
   \   000153   AF..         MOV       R7,?V2
   \   000155   74FF         MOV       A,#-0x1
   \   000157   2F           ADD       A,R7
   \   000158   F5..         MOV       ?V2,A
   \   00015A   04           INC       A
   \   00015B   70CE         JNZ       ??xferBuf_6
   1063              writeWord( dstPg, dstOff, tmp );
   \   00015D                ; Setup parameters for call to function writeWord
   \   00015D   7401         MOV       A,#0x1
   \   00015F   12....       LCALL     ?XSTACK_DISP102_8
   \   000162   AA..         MOV       R2,?V0
   \   000164   AB..         MOV       R3,?V1
   \   000166   A9..         MOV       R1,?V3
   \   000168   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1064            }
   1065          }
   \                     ??xferBuf_4:
   \   00016B   7405         MOV       A,#0x5
   \   00016D   80..         SJMP      ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?V6
   \   00000A   AB..         MOV       R3,?V7
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000012   89..         MOV       ?V0,R1
   \   000014   EC           MOV       A,R4
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   FF           MOV       R7,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000018   E9           MOV       A,R1
   \   000019   29           ADD       A,R1
   \   00001A   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V3,A
   1083            uint8 rtrn = FALSE;
   \   000024   75..00       MOV       ?V6,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   000027   7408         MOV       A,#0x8
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   12....       LCALL     ?Subroutine10 & 0xFFFF
   1087            hdr.len = len;
   \                     ??CrossCallReturnLabel_13:
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   EE           MOV       A,R6
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   EF           MOV       A,R7
   \   000041   F0           MOVX      @DPTR,A
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \   000042                ; Setup parameters for call to function writeWord
   \   000042   AC..         MOV       R4,?XSP + 0
   \   000044   AD..         MOV       R5,?XSP + 1
   \   000046   AA..         MOV       R2,?V2
   \   000048   AB..         MOV       R3,?V3
   \   00004A   A9..         MOV       R1,?V0
   \   00004C   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00004F                ; Setup parameters for call to function HalFlashRead
   \   00004F   75..08       MOV       ?V4,#0x8
   \   000052   75..00       MOV       ?V5,#0x0
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP102_8
   \   00005F   AA..         MOV       R2,?V2
   \   000061   AB..         MOV       R3,?V3
   \   000063   A9..         MOV       R1,?V0
   \   000065   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000076   7408         MOV       A,#0x8
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   68           XRL       A,R0
   \   00007D   7003         JNZ       ??writeItem_0
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   69           XRL       A,R1
   \                     ??writeItem_0:
   \   000082   6003         JZ        $+5
   \   000084   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   000087   7402         MOV       A,#0x2
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6E           XRL       A,R6
   \   00008E   7003         JNZ       ??writeItem_2
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6F           XRL       A,R7
   \                     ??writeItem_2:
   \   000093   6003         JZ        $+5
   \   000095   02....       LJMP      ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   000098   741B         MOV       A,#0x1b
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   7003         JNZ       $+5
   \   0000A0   02....       LJMP      ??writeItem_3 & 0xFFFF
   \   0000A3   7419         MOV       A,#0x19
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F5..         MOV       ?V4,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F5..         MOV       ?V5,A
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \   0000AF   85..82       MOV       DPL,?V4
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   EE           MOV       A,R6
   \   0000B5   F8           MOV       R0,A
   \   0000B6   EF           MOV       A,R7
   \   0000B7   F9           MOV       R1,A
   \   0000B8   E8           MOV       A,R0
   \   0000B9   5403         ANL       A,#0x3
   \   0000BB   F5..         MOV       ?V1,A
   \   0000BD   E582         MOV       A,DPL
   \   0000BF   4583         ORL       A,DPH
   \   0000C1   7015         JNZ       ??writeItem_4
   \   0000C3   E8           MOV       A,R0
   \   0000C4   75F0FF       MOV       B,#-0x1
   \   0000C7   A4           MUL       AB
   \   0000C8   F8           MOV       R0,A
   \   0000C9   AAF0         MOV       R2,B
   \   0000CB   75F0FF       MOV       B,#-0x1
   \   0000CE   E9           MOV       A,R1
   \   0000CF   A4           MUL       AB
   \   0000D0   2A           ADD       A,R2
   \   0000D1   F9           MOV       R1,A
   \   0000D2   E8           MOV       A,R0
   \   0000D3   FA           MOV       R2,A
   \   0000D4   E9           MOV       A,R1
   \   0000D5   FB           MOV       R3,A
   \   0000D6   801F         SJMP      ??writeItem_5
   \                     ??writeItem_4:
   \   0000D8   7A00         MOV       R2,#0x0
   \   0000DA   7B00         MOV       R3,#0x0
   \   0000DC   8009         SJMP      ??writeItem_6
   \                     ??writeItem_7:
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FC           MOV       R4,A
   \   0000E0   EA           MOV       A,R2
   \   0000E1   2C           ADD       A,R4
   \   0000E2   FA           MOV       R2,A
   \   0000E3   E4           CLR       A
   \   0000E4   3B           ADDC      A,R3
   \   0000E5   FB           MOV       R3,A
   \   0000E6   A3           INC       DPTR
   \                     ??writeItem_6:
   \   0000E7   E8           MOV       A,R0
   \   0000E8   FC           MOV       R4,A
   \   0000E9   E9           MOV       A,R1
   \   0000EA   FD           MOV       R5,A
   \   0000EB   EC           MOV       A,R4
   \   0000EC   24FF         ADD       A,#-0x1
   \   0000EE   18           DEC       R0
   \   0000EF   ED           MOV       A,R5
   \   0000F0   34FF         ADDC      A,#-0x1
   \   0000F2   F9           MOV       R1,A
   \   0000F3   EC           MOV       A,R4
   \   0000F4   4D           ORL       A,R5
   \   0000F5   70E7         JNZ       ??writeItem_7
   \                     ??writeItem_5:
   \   0000F7   E5..         MOV       A,?V1
   \   0000F9   601E         JZ        ??writeItem_8
   \   0000FB   F8           MOV       R0,A
   \   0000FC   7404         MOV       A,#0x4
   \   0000FE   C3           CLR       C
   \   0000FF   98           SUBB      A,R0
   \   000100   F8           MOV       R0,A
   \   000101   95E0         SUBB      A,0xE0 /* A   */
   \   000103   F9           MOV       R1,A
   \   000104   E8           MOV       A,R0
   \   000105   75F0FF       MOV       B,#-0x1
   \   000108   A4           MUL       AB
   \   000109   F8           MOV       R0,A
   \   00010A   ACF0         MOV       R4,B
   \   00010C   75F0FF       MOV       B,#-0x1
   \   00010F   E9           MOV       A,R1
   \   000110   A4           MUL       AB
   \   000111   2C           ADD       A,R4
   \   000112   F9           MOV       R1,A
   \   000113   EA           MOV       A,R2
   \   000114   28           ADD       A,R0
   \   000115   FA           MOV       R2,A
   \   000116   EB           MOV       A,R3
   \   000117   39           ADDC      A,R1
   \   000118   FB           MOV       R3,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   1099                if ( buf != NULL )
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   1109                    rtrn = TRUE;
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   1119            }
   \                     ??writeItem_8:
   \   000119   7404         MOV       A,#0x4
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000121   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000124   E5..         MOV       A,?V4
   \   000126   45..         ORL       A,?V5
   \   000128   6017         JZ        ??writeItem_9
   \   00012A                ; Setup parameters for call to function writeBuf
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   EE           MOV       A,R6
   \   000130   FC           MOV       R4,A
   \   000131   EF           MOV       A,R7
   \   000132   FD           MOV       R5,A
   \   000133   AA..         MOV       R2,?V2
   \   000135   AB..         MOV       R3,?V3
   \   000137   A9..         MOV       R1,?V0
   \   000139   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   00013C   7402         MOV       A,#0x2
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeItem_9:
   \   000141                ; Setup parameters for call to function calcChkF
   \   000141   EE           MOV       A,R6
   \   000142   FC           MOV       R4,A
   \   000143   EF           MOV       A,R7
   \   000144   FD           MOV       R5,A
   \   000145   AA..         MOV       R2,?V2
   \   000147   AB..         MOV       R3,?V3
   \   000149   A9..         MOV       R1,?V0
   \   00014B   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00014E   8A..         MOV       ?V4,R2
   \   000150   8B..         MOV       ?V5,R3
   \   000152   A8..         MOV       R0,?V4
   \   000154   A9..         MOV       R1,?V5
   \   000156   7404         MOV       A,#0x4
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   68           XRL       A,R0
   \   00015D   7003         JNZ       ??writeItem_10
   \   00015F   A3           INC       DPTR
   \   000160   E0           MOVX      A,@DPTR
   \   000161   69           XRL       A,R1
   \                     ??writeItem_10:
   \   000162   7030         JNZ       ??writeItem_11
   \   000164                ; Setup parameters for call to function setChk
   \   000164   7404         MOV       A,#0x4
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00016C   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   00016F   8A..         MOV       ?V4,R2
   \   000171   8B..         MOV       ?V5,R3
   \   000173   A8..         MOV       R0,?V4
   \   000175   A9..         MOV       R1,?V5
   \   000177   7404         MOV       A,#0x4
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   68           XRL       A,R0
   \   00017E   7003         JNZ       ??writeItem_12
   \   000180   A3           INC       DPTR
   \   000181   E0           MOVX      A,@DPTR
   \   000182   69           XRL       A,R1
   \                     ??writeItem_12:
   \   000183   700F         JNZ       ??writeItem_11
   \   000185                ; Setup parameters for call to function hotItemUpdate
   \   000185   85..82       MOV       DPL,?XSP + 0
   \   000188   85..83       MOV       DPH,?XSP + 1
   \   00018B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00018E   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \                     ??writeItem_3:
   \   000191   75..01       MOV       ?V6,#0x1
   \                     ??writeItem_11:
   \   000194   7402         MOV       A,#0x2
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   C3           CLR       C
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   94F4         SUBB      A,#-0xc
   \   00019D   A3           INC       DPTR
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   94FF         SUBB      A,#-0x1
   \   0001A1   4006         JC        ??writeItem_13
   \   0001A3   7EFC         MOV       R6,#-0x4
   \   0001A5   7FFF         MOV       R7,#-0x1
   \   0001A7   8043         SJMP      ??CrossCallReturnLabel_121
   \                     ??writeItem_13:
   \   0001A9   7402         MOV       A,#0x2
   \   0001AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001B1   8039         SJMP      ??CrossCallReturnLabel_121
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001B3   7402         MOV       A,#0x2
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   C3           CLR       C
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   94F4         SUBB      A,#-0xc
   \   0001BC   A3           INC       DPTR
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   94FF         SUBB      A,#-0x1
   \   0001C0   4006         JC        ??writeItem_14
   \   0001C2   7EFC         MOV       R6,#-0x4
   \   0001C4   7FFF         MOV       R7,#-0x1
   \   0001C6   8008         SJMP      ??CrossCallReturnLabel_18
   \                     ??writeItem_14:
   \   0001C8   7402         MOV       A,#0x2
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   12....       LCALL     ?Subroutine11 & 0xFFFF
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_18:
   \   0001D0   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001D3   F8           MOV       R0,A
   \   0001D4   7408         MOV       A,#0x8
   \   0001D6   99           SUBB      A,R1
   \   0001D7   F9           MOV       R1,A
   \   0001D8   C3           CLR       C
   \   0001D9   E8           MOV       A,R0
   \   0001DA   9E           SUBB      A,R6
   \   0001DB   E9           MOV       A,R1
   \   0001DC   9F           SUBB      A,R7
   \   0001DD   5008         JNC       ??writeItem_15
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001DF   12....       LCALL     ?Subroutine18 & 0xFFFF
   1127              }
   \                     ??CrossCallReturnLabel_124:
   \   0001E2   FE           MOV       R6,A
   \   0001E3   7408         MOV       A,#0x8
   \   0001E5   99           SUBB      A,R1
   \   0001E6   FF           MOV       R7,A
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_15:
   \   0001E7   A8..         MOV       R0,?V0
   \   0001E9   12....       LCALL     ?Subroutine23 & 0xFFFF
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_121:
   \   0001EC   A8..         MOV       R0,?V0
   \   0001EE   E8           MOV       A,R0
   \   0001EF   28           ADD       A,R0
   \   0001F0   F8           MOV       R0,A
   \   0001F1   E4           CLR       A
   \   0001F2   33           RLC       A
   \   0001F3   F9           MOV       R1,A
   \   0001F4   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0001F6   28           ADD       A,R0
   \   0001F7   F582         MOV       DPL,A
   \   0001F9   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0001FB   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   1132          
   1133            return rtrn;
   \                     ??CrossCallReturnLabel_119:
   \   0001FE   A9..         MOV       R1,?V6
   \   000200   740A         MOV       A,#0xa
   \   000202   02....       LJMP      ?Subroutine3 & 0xFFFF
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   A9..         MOV       R1,?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A8..         MOV       R0,?V0
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004                REQUIRE ??Subroutine56_0
   \   000004                ; // Fall through to label ??Subroutine56_0
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#hotIds & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??hotItem_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ        ??hotItem_2
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000020   09           INC       R1
   \   000021   E9           MOV       A,R1
   \   000022   C3           CLR       C
   \   000023   9403         SUBB      A,#0x3
   \   000025   40DF         JC        ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000014   C3           CLR       C
   \   000015   9403         SUBB      A,#0x3
   \   000017   500D         JNC       ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   000019   12....       LCALL     ?Subroutine39 & 0xFFFF
   1179                hotOff[hotIdx] = off;
   1180              }
   1181            }
   \                     ??CrossCallReturnLabel_96:
   \   00001C   E5..         MOV       A,?V0
   \   00001E   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000021   EE           MOV       A,R6
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   EF           MOV       A,R7
   \   000025   F0           MOVX      @DPTR,A
   1182          }
   \                     ??hotItemUpdate_0:
   \   000026   02....       LJMP      ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   74..         MOV       A,#hotPg & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E8           MOV       A,R0
   \   000002   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   29           ADD       A,R1
   \   000001   F8           MOV       R0,A
   \   000002   E4           CLR       A
   \   000003   33           RLC       A
   \   000004   F9           MOV       R1,A
   \   000005   74..         MOV       A,#hotOff & 0xff
   \   000007   28           ADD       A,R0
   \   000008   F582         MOV       DPL,A
   \   00000A   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   00000C   39           ADDC      A,R1
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1197          }
   \   000007   80..         SJMP      ?Subroutine5
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS        - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV       R1,#0x4e
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   603C         JZ        ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6010         JZ        ??osal_nv_item_init_1
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   000020                ; Setup parameters for call to function hotItemUpdate
   \   000020   EE           MOV       A,R6
   \   000021   FC           MOV       R4,A
   \   000022   EF           MOV       A,R7
   \   000023   FD           MOV       R5,A
   \   000024   90....       MOV       DPTR,#findPg
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1227          
   1228              return SUCCESS;
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   8023         SJMP      ??osal_nv_item_init_2
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   000030                ; Setup parameters for call to function initItem
   \   000030   740C         MOV       A,#0xc
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   7901         MOV       R1,#0x1
   \   000042   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   E9           MOV       A,R1
   \   00004B   6004         JZ        ??osal_nv_item_init_0
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   00004D   7909         MOV       R1,#0x9
   \   00004F   8002         SJMP      ??osal_nv_item_init_2
   1233            }
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   000051   790A         MOV       R1,#0xa
   1237            }
   \                     ??osal_nv_item_init_2:
   \   000053   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000011   E9           MOV       A,R1
   \   000012   F8           MOV       R0,A
   \   000013   C3           CLR       C
   \   000014   9403         SUBB      A,#0x3
   \   000016   5044         JNC       ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   000018   12....       LCALL     ?Subroutine39 & 0xFFFF
   1258              offset = hotOff[hotIdx];
   1259            }
   \                     ??CrossCallReturnLabel_97:
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   90....       MOV       DPTR,#findPg
   \   00001F   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1261            {
   1262              return 0;
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_39:
   \   000025                ; Setup parameters for call to function HalFlashRead
   \   000025   75..08       MOV       ?V0,#0x8
   \   000028   75..00       MOV       ?V1,#0x0
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?XSTACK_DISP102_8
   \   000035   EA           MOV       A,R2
   \   000036   24F8         ADD       A,#-0x8
   \   000038   FA           MOV       R2,A
   \   000039   EB           MOV       A,R3
   \   00003A   34FF         ADDC      A,#-0x1
   \   00003C   FB           MOV       R3,A
   \   00003D   90....       MOV       DPTR,#findPg
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000052   7408         MOV       A,#0x8
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   7F02         MOV       R7,#0x2
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??osal_nv_item_len_0:
   \   00005C                ; Setup parameters for call to function findItem
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000063   8B..         MOV       ?V1,R3
   \   000065   A9..         MOV       R1,?V1
   \   000067   EA           MOV       A,R2
   \   000068   49           ORL       A,R1
   \   000069   70BA         JNZ       ??CrossCallReturnLabel_39
   \   00006B   7A00         MOV       R2,#0x0
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   80E1         SJMP      ??CrossCallReturnLabel_40
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   740F         MOV       A,#0xf
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000012   8C..         MOV       ?V6,R4
   \   000014   8D..         MOV       ?V7,R5
   1285            uint8 rtrn = SUCCESS;
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001D   794E         MOV       R1,#0x4e
   \   00001F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000022   E9           MOV       A,R1
   \   000023   7003         JNZ       $+5
   \   000025   02....       LJMP      ??osal_nv_write_0 & 0xFFFF
   1288            {
   1289              return NV_OPER_FAILED;
   1290            }
   1291            else if ( len != 0 )
   \   000028   7421         MOV       A,#0x21
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   000035                ; Setup parameters for call to function findItem
   \   000035   740F         MOV       A,#0xf
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine9 & 0xFFFF
   1299              srcPg = findPg;
   \                     ??CrossCallReturnLabel_9:
   \   000048   90....       MOV       DPTR,#findPg
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   C0E0         PUSH      A
   \   00004E   7401         MOV       A,#0x1
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   D0E0         POP       A
   \   000055   F0           MOVX      @DPTR,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00005E   7005         JNZ       ??osal_nv_write_2
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   000060   7909         MOV       R1,#0x9
   \   000062   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_2:
   \   000065                ; Setup parameters for call to function HalFlashRead
   \   000065   75..08       MOV       ?V0,#0x8
   \   000068   75..00       MOV       ?V1,#0x0
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7405         MOV       A,#0x5
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   24F8         ADD       A,#-0x8
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   34FF         ADDC      A,#-0x1
   \   000082   FB           MOV       R3,A
   \   000083   7403         MOV       A,#0x3
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00008D   7402         MOV       A,#0x2
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   000092   7409         MOV       A,#0x9
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   C082         PUSH      DPL
   \   000099   C083         PUSH      DPH
   \   00009B   7421         MOV       A,#0x21
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000A3   D083         POP       DPH
   \   0000A5   D082         POP       DPL
   \   0000A7   C3           CLR       C
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   98           SUBB      A,R0
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   99           SUBB      A,R1
   \   0000AD   5005         JNC       ??osal_nv_write_4
   1307              {
   1308                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   0000AF   790A         MOV       R1,#0xa
   \   0000B1   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1309              }
   1310          
   1311              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000B4   7403         MOV       A,#0x3
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   25..         ADD       A,?V6
   \   0000BC   FE           MOV       R6,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   35..         ADDC      A,?V7
   \   0000C1   FF           MOV       R7,A
   1312              ptr = buf;
   \   0000C2   7423         MOV       A,#0x23
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000CA   7405         MOV       A,#0x5
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ?Subroutine10 & 0xFFFF
   1313              cnt = len;
   \                     ??CrossCallReturnLabel_14:
   \   0000D2   7421         MOV       A,#0x21
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine22 & 0xFFFF
   1314              chk = 0;
   \                     ??CrossCallReturnLabel_60:
   \   0000DA   75..00       MOV       ?V2,#0x0
   \   0000DD   807A         SJMP      ??CrossCallReturnLabel_15
   1315              while ( cnt-- )
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_5:
   \   0000DF                ; Setup parameters for call to function HalFlashRead
   \   0000DF   75..01       MOV       ?V4,#0x1
   \   0000E2   75..00       MOV       ?V5,#0x0
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EA   7402         MOV       A,#0x2
   \   0000EC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000EF   EE           MOV       A,R6
   \   0000F0   FA           MOV       R2,A
   \   0000F1   EF           MOV       A,R7
   \   0000F2   FB           MOV       R3,A
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   000102   85..82       MOV       DPL,?XSP + 0
   \   000105   85..83       MOV       DPH,?XSP + 1
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   7405         MOV       A,#0x5
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000112   69           XRL       A,R1
   \   000113   602F         JZ        ??osal_nv_write_6
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   000115   75..01       MOV       ?V2,#0x1
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   000118   85..82       MOV       DPL,?XSP + 0
   \   00011B   85..83       MOV       DPH,?XSP + 1
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F8           MOV       R0,A
   \   000120   740B         MOV       A,#0xb
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   C3           CLR       C
   \   000126   E0           MOVX      A,@DPTR
   \   000127   98           SUBB      A,R0
   \   000128   F0           MOVX      @DPTR,A
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   9400         SUBB      A,#0x0
   \   00012D   F0           MOVX      @DPTR,A
   1324                  hdr.chk += *ptr;
   \   00012E   7405         MOV       A,#0x5
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   12....       LCALL     ?Subroutine15 & 0xFFFF
   1325                }
   \                     ??CrossCallReturnLabel_35:
   \   000136   F8           MOV       R0,A
   \   000137   740B         MOV       A,#0xb
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   28           ADD       A,R0
   \   00013E   F0           MOVX      @DPTR,A
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   3400         ADDC      A,#0x0
   \   000143   F0           MOVX      @DPTR,A
   1326                srcOff++;
   \                     ??osal_nv_write_6:
   \   000144   0E           INC       R6
   \   000145   EE           MOV       A,R6
   \   000146   7001         JNZ       ??osal_nv_write_7
   \   000148   0F           INC       R7
   1327                ptr++;
   \                     ??osal_nv_write_7:
   \   000149   7405         MOV       A,#0x5
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ?Subroutine43 & 0xFFFF
   1328              }
   \                     ??CrossCallReturnLabel_105:
   \   000151   7405         MOV       A,#0x5
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000159   A8..         MOV       R0,?V0
   \   00015B   A9..         MOV       R1,?V1
   \   00015D   E8           MOV       A,R0
   \   00015E   24FF         ADD       A,#-0x1
   \   000160   F5..         MOV       ?V0,A
   \   000162   E9           MOV       A,R1
   \   000163   34FF         ADDC      A,#-0x1
   \   000165   F5..         MOV       ?V1,A
   \   000167   E8           MOV       A,R0
   \   000168   49           ORL       A,R1
   \   000169   6003         JZ        $+5
   \   00016B   02....       LJMP      ??osal_nv_write_5 & 0xFFFF
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   00016E   E5..         MOV       A,?V2
   \   000170   A2E0         MOV       C,0xE0 /* A   */.0
   \   000172   4003         JC        $+5
   \   000174   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000177   85..82       MOV       DPL,?XSP + 0
   \   00017A   85..83       MOV       DPH,?XSP + 1
   \   00017D   E4           CLR       A
   \   00017E   F0           MOVX      @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   00017F                ; Setup parameters for call to function initItem
   \   00017F   A8..         MOV       R0,?XSP + 0
   \   000181   A9..         MOV       R1,?XSP + 1
   \   000183   88..         MOV       ?V0,R0
   \   000185   89..         MOV       ?V1,R1
   \   000187   78..         MOV       R0,#?V0
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018C   740B         MOV       A,#0xb
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000194   7411         MOV       A,#0x11
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00019C   7900         MOV       R1,#0x0
   \   00019E   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   0001A1   7402         MOV       A,#0x2
   \   0001A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A6   E9           MOV       A,R1
   \   0001A7   F5..         MOV       ?V2,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   0001A9   7003         JNZ       $+5
   \   0001AB   02....       LJMP      ??osal_nv_write_8 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   0001AE   7409         MOV       A,#0x9
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0001B6   4008         JC        ??osal_nv_write_9
   \   0001B8   75..FC       MOV       ?V0,#-0x4
   \   0001BB   75..FF       MOV       ?V1,#-0x1
   \   0001BE   800D         SJMP      ??osal_nv_write_10
   \                     ??osal_nv_write_9:
   \   0001C0   7409         MOV       A,#0x9
   \   0001C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C5   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001C8   F5..         MOV       ?V0,A
   \   0001CA   E9           MOV       A,R1
   \   0001CB   F5..         MOV       ?V1,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_10:
   \   0001CD   12....       LCALL     ?Subroutine28 & 0xFFFF
   1339                  srcOff = origOff;
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_72:
   \   0001D0   740D         MOV       A,#0xd
   \   0001D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F4           CPL       A
   \   0001D7   7003         JNZ       ??osal_nv_write_11
   \   0001D9   A3           INC       DPTR
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F4           CPL       A
   \                     ??osal_nv_write_11:
   \   0001DC   7014         JNZ       ??osal_nv_write_12
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   0001DE                ; Setup parameters for call to function setItem
   \   0001DE   7C00         MOV       R4,#0x0
   \   0001E0   7403         MOV       A,#0x3
   \   0001E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL     ?Subroutine16 & 0xFFFF
   1347                  }
   \                     ??CrossCallReturnLabel_43:
   \   0001E8   7401         MOV       A,#0x1
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   E0           MOVX      A,@DPTR
   \   0001EE   F9           MOV       R1,A
   \   0001EF   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_12:
   \   0001F2                ; Setup parameters for call to function xferBuf
   \   0001F2   78..         MOV       R0,#?V6
   \   0001F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F7   8E..         MOV       ?V4,R6
   \   0001F9   8F..         MOV       ?V5,R7
   \   0001FB   78..         MOV       R0,#?V4
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000200   AC..         MOV       R4,?V2
   \   000202   7407         MOV       A,#0x7
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00020A   7405         MOV       A,#0x5
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F9           MOV       R1,A
   \   000211   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000214   7404         MOV       A,#0x4
   \   000216   12....       LCALL     ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   1351                  dstOff += ndx;
   \   000219   EE           MOV       A,R6
   \   00021A   25..         ADD       A,?V6
   \   00021C   FE           MOV       R6,A
   \   00021D   EF           MOV       A,R7
   \   00021E   35..         ADDC      A,?V7
   \   000220   FF           MOV       R7,A
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \   000221                ; Setup parameters for call to function writeBuf
   \   000221   7423         MOV       A,#0x23
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000229   7423         MOV       A,#0x23
   \   00022B   12....       LCALL     ?XSTACK_DISP0_8
   \   00022E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000231   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000234   7402         MOV       A,#0x2
   \   000236   12....       LCALL     ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   1355                  dstOff += len;
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000239                ; Setup parameters for call to function xferBuf
   \   000239   7409         MOV       A,#0x9
   \   00023B   12....       LCALL     ?XSTACK_DISP0_8
   \   00023E   E0           MOVX      A,@DPTR
   \   00023F   C3           CLR       C
   \   000240   95..         SUBB      A,?V6
   \   000242   FA           MOV       R2,A
   \   000243   A3           INC       DPTR
   \   000244   E0           MOVX      A,@DPTR
   \   000245   95..         SUBB      A,?V7
   \   000247   FB           MOV       R3,A
   \   000248   7421         MOV       A,#0x21
   \   00024A   12....       LCALL     ?XSTACK_DISP0_8
   \   00024D   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000250   EA           MOV       A,R2
   \   000251   C3           CLR       C
   \   000252   98           SUBB      A,R0
   \   000253   F5..         MOV       ?V4,A
   \   000255   EB           MOV       A,R3
   \   000256   99           SUBB      A,R1
   \   000257   F5..         MOV       ?V5,A
   \   000259   78..         MOV       R0,#?V4
   \   00025B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025E   7423         MOV       A,#0x23
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   E0           MOVX      A,@DPTR
   \   000264   2E           ADD       A,R6
   \   000265   F5..         MOV       ?V4,A
   \   000267   A3           INC       DPTR
   \   000268   E0           MOVX      A,@DPTR
   \   000269   3F           ADDC      A,R7
   \   00026A   F5..         MOV       ?V5,A
   \   00026C   78..         MOV       R0,#?V4
   \   00026E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000271   AC..         MOV       R4,?V2
   \   000273   7407         MOV       A,#0x7
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00027B   7425         MOV       A,#0x25
   \   00027D   12....       LCALL     ?XSTACK_DISP0_8
   \   000280   E0           MOVX      A,@DPTR
   \   000281   28           ADD       A,R0
   \   000282   FA           MOV       R2,A
   \   000283   A3           INC       DPTR
   \   000284   E0           MOVX      A,@DPTR
   \   000285   39           ADDC      A,R1
   \   000286   FB           MOV       R3,A
   \   000287   7405         MOV       A,#0x5
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F9           MOV       R1,A
   \   00028E   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000291   7404         MOV       A,#0x4
   \   000293   12....       LCALL     ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000296   12....       LCALL     ?Subroutine28 & 0xFFFF
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_73:
   \   000299                ; Setup parameters for call to function calcChkF
   \   000299   7409         MOV       A,#0x9
   \   00029B   12....       LCALL     ?XSTACK_DISP0_8
   \   00029E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002A1   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   0002A4   8A..         MOV       ?V0,R2
   \   0002A6   8B..         MOV       ?V1,R3
   \   0002A8   A8..         MOV       R0,?V0
   \   0002AA   A9..         MOV       R1,?V1
   \   0002AC   740B         MOV       A,#0xb
   \   0002AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   68           XRL       A,R0
   \   0002B3   7003         JNZ       ??osal_nv_write_13
   \   0002B5   A3           INC       DPTR
   \   0002B6   E0           MOVX      A,@DPTR
   \   0002B7   69           XRL       A,R1
   \                     ??osal_nv_write_13:
   \   0002B8   702E         JNZ       ??osal_nv_write_8
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   0002BA                ; Setup parameters for call to function setChk
   \   0002BA   740B         MOV       A,#0xb
   \   0002BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BF   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0002C2   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0002C5   8A..         MOV       ?V0,R2
   \   0002C7   8B..         MOV       ?V1,R3
   \   0002C9   A8..         MOV       R0,?V0
   \   0002CB   A9..         MOV       R1,?V1
   \   0002CD   740B         MOV       A,#0xb
   \   0002CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   68           XRL       A,R0
   \   0002D4   7003         JNZ       ??osal_nv_write_14
   \   0002D6   A3           INC       DPTR
   \   0002D7   E0           MOVX      A,@DPTR
   \   0002D8   69           XRL       A,R1
   \                     ??osal_nv_write_14:
   \   0002D9   700D         JNZ       ??osal_nv_write_8
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   0002DB                ; Setup parameters for call to function hotItemUpdate
   \   0002DB   7407         MOV       A,#0x7
   \   0002DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E0   12....       LCALL     ?Subroutine12 & 0xFFFF
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   1376                  }
   1377                }
   \                     ??CrossCallReturnLabel_22:
   \   0002E3   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   0002E6   8008         SJMP      ??osal_nv_write_15
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_8:
   \   0002E8   7402         MOV       A,#0x2
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   740A         MOV       A,#0xa
   \   0002EF   F0           MOVX      @DPTR,A
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_15:
   \   0002F0   85..82       MOV       DPL,?XSP + 0
   \   0002F3   85..83       MOV       DPH,?XSP + 1
   \   0002F6   E0           MOVX      A,@DPTR
   \   0002F7   603E         JZ        ??osal_nv_write_16
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002F9   7401         MOV       A,#0x1
   \   0002FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FE   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000301   7014         JNZ       ??osal_nv_write_17
   \   000303   7402         MOV       A,#0x2
   \   000305   12....       LCALL     ?XSTACK_DISP0_8
   \   000308   E0           MOVX      A,@DPTR
   \   000309   640A         XRL       A,#0xa
   \   00030B   700A         JNZ       ??osal_nv_write_17
   1389                  {
   1390                    erasePage( pgRes );
   \   00030D                ; Setup parameters for call to function erasePage
   \   00030D   90....       MOV       DPTR,#pgRes
   \   000310   E0           MOVX      A,@DPTR
   \   000311   F9           MOV       R1,A
   \   000312   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000315   8047         SJMP      ??osal_nv_write_1
   1391                  }
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_17:
   \   000317                ; Setup parameters for call to function setPageUse
   \   000317   7A01         MOV       R2,#0x1
   \   000319   90....       MOV       DPTR,#pgRes
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   F9           MOV       R1,A
   \   00031E   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000321                ; Setup parameters for call to function erasePage
   \   000321   85..82       MOV       DPL,?XSP + 0
   \   000324   85..83       MOV       DPH,?XSP + 1
   \   000327   E0           MOVX      A,@DPTR
   \   000328   F9           MOV       R1,A
   \   000329   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00032C   85..82       MOV       DPL,?XSP + 0
   \   00032F   85..83       MOV       DPH,?XSP + 1
   \   000332   E0           MOVX      A,@DPTR
   \   000333   90....       MOV       DPTR,#pgRes
   \   000336   F0           MOVX      @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_16:
   \   000337   7401         MOV       A,#0x1
   \   000339   12....       LCALL     ?XSTACK_DISP0_8
   \   00033C   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00033F   601D         JZ        ??osal_nv_write_1
   \   000341   7402         MOV       A,#0x2
   \   000343   12....       LCALL     ?XSTACK_DISP0_8
   \   000346   E0           MOVX      A,@DPTR
   \   000347   640A         XRL       A,#0xa
   \   000349   6013         JZ        ??osal_nv_write_1
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   00034B                ; Setup parameters for call to function setItem
   \   00034B   7C01         MOV       R4,#0x1
   \   00034D   7403         MOV       A,#0x3
   \   00034F   12....       LCALL     ?XSTACK_DISP0_8
   \   000352   12....       LCALL     ?Subroutine16 & 0xFFFF
   1404                }
   1405              }
   1406            }
   \                     ??CrossCallReturnLabel_45:
   \   000355   EC           MOV       A,R4
   \   000356   12....       LCALL     ?XSTACK_DISP0_8
   \   000359   E0           MOVX      A,@DPTR
   \   00035A   F9           MOV       R1,A
   \   00035B   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1407          
   1408            return rtrn;
   \                     ??osal_nv_write_1:
   \   00035E   7402         MOV       A,#0x2
   \   000360   12....       LCALL     ?XSTACK_DISP0_8
   \   000363   E0           MOVX      A,@DPTR
   \   000364   F9           MOV       R1,A
   \                     ??osal_nv_write_3:
   \   000365   7411         MOV       A,#0x11
   \   000367   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25..         ADD       A,?V6
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V7
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A8..         MOV       R0,?V2
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C3           CLR       C
   \   000009   95..         SUBB      A,?V0
   \   00000B   FE           MOV       R6,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   95..         SUBB      A,?V1
   \   000010   FF           MOV       R7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   68           XRL       A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   A9..         MOV       R1,?V2
   \   000009   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000010   E9           MOV       A,R1
   \   000011   F8           MOV       R0,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FF           MOV       R7,A
   \   00001C   7412         MOV       A,#0x12
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V3,A
   \   000028   E8           MOV       A,R0
   \   000029   C3           CLR       C
   \   00002A   9403         SUBB      A,#0x3
   \   00002C   502A         JNC       ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002E   E8           MOV       A,R0
   \   00002F   F5..         MOV       ?V0,A
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   8E..         MOV       ?V6,R6
   \   000033   8F..         MOV       ?V7,R7
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   AC..         MOV       R4,?V2
   \   00003C   AD..         MOV       R5,?V3
   \   00003E   E9           MOV       A,R1
   \   00003F   12....       LCALL     ?Subroutine47 & 0xFFFF
   1434              return SUCCESS;
   1435            }
   \                     ??CrossCallReturnLabel_109:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   25..         ADD       A,?V4
   \   000045   FA           MOV       R2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   35..         ADDC      A,?V5
   \   00004A   FB           MOV       R3,A
   \   00004B   74..         MOV       A,#hotPg & 0xff
   \   00004D   25..         ADD       A,?V0
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000054   F583         MOV       DPH,A
   \   000056   8027         SJMP      ??osal_nv_read_1
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000058                ; Setup parameters for call to function findItem
   \   000058   AA..         MOV       R2,?V0
   \   00005A   AB..         MOV       R3,?V1
   \   00005C   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00005F   EA           MOV       A,R2
   \   000060   4B           ORL       A,R3
   \   000061   7004         JNZ       ??osal_nv_read_2
   1438            {
   1439              return NV_OPER_FAILED;
   \   000063   790A         MOV       R1,#0xa
   \   000065   8024         SJMP      ??osal_nv_read_3
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000067                ; Setup parameters for call to function HalFlashRead
   \   000067   8E..         MOV       ?V0,R6
   \   000069   8F..         MOV       ?V1,R7
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   AC..         MOV       R4,?V2
   \   000072   AD..         MOV       R5,?V3
   \   000074   EA           MOV       A,R2
   \   000075   25..         ADD       A,?V4
   \   000077   FA           MOV       R2,A
   \   000078   EB           MOV       A,R3
   \   000079   35..         ADDC      A,?V5
   \   00007B   FB           MOV       R3,A
   \   00007C   90....       MOV       DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000084   7402         MOV       A,#0x2
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   000089   7900         MOV       R1,#0x0
   1445            }
   \                     ??osal_nv_read_3:
   \   00008B   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   1446          }
   1447          
   1448          /*********************************************************************
   1449           * @fn      osal_nv_delete
   1450           *
   1451           * @brief   Delete item from NV. This function will fail if the length
   1452           *          parameter does not match the length of the item in NV.
   1453           *
   1454           * @param   id  - Valid NV item Id.
   1455           * @param   len - Length of item to delete.
   1456           *
   1457           * @return  SUCCESS if item was deleted,
   1458           *          NV_ITEM_UNINIT if item did not exist in NV,
   1459           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1460           *          NV_OPER_FAILED if attempted deletion failed.
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1464            uint16 length;
   1465            uint16 offset;
   1466          
   1467            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   1468            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   7004         JNZ       ??osal_nv_delete_0
   1469            {
   1470              // NV item does not exist
   1471              return NV_ITEM_UNINIT;
   \   000019   7909         MOV       R1,#0x9
   \   00001B   803D         SJMP      ??osal_nv_delete_1
   1472            }
   1473          
   1474            length = osal_nv_item_len( id );
   1475            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001D                ; Setup parameters for call to function osal_nv_item_len
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000024   8A..         MOV       ?V4,R2
   \   000026   8B..         MOV       ?V5,R3
   \   000028   E5..         MOV       A,?V2
   \   00002A   65..         XRL       A,?V4
   \   00002C   7004         JNZ       ??osal_nv_delete_2
   \   00002E   E5..         MOV       A,?V3
   \   000030   65..         XRL       A,?V5
   \                     ??osal_nv_delete_2:
   \   000032   6004         JZ        ??osal_nv_delete_3
   1476            {
   1477              // NV item has different length
   1478              return NV_BAD_ITEM_LEN;
   \   000034   790C         MOV       R1,#0xc
   \   000036   8022         SJMP      ??osal_nv_delete_1
   1479            }
   1480          
   1481            // Set item header ID to zero to 'delete' the item
   1482            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000038                ; Setup parameters for call to function setItem
   \   000038   7C01         MOV       R4,#0x1
   \   00003A   AA..         MOV       R2,?V0
   \   00003C   AB..         MOV       R3,?V1
   \   00003E   90....       MOV       DPTR,#findPg
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1483          
   1484            // Verify that item has been removed
   1485            offset = findItem( id );
   1486            if ( offset != OSAL_NV_ITEM_NULL )
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00004D   8B..         MOV       ?V1,R3
   \   00004F   EA           MOV       A,R2
   \   000050   45..         ORL       A,?V1
   \   000052   6004         JZ        ??osal_nv_delete_4
   1487            {
   1488              // Still there
   1489              return NV_OPER_FAILED;
   \   000054   790A         MOV       R1,#0xa
   \   000056   8002         SJMP      ??osal_nv_delete_1
   1490            }
   1491            else
   1492            {
   1493              // Yes, it's gone
   1494              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000058   7900         MOV       R1,#0x0
   1495            }
   \                     ??osal_nv_delete_1:
   \   00005A   02....       LJMP      ?Subroutine4 & 0xFFFF
   1496          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1497          
   1498          /*********************************************************************
   1499           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     54   calcChkF
        0     21   -> HalFlashRead
      0     56   compactPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> erasePage
        0     26   -> hotItemUpdate
        0     26   -> setChk
        0     26   -> setItem
        0     26   -> setPageUse
        0     29   -> writeItem
        0     30   -> xferBuf
      0     42   erasePage
        0      9   -> HalFlashErase
      0     45   findItem
        0     12   -> initPage
      2     18   hotItem
      1     42   hotItemUpdate
        0      9   -> hotItem
      1     64   initItem
        0     28   -> HalFlashRead
        0     26   -> compactPage
        0     26   -> erasePage
        0     26   -> setPageUse
        0     29   -> writeItem
        0     26   -> writeWordH
      2     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      2     41   osal_nv_write
        0     33   -> HalAdcCheckVdd
        0     35   -> HalFlashRead
        0     33   -> calcChkF
        0     33   -> erasePage
        0     33   -> findItem
        0     33   -> hotItemUpdate
        0     35   -> initItem
        0     33   -> setChk
        0     33   -> setItem
        0     33   -> setPageUse
        0     35   -> writeBuf
        0     37   -> xferBuf
      0     49   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     57   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     50   setPageUse
        0     17   -> writeWord
      1     57   writeBuf
        0     22   -> HalFlashRead
        0     22   -> HalFlashWrite
        0     20   -> writeWord
      0     56   writeItem
        0     27   -> HalFlashRead
        0     25   -> calcChkF
        0     25   -> hotItemUpdate
        0     25   -> setChk
        0     27   -> writeBuf
        0     25   -> writeWord
      0     39   writeWord
        0     14   -> HalFlashWrite
      1     39   writeWordH
        0     13   -> writeWord
      1     60   xferBuf
        0     23   -> HalFlashRead
        0     21   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ??Subroutine48_0
       3  ??Subroutine49_0
       5  ??Subroutine50_0
       5  ??Subroutine51_0
       8  ??Subroutine52_0
      11  ??Subroutine53_0
       3  ??Subroutine54_0
       5  ??Subroutine55_0
      10  ??Subroutine56_0
       2  ?Subroutine0
       3  ?Subroutine1
       6  ?Subroutine10
      10  ?Subroutine11
      10  ?Subroutine12
      13  ?Subroutine13
       6  ?Subroutine14
       5  ?Subroutine15
       6  ?Subroutine16
       7  ?Subroutine17
       4  ?Subroutine18
       9  ?Subroutine19
       2  ?Subroutine2
      10  ?Subroutine20
       4  ?Subroutine21
       8  ?Subroutine22
      13  ?Subroutine23
       6  ?Subroutine24
      16  ?Subroutine25
       4  ?Subroutine26
      11  ?Subroutine27
      18  ?Subroutine28
      10  ?Subroutine29
       8  ?Subroutine3
       1  ?Subroutine30
       4  ?Subroutine31
      15  ?Subroutine32
      17  ?Subroutine33
      17  ?Subroutine34
      12  ?Subroutine35
      12  ?Subroutine36
      12  ?Subroutine37
      15  ?Subroutine38
      11  ?Subroutine39
       5  ?Subroutine4
      13  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
      10  ?Subroutine43
       9  ?Subroutine44
      15  ?Subroutine45
      11  ?Subroutine46
      16  ?Subroutine47
       7  ?Subroutine5
       6  ?Subroutine6
       7  ?Subroutine7
      12  ?Subroutine8
       6  ?Subroutine9
   12288  _nvBuf
     134  calcChkF
       6  calcChkF::?relay
     576  compactPage
       6  compactPage::?relay
      29  erasePage
       6  erasePage::?relay
      64  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      39  hotItem
       6  hotItem::?relay
      41  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     362  initItem
       6  initItem::?relay
     290  initNV
       6  initNV::?relay
     443  initPage
       6  initPage::?relay
      93  osal_nv_delete
       6  osal_nv_delete::?relay
       9  osal_nv_init
       6  osal_nv_init::?relay
      86  osal_nv_item_init
       6  osal_nv_item_init::?relay
     113  osal_nv_item_len
       6  osal_nv_item_len::?relay
     142  osal_nv_read
       6  osal_nv_read::?relay
     874  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      88  setChk
       6  setChk::?relay
     120  setItem
       6  setItem::?relay
      55  setPageUse
       6  setPageUse::?relay
     353  writeBuf
       6  writeBuf::?relay
     517  writeItem
       6  writeItem::?relay
      58  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     367  xferBuf
       6  xferBuf::?relay

 
  5 415 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    138 bytes of CODE     memory
      6 bytes of CONST    memory
  5 415 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
