###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               12/Sep/2024  23:51:35
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\Source\SampleApp.c
#    Command line       =  
#        -f C:\user\EW46E7.tmp ("C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\Source\SampleApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\Source\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        C:\Texas
#        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\temp_wireless\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT.h"
     75          #include "MT_UART.h"
     76          #include "string.h"
     77          #include "dht11.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          /*********************************************************************
     84           * CONSTANTS
     85           */
     86          
     87          /*********************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          
     95          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     96          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     97          {
     98            SAMPLEAPP_PERIODIC_CLUSTERID,
     99            SAMPLEAPP_FLASH_CLUSTERID
    100          };
    101          

   \                                 In  segment XDATA_ROM_C, align 1
    102          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    103          {
    104            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    105            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    106            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    107            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    108            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    109            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    113          };
    114          
    115          // This is the Endpoint/Interface description.  It is defined here, but
    116          // filled-in in SampleApp_Init().  Another way to go would be to fill
    117          // in the structure here and make it a "const" (in code space).  The
    118          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133                                    // This variable will be received when
    134                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    151          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    152          void SampleApp_SendPeriodicMessage( void );
    153          void SampleApp_SendFlashMessage( uint16 flashTime );
    154          void FanControl(uint8 * msg);
    155          void TempControl(uint8 * msg);
    156          void DataAnalysis(uint8 * msg);
    157          /*********************************************************************
    158           * NETWORK LAYER CALLBACKS
    159           */
    160          
    161          /*********************************************************************
    162           * PUBLIC FUNCTIONS
    163           */
    164          
    165          /*********************************************************************
    166           * @fn      SampleApp_Init
    167           *
    168           * @brief   Initialization function for the Generic App Task.
    169           *          This is called during initialization and should contain
    170           *          any application specific initialization (ie. hardware
    171           *          initialization/setup, table initialization, power up
    172           *          notificaiton ... ).
    173           *
    174           * @param   task_id - the ID assigned by OSAL.  This ID should be
    175           *                    used to send messages and set timers.
    176           *
    177           * @return  none
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    180          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    181            SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    182            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    183            SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    184            
    185            MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    186            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    187          
    188            // Device hardware initialization can be added here or in main() (Zmain.c).
    189            // If the hardware is application specific - add it here.
    190            // If the hardware is other parts of the device add it in main().
    191          
    192           #if defined ( BUILD_ALL_DEVICES )
    193            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    194            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    195            // together - if they are - we will start up a coordinator. Otherwise,
    196            // the device will start as a router.
    197            if ( readCoordinatorJumper() )
    198              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    199            else
    200              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    201          #endif // BUILD_ALL_DEVICES
    202          
    203          #if defined ( HOLD_AUTO_START )
    204            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    205            //  from starting the device and wait for the application to
    206            //  start the device.
    207            ZDOInitDevice(0);
    208          #endif
    209          
    210            // Setup for the periodic message's destination address
    211            // Broadcast to everyone
    212            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥Ä£Ê½
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    213            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    214            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//¹ã²¥µØÖ·
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    215          
    216            // Setup for the flash command's destination address - Group 1
    217            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥Ä£Ê½
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    218            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//¶ËµãºÅ
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    219            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//µØÖ·
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   7401         MOV       A,#0x1
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   E4           CLR       A
   \   000042   F0           MOVX      @DPTR,A
    220          
    221            // Fill out the endpoint description.
    222            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   90....       MOV       DPTR,#SampleApp_epDesc
   \   000046   7414         MOV       A,#0x14
   \   000048   F0           MOVX      @DPTR,A
    223            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000049   A3           INC       DPTR
   \   00004A   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   000050   F0           MOVX      @DPTR,A
    224            SampleApp_epDesc.simpleDesc
    225                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000051   A3           INC       DPTR
   \   000052   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000058   F0           MOVX      @DPTR,A
    226            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000059   A3           INC       DPTR
   \   00005A   E4           CLR       A
   \   00005B   F0           MOVX      @DPTR,A
    227          
    228            // Register the endpoint description with the AF
    229            afRegister( &SampleApp_epDesc );
   \   00005C                ; Setup parameters for call to function afRegister
   \   00005C   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005E   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    230          
    231            // Register for all key events - This app will handle all key events
    232            RegisterForKeys( SampleApp_TaskID );
   \   000063                ; Setup parameters for call to function RegisterForKeys
   \   000063   90....       MOV       DPTR,#SampleApp_TaskID
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F9           MOV       R1,A
   \   000068   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    233          
    234            // By default, all devices start out in Group 1
    235            SampleApp_Group.ID = 0x0001;
   \   00006B   90....       MOV       DPTR,#SampleApp_Group
   \   00006E   7401         MOV       A,#0x1
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
    236            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000077   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00007A   F5..         MOV       ?V2,A
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000081   7C07         MOV       R4,#0x7
   \   000083   7D00         MOV       R5,#0x0
   \   000085   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000087   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000089   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008C   7403         MOV       A,#0x3
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
    237            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000091                ; Setup parameters for call to function aps_AddGroup
   \   000091   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000093   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000095   7914         MOV       R1,#0x14
   \   000097   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    238          
    239          #if defined ( LCD_SUPPORTED )
    240            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   00009A                ; Setup parameters for call to function HalLcdWriteString
   \   00009A   7901         MOV       R1,#0x1
   \   00009C   7A..         MOV       R2,#`?<Constant "SampleApp">` & 0xff
   \   00009E   7B..         MOV       R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A0   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    241          #endif
    242          }
   \   0000A3                REQUIRE ?Subroutine0
   \   0000A3                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    243          
    244          /*********************************************************************
    245           * @fn      SampleApp_ProcessEvent
    246           *
    247           * @brief   Generic Application Task event processor.  This function
    248           *          is called to process all events for the task.  Events
    249           *          include timers, messages and any other user defined events.
    250           *
    251           * @param   task_id  - The OSAL assigned task ID.
    252           * @param   events - events to process.  This is a bit map and can
    253           *                   contain more than one event.
    254           *
    255           * @return  none
    256           */
    257          extern uint8 new_cmd[1024];

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    258          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    259          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    260            afIncomingMSGPacket_t *MSGpkt;
    261            (void)task_id;  // Intentionally unreferenced parameter
    262          
    263            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??SampleApp_ProcessEvent_0 & 0xFFFF
    264            {
    265              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800D         SJMP      ??SampleApp_ProcessEvent_1
    266              while ( MSGpkt )
    267              {
    268                switch ( MSGpkt->hdr.event )
    269                {
    270                  // Received when a key is pressed
    271                  case KEY_CHANGE:
    272                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    273                    break;
    274          
    275                  // Received when a messages is received (OTA) for this endpoint
    276                  case AF_INCOMING_MSG_CMD:
    277                    DataAnalysis(new_cmd);
    278                    break;
    279                  case CMD_SERIAL_MSG:
    280                    mtOSALSerialData_t * UartMsg;
                           ^
Warning[Pe1072]: a declaration cannot have a label
    281                    UartMsg = (mtOSALSerialData_t *)MSGpkt; //&UartMsg->msg[1]
    282                    AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,SAMPLEAPP_PERIODIC_CLUSTERID,UartMsg->msg[0],&UartMsg->msg[1],&SampleApp_TransID,AF_DISCV_ROUTE,AF_DEFAULT_RADIUS );
    283                    break;
    284          
    285                  // Received whenever the device changes state in the network
    286                  case ZDO_STATE_CHANGE:
    287                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   90....       MOV       DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX      @DPTR,A
    288                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    289                        || (SampleApp_NwkState == DEV_ROUTER)
    290                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    291                    {
    292                      // Start sending the periodic message in a regular interval.
    293                      //osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    294                    }
    295                    else
    296                    {
    297                      // Device is no longer in the network
    298                    }
    299                    break;
    300          
    301                  default:
    302                    break;
    303                }
    304          
    305                // Release the memory
    306                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function osal_msg_deallocate
   \   000018   AA..         MOV       R2,?V0
   \   00001A   AB..         MOV       R3,?V1
   \   00001C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    307          
    308                // Next - if one is available
    309                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   E5..         MOV       A,?V0
   \   00002D   45..         ORL       A,?V1
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??SampleApp_ProcessEvent_4 & 0xFFFF
   \   000034   85..82       MOV       DPL,?V0
   \   000037   85..83       MOV       DPH,?V1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   14           DEC       A
   \   00003C   602B         JZ        ??SampleApp_ProcessEvent_5
   \   00003E   24E7         ADD       A,#-0x19
   \   000040   601E         JZ        ??SampleApp_ProcessEvent_6
   \   000042   245A         ADD       A,#0x5a
   \   000044   6006         JZ        ??SampleApp_ProcessEvent_7
   \   000046   24EF         ADD       A,#-0x11
   \   000048   60C8         JZ        ??SampleApp_ProcessEvent_2
   \   00004A   80CC         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   00004C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   00005E   80B8         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000060                ; Setup parameters for call to function DataAnalysis
   \   000060   7A..         MOV       R2,#new_cmd & 0xff
   \   000062   7B..         MOV       R3,#(new_cmd >> 8) & 0xff
   \   000064   12....       LCALL     `??DataAnalysis::?relay`; Banked call to: DataAnalysis
   \   000067   80AF         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   E8           MOV       A,R0
   \   000071   FA           MOV       R2,A
   \   000072   E9           MOV       A,R1
   \   000073   FB           MOV       R3,A
   \   000074                ; Setup parameters for call to function AF_DataRequest
   \   000074   75..1E       MOV       ?V2,#0x1e
   \   000077   78..         MOV       R0,#?V2
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   75....       MOV       ?V2,#SampleApp_TransID & 0xff
   \   00007F   75....       MOV       ?V3,#(SampleApp_TransID >> 8) & 0xff
   \   000082   78..         MOV       R0,#?V2
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   A3           INC       DPTR
   \   00008C   8582..       MOV       ?V2,DPL
   \   00008F   8583..       MOV       ?V3,DPH
   \   000092   78..         MOV       R0,#?V2
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   8A82         MOV       DPL,R2
   \   000099   8B83         MOV       DPH,R3
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V2,A
   \   00009E   75..00       MOV       ?V3,#0x0
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   75..01       MOV       ?V2,#0x1
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7920         MOV       R1,#0x20
   \   0000B0   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   0000B2   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B4   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000B6   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000B8   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000BB   7409         MOV       A,#0x9
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   02....       LJMP      ??SampleApp_ProcessEvent_3 & 0xFFFF
    310              }
    311          
    312              // return unprocessed events
    313              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   6480         XRL       A,#0x80
   \   0000C8   800D         SJMP      ??SampleApp_ProcessEvent_8
    314            }
    315          
    316            // Send a message out - This event is generated by a timer
    317            //  (setup in SampleApp_Init()).
    318            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000CA   EE           MOV       A,R6
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   500B         JNC       ??SampleApp_ProcessEvent_9
    319            {
    320              // Send the periodic message
    321              SampleApp_SendPeriodicMessage();
   \   0000CF                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000CF   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    322          
    323              // Setup to send message again in normal period (+ a little jitter)
    324              //osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,(SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    325          
    326              // return unprocessed events
    327              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000D2   EE           MOV       A,R6
   \   0000D3   6401         XRL       A,#0x1
   \   0000D5   FA           MOV       R2,A
   \   0000D6   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000D7   FB           MOV       R3,A
   \   0000D8   8004         SJMP      ??SampleApp_ProcessEvent_10
    328            }
    329          
    330            // Discard unknown events
    331            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000DA   7A00         MOV       R2,#0x0
   \   0000DC   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000DE   7F04         MOV       R7,#0x4
   \   0000E0   02....       LJMP      ?BANKED_LEAVE_XDATA
    332          }
    333          
    334          extern uchar shidu_shi,shidu_ge,wendu_shi,wendu_ge;
    335          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void TempControl(uint8 * msg)
   \                     TempControl:
    337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    338            if(strncmp(msg, "22", 2) == 0)
                              ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char const *"
   \   00000A                ; Setup parameters for call to function strncmp
   \   00000A   75..02       MOV       ?V0,#0x2
   \   00000D   75..00       MOV       ?V1,#0x0
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C..         MOV       R4,#`?<Constant "22">` & 0xff
   \   000017   7D..         MOV       R5,#(`?<Constant "22">` >> 8) & 0xff
   \   000019   12....       LCALL     `??strncmp::?relay`; Banked call to: strncmp
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000021   8B..         MOV       ?V1,R3
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V1
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??TempControl_0 & 0xFFFF
    339            {
    340              uchar temp[3],humidity[3],StrTemp[7];
    341              DHT11();//Æô¶¯ÎÂÊª¶È´«¸ÐÆ÷£¬²¢ÇÒ»ñÈ¡ÎÂÊª¶È
   \   00002B                ; Setup parameters for call to function DHT11
   \   00002B   12....       LCALL     `??DHT11::?relay`; Banked call to: DHT11
    342              temp[0] = wendu_shi + 0x30;
   \   00002E   90....       MOV       DPTR,#wendu_shi
   \   000031   E0           MOVX      A,@DPTR
   \   000032   2430         ADD       A,#0x30
   \   000034   C0E0         PUSH      A
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   F0           MOVX      @DPTR,A
    343              temp[1] = wendu_ge + 0x30;
   \   00003E   90....       MOV       DPTR,#wendu_ge
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2430         ADD       A,#0x30
   \   000044   C0E0         PUSH      A
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   D0E0         POP       A
   \   00004D   F0           MOVX      @DPTR,A
    344              temp[2] = '\0';
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E4           CLR       A
   \   000054   F0           MOVX      @DPTR,A
    345            
    346              humidity[0] = shidu_shi + 0x30;
   \   000055   90....       MOV       DPTR,#shidu_shi
   \   000058   E0           MOVX      A,@DPTR
   \   000059   2430         ADD       A,#0x30
   \   00005B   85..82       MOV       DPL,?XSP + 0
   \   00005E   85..83       MOV       DPH,?XSP + 1
   \   000061   F0           MOVX      @DPTR,A
    347              humidity[1] = shidu_ge + 0x30;
   \   000062   90....       MOV       DPTR,#shidu_ge
   \   000065   E0           MOVX      A,@DPTR
   \   000066   2430         ADD       A,#0x30
   \   000068   C0E0         PUSH      A
   \   00006A   7401         MOV       A,#0x1
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
    348              humidity[2] = '\0';
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E4           CLR       A
   \   000078   F0           MOVX      @DPTR,A
    349            
    350              osal_memcpy(StrTemp,temp,2);
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   7403         MOV       A,#0x3
   \   00007B   12....       LCALL     ?XSTACK_DISP100_8
   \   00007E   88..         MOV       ?V0,R0
   \   000080   89..         MOV       ?V1,R1
   \   000082   75..00       MOV       ?V2,#0x0
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008A   7C02         MOV       R4,#0x2
   \   00008C   7D00         MOV       R5,#0x0
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV       A,#0x3
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
    351              osal_memcpy(&StrTemp[2],"  ", 2);
   \   00009B                ; Setup parameters for call to function osal_memcpy
   \   00009B   75....       MOV       ?V0,#`?<Constant "  ">` & 0xff
   \   00009E   75....       MOV       ?V1,#(`?<Constant "  ">` >> 8) & 0xff
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A6   7C02         MOV       R4,#0x2
   \   0000A8   7D00         MOV       R5,#0x0
   \   0000AA   740B         MOV       A,#0xb
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   AA82         MOV       R2,DPL
   \   0000B1   AB83         MOV       R3,DPH
   \   0000B3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
    352              osal_memcpy(&StrTemp[4], humidity,3);
   \   0000BB                ; Setup parameters for call to function osal_memcpy
   \   0000BB   A8..         MOV       R0,?XSP + 0
   \   0000BD   A9..         MOV       R1,?XSP + 1
   \   0000BF   88..         MOV       ?V0,R0
   \   0000C1   89..         MOV       ?V1,R1
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C8   7C03         MOV       R4,#0x3
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   740D         MOV       A,#0xd
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   AA82         MOV       R2,DPL
   \   0000D3   AB83         MOV       R3,DPH
   \   0000D5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D8   7403         MOV       A,#0x3
   \   0000DA   12....       LCALL     ?DEALLOC_XSTACK8
    353            
    354              AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,SAMPLEAPP_PERIODIC_CLUSTERID,7,StrTemp,&SampleApp_TransID,AF_DISCV_ROUTE,AF_DEFAULT_RADIUS );
   \   0000DD                ; Setup parameters for call to function AF_DataRequest
   \   0000DD   75..1E       MOV       ?V0,#0x1e
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   0000E8   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   7409         MOV       A,#0x9
   \   0000F2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F5   88..         MOV       ?V0,R0
   \   0000F7   89..         MOV       ?V1,R1
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   75..07       MOV       ?V0,#0x7
   \   000101   75..00       MOV       ?V1,#0x0
   \   000104   78..         MOV       R0,#?V0
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   75..01       MOV       ?V0,#0x1
   \   00010C   78..         MOV       R0,#?V0
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   7920         MOV       R1,#0x20
   \   000113   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000115   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000117   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000119   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00011B   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00011E   7409         MOV       A,#0x9
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
    355            }
    356          }
   \                     ??TempControl_0:
   \   000123   740D         MOV       A,#0xd
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   \   000128   02....       LJMP      ?Subroutine0 & 0xFFFF
    357          //ÍøÂçÀ´ÏûÏ¢ºóµÄ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void DataAnalysis(uint8 * msg)
   \                     DataAnalysis:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    360            //ÅÐ¶ÏÊÇÖÕ¶Ë»¹ÊÇÐ­µ÷Æ÷
    361            if(zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR)
   \   000009   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7014         JNZ       ??DataAnalysis_0
    362            {
    363              HalUARTWrite(0,msg,(byte)osal_strlen(msg));
                                                          ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   00000F                ; Setup parameters for call to function osal_strlen
   \   00000F   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000012   8A..         MOV       ?V0,R2
   \   000014                ; Setup parameters for call to function HalUARTWrite
   \   000014   AC..         MOV       R4,?V0
   \   000016   7D00         MOV       R5,#0x0
   \   000018   EE           MOV       A,R6
   \   000019   FA           MOV       R2,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FB           MOV       R3,A
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000021   8007         SJMP      ??DataAnalysis_1
    364            }
    365            else if(zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE)
   \                     ??DataAnalysis_0:
   \   000023   6402         XRL       A,#0x2
   \   000025   7003         JNZ       ??DataAnalysis_1
    366            {
    367              TempControl(msg);
   \   000027                ; Setup parameters for call to function TempControl
   \   000027   12....       LCALL     `??TempControl::?relay`; Banked call to: TempControl
    368            }
    369          }
   \                     ??DataAnalysis_1:
   \   00002A   80..         SJMP      ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    370          
    371          /*********************************************************************
    372           * Event Generation Functions
    373           */
    374          /*********************************************************************
    375           * @fn      SampleApp_HandleKeys
    376           *
    377           * @brief   Handles all key events for this device.
    378           *
    379           * @param   shift - true if in shift/alt.
    380           * @param   keys - bit field for key events. Valid entries:
    381           *                 HAL_KEY_SW_2
    382           *                 HAL_KEY_SW_1
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    387          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    388            (void)shift;  // Intentionally unreferenced parameter
    389            
    390            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5007         JNC       ??SampleApp_HandleKeys_0
    391            {
    392              /* This key sends the Flash Command is sent to Group 1.
    393               * This device will not receive the Flash Command from this
    394               * device (even if it belongs to group 1).
    395               */
    396              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    397            }
    398          
    399            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5024         JNC       ??SampleApp_HandleKeys_1
    400            {
    401              /* The Flashr Command is sent to Group 1.
    402               * This key toggles this device in and out of group 1.
    403               * If this device doesn't belong to group 1, this application
    404               * will not receive the Flash command sent to group 1.
    405               */
    406              aps_Group_t *grp;
    407              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    408              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV       R2,#0x1
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7914         MOV       R1,#0x14
   \   00001D   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000020   8B..         MOV       ?V1,R3
   \   000022   EA           MOV       A,R2
   \   000023   45..         ORL       A,?V1
   \   000025   600B         JZ        ??SampleApp_HandleKeys_2
    409              {
    410                // Remove from the group
    411                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV       R2,#0x1
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   7914         MOV       R1,#0x14
   \   00002D   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   000030   8009         SJMP      ??SampleApp_HandleKeys_1
    412              }
    413              else
    414              {
    415                // Add to the flash group
    416                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV       R1,#0x14
   \   000038   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    417              }
    418            }
    419          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP      ??Subroutine2_0
    420          
    421          /*********************************************************************
    422           * LOCAL FUNCTIONS
    423           */
    424          
    425          /*********************************************************************
    426           * @fn      SampleApp_MessageMSGCB
    427           *
    428           * @brief   Data message processor callback.  This function processes
    429           *          any incoming data - probably from other devices.  So, based
    430           *          on cluster ID, perform the intended action.
    431           *
    432           * @param   none
    433           *
    434           * @return  none
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    437          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    438            uint16 flashTime;
    439          
    440            switch ( pkt->clusterId )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6402         XRL       A,#0x2
   \   000010   7002         JNZ       ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703C         JNZ       ??SampleApp_MessageMSGCB_1
    441            {
    442              case SAMPLEAPP_PERIODIC_CLUSTERID:
    443                break;
    444          
    445              case SAMPLEAPP_FLASH_CLUSTERID:
    446                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    447                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV       A,R2
   \   000017   2422         ADD       A,#0x22
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024                ; Setup parameters for call to function HalLedBlink
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FA           MOV       R2,A
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   E4           CLR       A
   \   000034   C8           XCH       A,R0
   \   000035   F9           MOV       R1,A
   \   000036   EA           MOV       A,R2
   \   000037   28           ADD       A,R0
   \   000038   F5..         MOV       ?V0,A
   \   00003A   E4           CLR       A
   \   00003B   39           ADDC      A,R1
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   7402         MOV       A,#0x2
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?US_SHR
   \   000045   AC..         MOV       R4,?V0
   \   000047   AD..         MOV       R5,?V1
   \   000049   7B32         MOV       R3,#0x32
   \   00004B   7A04         MOV       R2,#0x4
   \   00004D   7908         MOV       R1,#0x8
   \   00004F   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    448                break;
    449            }
    450          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000052   02....       LJMP      ??Subroutine2_0 & 0xFFFF
    451          
    452          /*********************************************************************
    453           * @fn      SampleApp_SendPeriodicMessage
    454           *
    455           * @brief   Send the periodic message.
    456           *
    457           * @param   none
    458           *
    459           * @return  none
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    463            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    464                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    465                                 1,
    466                                 (uint8*)&SampleAppPeriodicCounter,
    467                                 &SampleApp_TransID,
    468                                 AF_DISCV_ROUTE,
    469                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV       R1,#0x20
   \   000035   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000040   7409         MOV       A,#0x9
   \   000042   02....       LJMP      ?Subroutine1 & 0xFFFF
    470            {
    471            }
    472            else
    473            {
    474              // Error occurred in request to send.
    475            }
    476          }
    477          
    478          /*********************************************************************
    479           * @fn      SampleApp_SendFlashMessage
    480           *
    481           * @brief   Send the flash message to group 1.
    482           *
    483           * @param   flashTime - in milliseconds
    484           *
    485           * @return  none
    486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    488          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    489            uint8 buffer[3];
    490            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    491            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    492            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    493          
    494            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    495                                 SAMPLEAPP_FLASH_CLUSTERID,
    496                                 3,
    497                                 buffer,
    498                                 &SampleApp_TransID,
    499                                 AF_DISCV_ROUTE,
    500                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    501            {
    502            }
    503            else
    504            {
    505              // Error occurred in request to send.
    506            }
    507          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TempControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TempControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DataAnalysis::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DataAnalysis

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "22">`:
   \   000000   323200       DB "22"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "
    508          
    509          /*********************************************************************
    510          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     22   DataAnalysis
        0     10   -> HalUARTWrite
        0     10   -> TempControl
        0     10   -> osal_strlen
      0     22   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0     10   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
      0     21   SampleApp_ProcessEvent
        0     21   -> AF_DataRequest
        0     12   -> DataAnalysis
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest
      1     43   TempControl
        0     33   -> AF_DataRequest
        0     24   -> DHT11
        0     27   -> osal_memcpy
        0     26   -> strncmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "  ">
       3  ?<Constant "22">
       8  ?<Constant "Group 1">
      10  ?<Constant "SampleApp">
       5  ??Subroutine2_0
       5  ?Subroutine0
       3  ?Subroutine1
      44  DataAnalysis
       6  DataAnalysis::?relay
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      61  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     163  SampleApp_Init
       6  SampleApp_Init::?relay
      85  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     227  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     116  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      69  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     299  TempControl
       6  TempControl::?relay

 
 1 077 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    40 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
    40 bytes of CONST    memory
 1 077 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: 3
